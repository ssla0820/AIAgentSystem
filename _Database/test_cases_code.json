[
    {
        "name": "test_launch_process_1_1",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_1] GDPR shows up when first launch",
        "description": [
            "1. clear entire cache",
            "2. launch PDR",
            "3. check if GDPR dialog is shown"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_1] GDPR shows up when first launch')\n    def test_launch_process_1_1(self):\n    '''\n        1. clear entire cache\n        2. launch PDR\n        3. check if GDPR dialog is shown\n        '''\n# Clear Cache (Clear sign in log) to become Essential build\n        main_page.clear_log_in()\n\n        # Clear Cache + GDPR\n        main_page.clear_cache_and_gdpr()\n\n        # launch PDR\n        main_page.launch_app()\n\n        # # [L7] Pop up GDPR dialog\n        with step(\"[Verify] Check if GDPR dialog is shown\"):\n            qdpr_window = main_page.exist(L.base.gdpr_dialog.main)\n\n        assert qdpr_window, \"GDPR dialog not found!\""
    },
    {
        "name": "test_launch_process_1_2",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_2] Click [Accept and Continue] button on GDPR dialog",
        "description": [
            "1. Check if \"Accept and Continue\" button is shown on GDPR dialog"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_2] Click [Accept and Continue] button on GDPR dialog')\n    def test_launch_process_1_2(self):\n    '''\n        1. Check if \"Accept and Continue\" button is shown on GDPR dialog\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_launch_process_1_1\"\n        self.ensure_dependency(dependency_test)\n\n        # Start the test case, original uuid(\"98c0a3ab-d4de-46ef-bb16-39884f6a1caf\") \n        with step(\"[Verify] Check if continue button is shown on GDPR dialog\"):\n            btn_continue = main_page.exist(L.base.gdpr_dialog.btn_accept_continue)\n        assert btn_continue, \"Accept and Continue button not found!\""
    },
    {
        "name": "test_launch_process_1_3",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_3] Check upgrade button or link on essential dialog",
        "description": [
            "1. click [Accept and Continue] button",
            "2. check if upgrade link or button is shown on Essential dialog"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_3] Check upgrade button or link on essential dialog')\n    def test_launch_process_1_3(self):\n    '''\n        1. click [Accept and Continue] button\n        2. check if upgrade link or button is shown on Essential dialog\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_launch_process_1_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L11] Click [Upgrade Now] button\n        # with uuid(\"c9b335af-3053-4807-accb-2671a5de7c46\") as case:\n        # Click [Upgrade Now]\n\n        with step(\"[Action] Click [Accept and Continue] button\"):\n            main_page.click(L.base.gdpr_dialog.btn_accept_continue)\n\n        with step(\"[Verify] Check if upgrade link or button is shown on Essential dialog\"):\n            # check if the upgrade link or button is shown in 10 secs\n            upgrade_link = main_page.exist({'AXTitle': 'GET PREMIUM', 'AXRole': 'AXLink'}, timeout=10)\n            upgrade_btn = main_page.exist({'AXTitle': 'Upgrade Now', 'AXRole': 'AXButton'}, timeout=10)\n\n            if upgrade_link: main_page.mouse.click(*upgrade_link.center)\n            elif upgrade_btn: main_page.mouse.click(*upgrade_btn.center)\n\n            time.sleep(DELAY_TIME*1) # unable to do next step until web is opened, so added time sleep\n\n        assert upgrade_link or upgrade_btn, f\"Upgrade Now link/ button not found! {upgrade_link=}, {upgrade_btn=}\"\n\n    # @pytest.mark.skip"
    },
    {
        "name": "test_launch_process_1_4",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_4] Launch PDR Essential build",
        "description": [
            "1. Click \"Launch Free Version\" button and enter main program",
            "2. Check if \"Import Media\" icon is shown on Media Room"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_4] Launch PDR Essential build')\n    def test_launch_process_1_4(self):\n    '''\n        1. Click \"Launch Free Version\" button and enter main program\n        2. Check if \"Import Media\" icon is shown on Media Room\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_launch_process_1_3\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L12] Launch PDR Essential build\n        # with uuid(\"ebc38a68-9415-48ab-9914-16aa63afadb5\") as case:\n\n        # Launch PDR Essential\n        with step(\"[Action] Click [Launch Free Version] button and enter main program by new project\"):\n            check_free_version = self.launch_Essential_build()\n\n        if not check_free_version:\n            assert False, \"Launch Essential build failed! Error occurred when click 'Launch Free Version' button --> Click 'New Project' on Launcher\"\n\n        with step(\"[Verify] Check if 'Import Media' icon is shown on Media Room\"):\n            check_import_icon = main_page.exist(L.media_room.btn_media_filter_display_audio_only, timeout=10)\n        \n        if not check_import_icon:\n            assert False, \"Import Media icon not found!\"\n\n        assert True"
    },
    {
        "name": "test_launch_process_1_5",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_5] BB shows up and close by pressing ESC key",
        "description": [
            "1. Check BB show up",
            "2. Close BB by pressing ESC key",
            "3. Check if BB is closed"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_5] BB shows up and close by pressing ESC key')\n    def test_launch_process_1_5(self):\n    '''\n        1. Check BB show up\n        2. Close BB by pressing ESC key\n        3. Check if BB is closed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_launch_process_1_4\"\n        self.ensure_dependency(dependency_test)\n\n        # Handle Seasonal BB (Click ESC to close BB)\n        # with uuid(\"600a1107-4281-415c-bda2-f4923e7ebd48\") as case:\n\n        with step(\"[Verify] Check if seasonal BB shows\"):\n            # Check if seasonal BB is shown\n            if not main_page.exist(L.base.seasonal_bb_window.main, timeout=7):\n                assert False, \"Seasonal BB not found!\"\n        \n        with step(\"[Action] Close seasonal BB dialog\"):\n            # Close seasonal BB dialog\n            main_page.press_esc_key()\n\n        with step(\"[Verify] Check if seasonal BB is closed\"):\n            # Check if seasonal BB is closed\n            close_status = False\n            if not main_page.exist(L.base.seasonal_bb_window.main, timeout=10): # search for 10 secs\n                close_status = True\n\n            assert close_status, \"Seasonal BB not closed! by pressing ESC key\""
    },
    {
        "name": "test_launch_process_1_6",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_6] Sign 365 account and restart AP",
        "description": [
            "1. Sign in 365 account",
            "2. Restart AP",
            "3. Check PDR is launched after restart",
            "4. Click [No] on CEIP dialog and click [New Project] on Launcher",
            "5. Check PDR is launched by if 'Import Media' icon is shown on Media Room"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_6] Sign 365 account and restart AP')\n    def test_launch_process_1_6(self):\n    '''\n        1. Sign in 365 account\n        2. Restart AP\n        3. Check PDR is launched after restart\n        4. Click [No] on CEIP dialog and click [New Project] on Launcher\n        5. Check PDR is launched by if 'Import Media' icon is shown on Media Room\n        '''\n# with uuid(\"89b5f8e9-dc8f-42d7-9fda-2771939dfb81\") as case:\n        # with uuid(\"45d2632c-6975-4bed-bd4a-5c13667d1cc0\") as case:\n        logger('start test_launch_process_1_6')\n\n        # Ensure the dependency test is run and passed (only need to open PDR Essential build)\n        dependency_test = \"test_launch_process_1_5\"\n        if not self.ensure_dependency(dependency_test, run_dependency=False):\n            # clear log in cache\n            main_page.clear_log_in()\n            # launch APP\n            main_page.launch_app()\n            # launch PDR\n            self.launch_Essential_build()\n            \n        # click [Sign in] icon to sign in 365 account\n        main_page.handle_sign_in(account='sistarftcn.005@gmail.com', pw='ilovecc680520')\n\n        # Click [Restart]\n        with step(\"[Action] Click [Restart] button\"):\n            # if activate dialog is shown, click [Activate] button\n            main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn=\"left\", timeout=6, no_warning=True)\n            btn_restart = main_page.exist(\n                {'AXTitle': 'Restart', 'AXIdentifier': 'IDC_CLALERT_BUTTON_0', 'AXRole': 'AXButton'}, timeout=15)\n            if not btn_restart:\n                assert False, \"Restart button not found!\"\n            main_page.mouse.click(*btn_restart.center)\n        \n        with step(\"[Verify] PDR is launched after restart\"):\n            launch_status = False\n            time.sleep(DELAY_TIME*2) # wait for PDR is closed at first\n            if main_page.is_app_exist(timeout=10): # check app is exist in 10 secs\n                launch_status = True\n\n            assert launch_status, \"PDR did not launch after restart!\"\n\n        with step(\"[Action] Click [New Project] on Launcher\"):\n            # if activate dialog is shown, click [Activate] button\n            main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn=\"left\", timeout=6, no_warning=True)\n            # click (No, thank you) checkbox\n            # time.sleep(DELAY_TIME * 5)\n            main_page.refresh_top()\n            main_page.click_CEIP_dialog()\n            main_page.refresh_top()\n            main_page.click_new_project_on_launcher()\n            main_page.refresh_top()\n\n        with step(\"[Verify] Check PDR is launched by if 'Import Media' icon is shown on Media Room\"):\n            # Check restart ok\n            verify_step = False\n            if main_page.is_exist(L.media_room.btn_import_media, None, 20): # search for 20 secs\n                verify_step = True\n\n\n        assert verify_step, \"Sign in PDR and relaunch AP FAILED!\""
    },
    {
        "name": "test_launch_process_1_7",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_7] Tick/Untick \"Show Launcher after close program\"",
        "description": [
            "1. Close AP and back to launcher",
            "2. Check if \"Show Launcher after close program\" is default ticked",
            "3. Untick \"Show Launcher after close program\"",
            "4. Check if \"Show Launcher after close program\" is unticked"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_7] Tick/Untick \"Show Launcher after close program\"')\n    def test_launch_process_1_7(self):\n    '''\n        1. Close AP and back to launcher\n        2. Check if \"Show Launcher after close program\" is default ticked\n        3. Untick \"Show Launcher after close program\"\n        4. Check if \"Show Launcher after close program\" is unticked\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_launch_process_1_6\"\n        self.ensure_dependency(dependency_test)\n\n        # with uuid(\"ae748270-f3c2-40a4-abfb-29c9cac00762\") as case:\n        # (Close PDR) should back to launcher\n        if not main_page.click_close_then_back_to_launcher():\n            assert False, \"Close AP failed!\"\n\n        # check the default value of \"show launcher again when closing\" (1: ticked, 0: unticked)\n        verify_value = main_page.get_value_in_checkbox_show_launcher()\n        if verify_value == 0:\n            assert False, \"Default value of 'show launcher again when closing' is incorrect (Expected: 1; Current:0)!\"\n        elif verify_value == None: assert False, \"Get value in checkbox show launcher failed when launcher shows by closed AP!\"\n\n        # untick chx_show_launcher\n        with step(\"[Action] Untick 'show launcher again when closing'\"):\n            main_page.click(L.base.launcher_window.chx_show_launcher)\n            time.sleep(DELAY_TIME * 2)\n        \n        verify_value = main_page.get_value_in_checkbox_show_launcher()\n\n        if verify_value == 1:\n            assert False, \"Untick 'show launcher again when closing' failed!\"\n        elif verify_value == None: assert False, \"Get value in checkbox show launcher failed after untick!\"\n\n        assert True"
    },
    {
        "name": "test_launch_process_1_8",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_8] Launch/ Close PDR with \"Show Launcher after close program\" is unticked",
        "description": [
            "1. Enter 'New Project' on Launcher",
            "2. Close PDR and back to launcher",
            "3. Check Launcher is not shown after close AP",
            "4. Launch PDR again",
            "5. Check Launcher is shown after launch AP"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_8] Launch/ Close PDR with \"Show Launcher after close program\" is unticked')\n    def test_launch_process_1_8(self):\n    '''\n            1. Enter 'New Project' on Launcher\n            2. Close PDR and back to launcher\n            3. Check Launcher is not shown after close AP\n            4. Launch PDR again\n            5. Check Launcher is shown after launch AP\n            '''\n# Ensure the dependency test is run and passed\n            dependency_test = \"test_launch_process_1_7\"\n            self.ensure_dependency(dependency_test)\n\n            # [L85] Tick/Un-tick \"Show Launcher after close program\"\n            # with uuid(\"c7cdcba0-c817-4a1c-b3eb-52362d6ffae4\") as case:\n            # Click [New project] to enter timeline\n            if not main_page.click_new_project_on_launcher():\n                assert False, \"Click 'New Project' on Launcher failed!\"\n\n            # Close PDR then close AP\n            if not main_page.click_close_then_back_to_launcher():\n                assert False, \"Close AP failed to show launcher!\"\n\n            # Should not pop up launcher then return False\n            if main_page.is_app_exist(timeout=5):\n                assert False, \"Launcher shows up incorrectly when 'show launcher again when closing' is unticked!\"\n            \n            # launch PDR then set (chx_show_launcher) to default checkbox\n            if not main_page.launch_app() or not main_page.is_app_exist():\n                assert False, \"Launch AP again failed!\"\n\n            # Check launch shows up after Launch AP\n            with step(\"[Verify] Check if launcher shows when launch AP with 'show launcher again when closing' is unticked\"):\n                if not main_page.click(L.base.launcher_window.chx_show_launcher):\n                    assert False, \"Launcher doesn't show when launch AP with 'show launcher again when closing' is unticked!\"\n\n            assert True"
    },
    {
        "name": "test_launch_process_1_z",
        "tags": [
            "launch_process",
            "launch"
        ],
        "marked_name": "[test_launch_process_1_z] Close AP due to the section is completed",
        "description": [
            "1. Launch PDR",
            "2. click \"New Project\" on Launcher",
            "3. Check if \"Media Library\" is shown on Media Room"
        ],
        "full_code": "@pytest.mark.launch_process\n    @pytest.mark.launch\n    @pytest.mark.name('[test_launch_process_1_z] Close AP due to the section is completed')\n    def test_launch_process_1_z(self):\n    '''\n        1. Launch PDR\n        2. click \"New Project\" on Launcher\n        3. Check if \"Media Library\" is shown on Media Room\n        '''\n# launch PDR in launcher\n        with step(\"[Initial] Launch PDR with clear cache\"):\n            self.launch_365_build_with_clear_cache()\n\n        # uuid(\"26e3ee5d-f35e-462d-bc4a-806d507ae850\")\n        with step(\"[Verify] Check [Use Sample Media] is shown on Media Room\"):\n            assert main_page.exist(L.media_room.string_use_sample_media, timeout=7), \"Use Sample Media not found!\""
    },
    {
        "name": "test_media_room_func_2_2",
        "tags": [
            "media_room_func",
            "media_room"
        ],
        "marked_name": "[test_media_room_func_2_2] Switch to another room (Particle Room) and back to Media Room",
        "description": [
            "1. Switch to another room (Particle Room)",
            "2. Switch back to Media Room",
            "3. Check if \"Use Sample Media\" is shown on Media Room"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.name('[test_media_room_func_2_2] Switch to another room (Particle Room) and back to Media Room')\n    def test_media_room_func_2_2(self):\n    '''\n        1. Switch to another room (Particle Room)\n        2. Switch back to Media Room\n        3. Check if \"Use Sample Media\" is shown on Media Room\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_1\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L97] On Boarding flow_1 > switch to another room & go back\n        # with uuid(\"23a12e63-4e72-40b4-945d-ff28a89add36\") as case:\n        # enter particle room\n        if not main_page.enter_room(5):\n            assert False, \"Enter Particle Room failed!\"\n\n        # enter media room\n        if not main_page.enter_room(0):\n            assert False, \"Enter Media Room failed!\"\n\n        with step(\"[Verify] Check [Use Sample Media] is shown on Media Room\"):\n            assert main_page.exist(L.media_room.string_use_sample_media, timeout=7), \"Use Sample Media not found!\""
    },
    {
        "name": "test_media_room_func_2_3",
        "tags": [
            "media_room_func",
            "media_room",
            "import_media"
        ],
        "marked_name": "[test_media_room_func_2_3] Click [Use Sample Media] and select an imported media",
        "description": [
            "1. Click \"Use Sample Media\" on Media Room",
            "2. Select an imported media"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.import_media\n    @pytest.mark.name('[test_media_room_func_2_3] Click [Use Sample Media] and select an imported media')\n    def test_media_room_func_2_3(self):\n    '''\n        1. Click \"Use Sample Media\" on Media Room\n        2. Select an imported media\n        '''\n# Ensure the dependency test is run and passed\n        # if not run test_media_room_func_2_2, run test_media_room_func_2_1 to initialize the status\n        dependency_test = \"test_media_room_func_2_2\"\n        if not self.ensure_dependency(dependency_test, run_dependency=False):\n            self.test_media_room_func_2_1() \n\n        # [L98] On Boarding flow_1 > click (use sample media) hyperlink\n        # with uuid(\"d032fcd4-f9ce-4d86-95cb-fe61cbc6f3a7\") as case:\n\n        with step(\"[Action] Click [Use Sample Media] on Media Room\"):\n            main_page.click(L.media_room.string_use_sample_media) # \"Use Sample Media\" must shown in previous step\n\n        select_media = main_page.select_library_icon_view_media('Landscape 02.jpg')\n        assert select_media, \"Select media failed!\""
    },
    {
        "name": "test_media_room_func_2_4",
        "tags": [
            "media_room_func",
            "media_room",
            "import_media",
            "bubble"
        ],
        "marked_name": "[test_media_room_func_2_4] Check bubble shows after click [Insert] button",
        "description": [
            "1. Click [Insert] button",
            "2. Check bubble shows after click [Insert] button"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.import_media\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_media_room_func_2_4] Check bubble shows after click [Insert] button')\n    def test_media_room_func_2_4(self):\n    '''\n        1. Click [Insert] button\n        2. Check bubble shows after click [Insert] button\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_3\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L101] On Boarding flow_2> show two bubble\n        # with uuid(\"f5a29d63-68fa-4554-8d72-05f5df80812a\") as case:\n\n        with step(\"[Action] Click [Insert] button\"):\n            # Click [Insert] button\n            if not main_page.click(L.main.tips_area.btn_insert_to_selected_track):\n                assert False, \"Click [Insert] button failed!\"\n\n        with step(\"[Verify] Check bubble shows after click [Insert] button\"):\n            verify_bubble_1 = False\n            verify_bubble_2 = False\n            if main_page.exist(L.media_room.string_on_boarding_blue_bubble_media, timeout=5):\n                verify_bubble_1 = True\n            if main_page.exist(L.media_room.string_on_boarding_blue_bubble_tooltip, timeout=5):\n                verify_bubble_2 = True\n\n            assert verify_bubble_1 and verify_bubble_2, f\"Bubble not found after click [Insert] button!, media bubble= {verify_bubble_1}, tooltip bubble= {verify_bubble_2}\""
    },
    {
        "name": "test_media_room_func_2_5",
        "tags": [
            "media_room_func",
            "media_room",
            "bubble"
        ],
        "marked_name": "[test_media_room_func_2_5] Check bubble content is correct",
        "description": [
            "1. Check bubble content is correct"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_media_room_func_2_5] Check bubble content is correct')\n    def test_media_room_func_2_5(self):\n    '''\n        1. Check bubble content is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_4\"\n        self.ensure_dependency(dependency_test)\n\n\n        # # [L102] On Boarding flow_2> Continue above case > check UI response of \"bubbles\"\n        # with uuid(\"db557877-2404-45b1-a573-bb9931430283\") as case:\n\n        blue_bubble_1_image = main_page.snapshot(L.media_room.string_on_boarding_blue_bubble_media, file_name=Auto_Ground_Truth_Folder + 'L102_1.png')\n        blue_bubble_2_image = main_page.snapshot(L.media_room.string_on_boarding_blue_bubble_tooltip, file_name=Auto_Ground_Truth_Folder + 'L102_2.png')\n        bubble_1_preview_result = main_page.compare(Ground_Truth_Folder + 'L102_1.png', blue_bubble_1_image)\n        bubble_2_preview_result = main_page.compare(Ground_Truth_Folder + 'L102_2.png', blue_bubble_2_image)\n        \n        assert bubble_1_preview_result and bubble_2_preview_result, f\"Bubble content is incorrect!, media bubble= {bubble_1_preview_result}, tooltip bubble= {bubble_2_preview_result}\""
    },
    {
        "name": "test_media_room_func_2_6",
        "tags": [
            "media_room_func",
            "media_room",
            "bubble"
        ],
        "marked_name": "[test_media_room_func_2_6] Click anywhere to close bubble",
        "description": [
            "1. Click anywhere to close bubble"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_media_room_func_2_6] Click anywhere to close bubble')\n    def test_media_room_func_2_6(self):\n    '''\n        1. Click anywhere to close bubble\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_5\"\n        self.ensure_dependency(dependency_test)\n\n\n        # # [L104] On Boarding flow_2> Continue above case to click anywhere > close all bubble\n        # with uuid(\"c3af3f4a-a05d-4596-ab93-1f03b76b1f7c\") as case:\n        # Select timeline Photo\n        timeline_operation_page.select_timeline_media(track_index=0, clip_index=0)\n\n        with step(\"[Verify] Check bubbles are closed after clicking anywhere\"):\n            verify_bubble_1 = not main_page.is_exist(L.media_room.string_on_boarding_blue_bubble_media)\n            verify_bubble_2 = not main_page.is_exist(L.media_room.string_on_boarding_blue_bubble_tooltip)\n\n        assert verify_bubble_1 and verify_bubble_2, f\"Bubble not closed after click anywhere!, media bubble= {verify_bubble_1}, tooltip bubble= {verify_bubble_2}\""
    },
    {
        "name": "test_media_room_func_2_7",
        "tags": [
            "media_room_func",
            "media_room",
            "stock_media"
        ],
        "marked_name": "[test_media_room_func_2_7] Check [Stock Media] button shows",
        "description": [
            "1. Check [Stock Media] button shows"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.stock_media\n    @pytest.mark.name('[test_media_room_func_2_7] Check [Stock Media] button shows')\n    def test_media_room_func_2_7(self):\n    '''\n        1. Check [Stock Media] button shows\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_6\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L118] Download from iStock Content (Stock Content Library refine)\n        # with uuid(\"129dbc9e-602c-4a86-b469-42bbcddb58e3\") as case:\n        with step(\"[Verify] Check [Stock Media] button shows\"):\n            result = main_page.exist(L.media_room.btn_stock_media)\n            assert result, \"Stock Media button not found!\""
    },
    {
        "name": "test_media_room_func_2_8",
        "tags": [
            "media_room_func",
            "media_room",
            "pip_designer",
            "timeline",
            "bubble"
        ],
        "marked_name": "[test_media_room_func_2_8] Check Cutout bubble content is correct",
        "description": [
            "1. Set time code",
            "2. Import media to timeline",
            "3. Enter pip designer by double click video",
            "4. Check Cutout bubble content is correct"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.pip_designer\n    @pytest.mark.timeline\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_media_room_func_2_8] Check Cutout bubble content is correct')\n    def test_media_room_func_2_8(self):\n    '''\n        1. Set time code\n        2. Import media to timeline\n        3. Enter pip designer by double click video\n        4. Check Cutout bubble content is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L407] 3.4 Pip designer > Auto cutout > Double click video\n        # with uuid(\"55f5f7ca-3abc-4533-84ca-58a046a00dc9\") as case:\n        # Set timecode :\n        if not main_page.set_timeline_timecode('00_00_06_00'):\n            assert False, \"Set timecode failed!\"\n\n        # Insert Skateboard 03.mp4 to timeline\n        if not main_page.select_library_icon_view_media('Skateboard 03.mp4'):\n            assert False, \"Select media failed!\"\n\n        if not main_page.tips_area_insert_media_to_selected_track():\n            assert False, \"Insert media failed!\"\n        # time.sleep(DELAY_TIME * 2)\n\n        # Select timeline Video\n        timeline_operation_page.select_timeline_media(track_index=0, clip_index=1)\n        # time.sleep(DELAY_TIME * 2)\n\n        # double click video to enter pip designer\n        with step(\"[Action] Double click video to enter pip designer\"):\n            main_page.double_click()\n        # time.sleep(DELAY_TIME * 3)\n\n        blue_bubble_cutout = main_page.snapshot(L.pip_designer.chromakey.bubble_cutout,\n                                                file_name=Auto_Ground_Truth_Folder + 'L407.png')\n        cutout_bubble_preview = main_page.compare(Ground_Truth_Folder + 'L407.png', blue_bubble_cutout, similarity=0.85)\n        assert cutout_bubble_preview, \"Cutout bubble content is not as expected!\""
    },
    {
        "name": "test_media_room_func_2_9",
        "tags": [
            "media_room_func",
            "pip_designer",
            "bubble"
        ],
        "marked_name": "[test_media_room_func_2_9] Check Cutout bubble is closed after clicking properties",
        "description": [
            "1. Click properties",
            "2. Check bubble is closed"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.pip_designer\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_media_room_func_2_9] Check Cutout bubble is closed after clicking properties')\n    def test_media_room_func_2_9(self):\n    '''\n        1. Click properties\n        2. Check bubble is closed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_8\"\n        self.ensure_dependency(dependency_test)\n        \n\n        # [L408] 3.4 Pip designer > Auto cutout > click anywhere > can close bubble normally\n        # with uuid(\"643bbe5b-fc4a-4a20-a1a0-e3c2b0013c64\") as case:\n        with step('[Action] Ckick properties to close bubble'):\n            # click properties\n            main_page.click(L.pip_designer.properties_title)\n            time.sleep(DELAY_TIME * 2)\n        with step('[Verify] Check bubble is closed after clicking properties'):\n            # bubble cutout should be closed\n            verify_result = False\n            if not main_page.is_exist(L.pip_designer.chromakey.bubble_cutout):\n                verify_result = True\n            assert verify_result, \"Bubble is not closed after clicking properties!\""
    },
    {
        "name": "test_media_room_func_2_10",
        "tags": [
            "media_room_func",
            "pip_designer",
            "auto_cutout"
        ],
        "marked_name": "[test_media_room_func_2_10] Check Cutout button and close pip designer",
        "description": [
            "1. Check if cutout button is shown",
            "2. Close pip designer"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.pip_designer\n    @pytest.mark.auto_cutout\n    @pytest.mark.name('[test_media_room_func_2_10] Check Cutout button and close pip designer')\n    def test_media_room_func_2_10(self):\n    '''\n        1. Check if cutout button is shown\n        2. Close pip designer\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_9\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L406] 3.4 Pip designer > Auto cutout > Display cutout setting\n        # with uuid(\"00f15326-015a-4964-b04a-02ab6761d196\") as case:\n\n        with step(\"[Verify] Check if cutout button is shown\"):\n            if not main_page.is_exist(L.pip_designer.chromakey.cutout_button):\n                assert False, \"Cutout button not found!\"\n\n            # click [OK] to close pip designer\n            pip_designer_page.click_ok()\n        assert True"
    },
    {
        "name": "test_media_room_func_2_11",
        "tags": [
            "media_room_func",
            "media_room",
            "pip_designer",
            "timeline",
            "content_pack",
            "pip_object"
        ],
        "marked_name": "[test_media_room_func_2_11] Add Sticker to timeline by R-click menu and unfold chroma key in pip designer",
        "description": [
            "1. Select timeline track2",
            "2. Enter pip designer",
            "3. Select template (search library: Winter 01)",
            "4. Add Sticker to timeline by R-click menu",
            "5. Select sticker on timeline",
            "6. Double click sticker to enter pip designer",
            "7. Unfold chroma key",
            "8. Check unfold chroma key tab correctly",
            "9. Fold chroma key"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.pip_designer\n    @pytest.mark.timeline\n    @pytest.mark.content_pack\n    @pytest.mark.pip_object\n    @pytest.mark.name('[test_media_room_func_2_11] Add Sticker to timeline by R-click menu and unfold chroma key in pip designer')\n    def test_media_room_func_2_11(self):\n    '''\n        1. Select timeline track2\n        2. Enter pip designer\n        3. Select template (search library: Winter 01)\n        4. Add Sticker to timeline by R-click menu\n        5. Select sticker on timeline\n        6. Double click sticker to enter pip designer\n        7. Unfold chroma key\n        8. Check unfold chroma key tab correctly\n        9. Fold chroma key\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_media_room_func_2_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L425] 3.4 Pip designer > Auto cutout > double click pip template\n        # with uuid(\"69c41107-275a-4644-94f3-fd43bcc33fbf\") as case:\n            # select timeline  track2\n        if not main_page.timeline_select_track(2):\n            assert False, \"Select track failed!\"\n\n        # enter pip designer\n        main_page.enter_room(4)\n\n        # Select template (search library: Winter Sticker 01)\n        sticker_name = 'Winter 01'\n        media_room_page.search_library(sticker_name)\n        time.sleep(DELAY_TIME * 4)\n        if not main_page.select_library_icon_view_media(sticker_name):\n            assert False, f\"Select media {sticker_name} failed!\"\n\n        with step(\"[Action] Add Sticker to timeline by R-click menu\"):\n            # Download IAD template\n            time.sleep(DELAY_TIME * 4)\n            main_page.right_click()\n            main_page.select_right_click_menu('Add to Timeline')\n            # time.sleep(DELAY_TIME * 2)\n\n        # Select timeline sticker\n        with step(\"[Action] Select sticker on timeline\"):\n            timeline_operation_page.select_timeline_media(track_index=2, clip_index=0)\n            # time.sleep(DELAY_TIME * 2)\n\n        # double click video to enter pip designer\n        with step(\"[Action] Double click sticker to enter pip designer\"):\n            main_page.double_click()\n            # time.sleep(DELAY_TIME * 3)\n\n        # unfold chroma key\n        if not pip_designer_page.express_mode.unfold_properties_chroma_key_tab(1):\n            assert False, \"[Action] Unfold chroma key failed!\"\n        # time.sleep(DELAY_TIME * 2)\n\n        # Verify step: Do Not find the cutout setting now\n        with step(\"[Verify] Check if chroma tab is unfloded (Not show cutout button)\"):\n            if main_page.is_exist(L.pip_designer.chromakey.cutout_button):\n                assert False, \"[Verify] chroma key tab is not unfolded!, cutout button is shown!\"\n\n        # Fold chroma key\n        pip_designer_page.express_mode.unfold_properties_chroma_key_tab(0)\n        # time.sleep(DELAY_TIME * 2)\n\n        # click [OK] to close pip designer\n        pip_designer_page.click_ok()\n        # time.sleep(DELAY_TIME * 2)"
    },
    {
        "name": "test_media_room_func_2_12",
        "tags": [
            "media_room_func",
            "stock_media",
            "launch",
            "open_project",
            "content_pack"
        ],
        "marked_name": "test_media_room_func_2_12",
        "description": [
            "1. Close APP, clear cache, and start APP",
            "2. Set project aspect ratio to 16:9",
            "3. Open package project ('Packed_Project/can_del.pdk') to location ('Extracted_Folder/test_media_room_func_2_12')",
            "4. Screenshot preview (locator=main_page.area.preview.main)",
            "5. Open [Shutterstock] dialog in media room and switch to [Video] tab",
            "6. Search keyword 'bubble pink circle' and wait for DELAY_TIME*5",
            "7. Select stock media by thumbnail index (3)",
            "8. Handle high definition dialog",
            "9. Press [Esc] to close iStock window",
            "10. Check preview is different after download complete"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.stock_media\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_media_room_func_2_12] Verify preview update after Shutterstock stock media download\")\n    def test_media_room_func_2_12(self):\n    '''\n        1. Close APP, clear cache, and start APP\n        2. Set project aspect ratio to 16:9\n        3. Open package project ('Packed_Project/can_del.pdk') to location ('Extracted_Folder/test_media_room_func_2_12')\n        4. Screenshot preview (locator=main_page.area.preview.main)\n        5. Open [Shutterstock] dialog in media room and switch to [Video] tab\n        6. Search keyword 'bubble pink circle' and wait for DELAY_TIME*5\n        7. Select stock media by thumbnail index (3)\n        8. Handle high definition dialog\n        9. Press [Esc] to close iStock window\n        10. Check preview is different after download complete\n        '''\nwith step(\"[Action] Close APP, clear cache, and start APP\"):\n            main_page.close_app()\n            main_page.clear_cache()\n            main_page.start_app()\n\n        with step(\"[Action] Set project aspect ratio to 16:9\"):\n            main_page.set_project_aspect_ratio_9_16()\n\n        with step(\"[Action] Open package project to specified location\"):\n            self.open_packed_project('Packed_Project/can_del.pdk', 'Extracted_Folder/test_media_room_func_2_12')\n            # # Close PDR then re-launch\n            # main_page.close_and_restart_app()\n            # time.sleep(DELAY_TIME * 4)\n\n        with step(\"[Action] Capture initial preview screenshot\"):\n            preview_before = main_page.snapshot(locator=main_page.area.preview.main)\n\n        # [L27] 2.1 Media Room > Import  > Download fom Stock Content\n        # with uuid(\"012b2e9c-9f94-4c7d-a5b2-b771fd5a5912\") as case:\n\n        with step(\"[Action] Open Shutterstock dialog and switch to [Video] tab\"):\n            media_room_page.import_media_from_shutterstock()\n            download_from_ss_page.switch_to_video()\n\n        with step(\"[Action] Search keyword 'bubble pink circle' and wait\"):\n            download_from_ss_page.search.search_text('bubble pink circle')\n            time.sleep(DELAY_TIME * 5)\n\n        with step(\"[Action] Select stock media by thumbnail index (3)\"):\n            download_from_ss_page.video.select_thumbnail_for_video_intro_designer(3)\n\n        with step(\"[Action] Handle high definition dialog\"):\n            for _ in range(70):\n                media_room_page.handle_high_definition_dialog()\n                if main_page.exist(L.download_from_shutterstock.download.btn_complete_ok):\n                    # Click [OK] when pop up download complete\n                    download_from_ss_page.download.click_complete_ok()\n                    time.sleep(DELAY_TIME * 5) # wait for download complete\n                    break\n                else:\n                    time.sleep(DELAY_TIME)\n\n        with step(\"[Action] Press [Esc] to close iStock window\"):\n            main_page.press_esc_key()\n\n        with step(\"[Verify] Check that preview is different after download complete\"):\n            preview_after = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(preview_before, preview_after, similarity=0.95):\n                # Similarity should be less than 0.55 for a changed preview\n                assert False, \"Preview did not change after download! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_13",
        "tags": [
            "media_room_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "test_media_room_func_2_13",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot preview (locator=main_page.area.preview.main)",
            "2. Open [Shutterstock] dialog in media room and switch to [Video] tab",
            "3. Switch to [Getty Images] tab in [Download from Shutterstock] window",
            "4. Search keyword 'pink hand color 23 flower' and wait for DELAY_TIME*5",
            "5. Select stock media by thumbnail index (1)",
            "6. Handle high definition dialog",
            "7. Press [Esc] to close iStock window",
            "8. Check preview is different after download complete"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_media_room_func_2_13] Verify preview update after Getty Images stock media download\")\n    def test_media_room_func_2_13(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot preview (locator=main_page.area.preview.main)\n        2. Open [Shutterstock] dialog in media room and switch to [Video] tab\n        3. Switch to [Getty Images] tab in [Download from Shutterstock] window\n        4. Search keyword 'pink hand color 23 flower' and wait for DELAY_TIME*5\n        5. Select stock media by thumbnail index (1)\n        6. Handle high definition dialog\n        7. Press [Esc] to close iStock window\n        8. Check preview is different after download complete\n        '''\ndependency_test = \"test_media_room_func_2_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Capture initial preview screenshot\"):\n            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step(\"[Action] Open Shutterstock dialog in media room and switch to [Video] tab\"):\n            media_room_page.import_media_from_shutterstock()\n            download_from_ss_page.switch_to_video()\n\n        with step(\"[Action] Switch to Getty Images tab in Download from Shutterstock window\"):\n            getty_image_page.switch_to_GI()\n\n        with step(\"[Action] Search keyword 'pink hand color 23 flower' and wait\"):\n            download_from_ss_page.search.search_text('pink hand color 23 flower')\n            time.sleep(DELAY_TIME * 5)\n\n        with step(\"[Action] Select stock media by thumbnail index (1)\"):\n            download_from_ss_page.video.select_thumbnail_for_video_intro_designer(1)\n\n        with step(\"[Action] Handle high definition dialog\"):\n            for _ in range(70):\n                media_room_page.handle_high_definition_dialog()\n                if main_page.exist(L.download_from_shutterstock.download.btn_complete_ok):\n                    # Click [OK] when pop up download complete\n                    download_from_ss_page.download.click_complete_ok()\n                    time.sleep(DELAY_TIME * 5) # wait for download complete\n                    break\n                else:\n                    time.sleep(DELAY_TIME)\n\n        with step(\"[Action] Press [Esc] to close iStock window\"):\n            main_page.press_esc_key()\n\n        with step(\"[Verify] Check that preview is different after download complete\"):\n            preview_after = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(initial_preview, preview_after, similarity=0.95):\n                # Similarity should be less than 0.55 for a changed preview\n                assert False, \"Preview did not change after download! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_14",
        "tags": [
            "media_room_func",
            "media_room",
            "import_media"
        ],
        "marked_name": "test_media_room_func_2_14",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Switch to (Media Content) category in Media Room and capture screenshot (locator=main_page.area.preview.main)",
            "2. Import [Media File] from local (Test_Material_Folder + 'Produce_Local/Y man.mp4') and handle high definition dialog",
            "3. Check preview is different after import"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.import_media\n    @pytest.mark.name(\"[test_media_room_func_2_14] Verify preview is different after importing local media file\")\n    def test_media_room_func_2_14(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Switch to (Media Content) category in Media Room and capture screenshot (locator=main_page.area.preview.main)\n        2. Import [Media File] from local (Test_Material_Folder + 'Produce_Local/Y man.mp4') and handle high definition dialog\n        3. Check preview is different after import\n        '''\ndependency_test = \"test_media_room_func_2_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L25] 2.1 Media Room > Media Content > Import > Local (File can import correctly by import button)\n        # with uuid(\"885259d0-006d-4260-b4ff-90b3f3d7cf7f\") as case:\n\n        with step(\"[Action] Switch to Media Content category and capture initial preview screenshot\"):\n            media_room_page.enter_media_content()\n            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step(\"[Action] Import media file and handle high definition dialog\"):\n            media_room_page.import_media_file(Test_Material_Folder + \"Produce_Local/Y man.mp4\")\n            media_room_page.handle_high_definition_dialog(option='no')\n\n        with step(\"[Verify] Check that preview is different after import\"):\n            preview_after = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(initial_preview, preview_after, similarity=0.95):\n                # Similarity should be less than 0.55 for a changed preview\n                assert False, \"Preview did not change after import! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_15",
        "tags": [
            "media_room_func",
            "media_room",
            "library_preview"
        ],
        "marked_name": "test_media_room_func_2_15",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Show Library Preview Window] from top menu bar and check result"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.library_preview\n    @pytest.mark.name(\"[test_media_room_func_2_15] Click [Show Library Preview Window] and check result\")\n    def test_media_room_func_2_15(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Show Library Preview Window] from top menu bar and check result\n        '''\ndependency_test = \"test_media_room_func_2_14\"\n        self.ensure_dependency(dependency_test)\n\n        # [L18] 2.1 Media Room > Enable Library preview window\n        # with uuid(\"9bb42cbf-e645-4b01-a9e2-48b2ba9d48d4\") as case:\n\n        with step(\"[Action] Click [Show Library Preview Window] from top menu bar\"):\n            enable_two_preivew = main_page.top_menu_bar_view_show_library_preview_window(is_enable=1)\n            assert enable_two_preivew, \"Click [Show Library Preview Window] failed!\""
    },
    {
        "name": "test_media_room_func_2_16",
        "tags": [
            "media_room_func",
            "media_room",
            "play_video"
        ],
        "marked_name": "test_media_room_func_2_16",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot (locator=L.library_preview.upper_view_region)",
            "2. Click [Preview Operation] for (Play)(0) in library preview window and wait for DELAY_TIME",
            "3. Click [Preview Operation] for (Pause)(0) in library preview window and wait for DELAY_TIME",
            "4. Check if preview is updated (similarity=0.98)",
            "5. Click [Preview Operation] for (Stop)(1) in library preview window and wait for DELAY_TIME",
            "6. Check if preview is the same as initial preview (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.play_video\n    @pytest.mark.name(\"[test_media_room_func_2_16] Verify library preview update after Play/ Pause/ Stop video\")\n    def test_media_room_func_2_16(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot (locator=L.library_preview.upper_view_region)\n        2. Click [Preview Operation] for (Play)(0) in library preview window and wait for DELAY_TIME\n        3. Click [Preview Operation] for (Pause)(0) in library preview window and wait for DELAY_TIME\n        4. Check if preview is updated (similarity=0.98)\n        5. Click [Preview Operation] for (Stop)(1) in library preview window and wait for DELAY_TIME\n        6. Check if preview is the same as initial preview (similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_15\"\n        self.ensure_dependency(dependency_test)\n\n        # [L19] 2.1 Media Room > Library preview window > Playback Controls\n        # with uuid(\"8e8d3530-c835-4d09-82d5-7ff0ab10bcf0\") as case:\n\n        with step(\"[Action] Capture initial library preview screenshot\"):\n            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Click [Preview Operation] for Play in library preview window\"):\n            library_preview_page.library_preview_window_preview_operation(0)\n\n        with step(\"[Action] Click [Preview Operation] for Pause in library preview window\"):\n            library_preview_page.library_preview_window_preview_operation(0)\n\n        with step(\"[Verify] Check if preview is updated (should be different from initial, similarity < 0.98)\"):\n            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(initial_preview, updated_preview, similarity=0.98):\n                # Similarity should be less than 0.98 to confirm preview update\n                assert False, \"Preview did not update after Play/Pause operation! Similarity should be < 0.98\"\n\n        with step(\"[Action] Click [Preview Operation] for Stop in library preview window\"):\n            library_preview_page.library_preview_window_preview_operation(1)\n\n        with step(\"[Verify] Check if preview is same as initial after Stop (similarity > 0.95)\"):\n            final_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if not main_page.compare(initial_preview, final_preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Final preview does not match the initial preview! Similarity should be > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_17",
        "tags": [
            "media_room_func",
            "media_room",
            "library_preview"
        ],
        "marked_name": "test_media_room_func_2_17",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot (locator=L.library_preview.upper_view_region)",
            "2. Undock [Preview Window]",
            "3. Check if preview is updated (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.library_preview\n    @pytest.mark.name(\"[test_media_room_func_2_17] Verify preview update after undocking preview window\")\n    def test_media_room_func_2_17(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot (locator=L.library_preview.upper_view_region)\n        2. Undock [Preview Window]\n        3. Check if preview is updated (similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_16\"\n        self.ensure_dependency(dependency_test)\n\n        # [L22] 2.1 Media Room > Library preview window > Undock\n        # with uuid(\"d8f210ce-d0dc-4de2-b2bf-3a16f104ca13\") as case:\n\n        with step(\"[Action] Capture initial library preview screenshot\"):\n            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Undock the preview window\"):\n            library_preview_page.library_preview_click_undock()\n\n        with step(\"[Verify] Check if preview is updated after undocking\"):\n            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(initial_preview, updated_preview, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after undocking! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_18",
        "tags": [
            "media_room_func",
            "media_room",
            "timecode",
            "library_preview",
            "clip_marker"
        ],
        "marked_name": "[test_media_room_func_2_18] Add Clip Marker and Modify Text",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set Timecode ('00_00_07_11') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)",
            "2. Click [Add Clip Marker]",
            "3. Check the preview is updated after adding marker (similarity=0.95)",
            "4. Input [Text]('Test BFT and add marker') on [Modify Clip Marker]",
            "5. Check the preview is updated after adding text (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.timecode\n    @pytest.mark.library_preview\n    @pytest.mark.clip_marker\n    @pytest.mark.name('[test_media_room_func_2_18] Add Clip Marker and Modify Text')\n    def test_media_room_func_2_18(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set Timecode ('00_00_07_11') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)\n        2. Click [Add Clip Marker]\n        3. Check the preview is updated after adding marker (similarity=0.95)\n        4. Input [Text]('Test BFT and add marker') on [Modify Clip Marker]\n        5. Check the preview is updated after adding text (similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_17\"\n        self.ensure_dependency(dependency_test)\n\n        # [L21] 2.1 Media Room > Library preview window > Able to add marker\n        # with uuid(\"97c72edd-d447-4142-8e00-80f5a86bb389\") as case:\n\n        with step(\"[Action] Set Timecode ('00_00_07_11') on Library Preview and screenshot\"):\n            library_preview_page.set_library_preview_timecode('00_00_07_11')\n            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Click [Add Clip Marker]\"):\n            library_preview_page.edit_library_preview_window_add_clip_marker()\n\n        with step(\"[Verify] Check the preview is updated after adding marker\"):\n            preview_after_marker = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(initial_preview, preview_after_marker, similarity=0.95):\n                assert False, \"Preview did not update after adding marker! Similarity should < 0.95\"\n\n        with step(\"[Action] Input [Text]('Test BFT and add marker') on [Modify Clip Marker]\"):\n            library_preview_page.edit_library_preview_window_clip_marker_input_text('Test BFT and add marker')\n\n        with step(\"[Verify] Check the preview is updated after adding text\"):\n            preview_after_text = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(preview_after_marker, preview_after_text, similarity=0.95):\n                assert False, \"Preview did not update after adding text! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_19",
        "tags": [
            "media_room_func",
            "media_room",
            "mark_in_out",
            "library_preview",
            "trim",
            "timecode"
        ],
        "marked_name": "[test_media_room_func_2_19] Mark In/Out, Insert, and Trim Video",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set Timecode ('00_00_03_00') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)",
            "2. Click [Mark In] and check the preview is updated after adding marker (similarity=0.95)",
            "3. Set Timecode ('00_00_10_07') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)",
            "4. Click [Mark Out] and check the preview is updated after adding marker (similarity=0.95)",
            "5. Click [Insert] on selected track",
            "6. Click [Trim] button in [Tips Area] (type='video')",
            "7. Switch [Trim Mode] to ('Single') in [Precut Window]",
            "8. Get Single Trim Duration and check if it is ('00:00:07:07')",
            "9. Click [OK] Button to leave Precut Window"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.mark_in_out\n    @pytest.mark.library_preview\n    @pytest.mark.trim\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_media_room_func_2_19] Mark In/Out, Insert, and Trim Video')\n    def test_media_room_func_2_19(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set Timecode ('00_00_03_00') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)\n        2. Click [Mark In] and check the preview is updated after adding marker (similarity=0.95)\n        3. Set Timecode ('00_00_10_07') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)\n        4. Click [Mark Out] and check the preview is updated after adding marker (similarity=0.95)\n        5. Click [Insert] on selected track\n        6. Click [Trim] button in [Tips Area] (type='video')\n        7. Switch [Trim Mode] to ('Single') in [Precut Window]\n        8. Get Single Trim Duration and check if it is ('00:00:07:07')\n        9. Click [OK] Button to leave Precut Window\n        '''\ndependency_test = \"test_media_room_func_2_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L20] 2.1 Media Room > Library preview window > Able to Mark in / out then insert timeline\n        # with uuid(\"f8b3ffb5-4799-4a41-a42a-a5b8f9fe8800\") as case:\n\n        with step(\"[Action] Set Timecode ('00_00_03_00') on Library Preview and screenshot\"):\n            library_preview_page.set_library_preview_timecode('00_00_03_00')\n            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Click [Mark In] and check the preview update\"):\n            library_preview_page.edit_library_preview_window_click_mark_in()\n            preview_after_mark_in = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(initial_preview, preview_after_mark_in, similarity=0.95):\n                assert False, \"Preview did not update after adding Mark In! Similarity should < 0.95\"\n\n        with step(\"[Action] Set Timecode ('00_00_10_07') on Library Preview and screenshot\"):\n            main_page.set_library_preview_timecode('00_00_10_07')\n            preview_before_mark_out = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Click [Mark Out] and check the preview update\"):\n            library_preview_page.edit_library_preview_window_click_mark_out()\n            preview_after_mark_out = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if main_page.compare(preview_before_mark_out, preview_after_mark_out, similarity=0.95):\n                assert False, \"Preview did not update after adding Mark Out! Similarity should < 0.95\"\n\n        with step(\"[Action] Click [Insert] on selected track\"):\n            library_preview_page.edit_library_preview_window_click_insert_on_selected_track()\n\n        with step(\"[Action] Click [Trim] button in [Tips Area] (type='video')\"):\n            tips_area_page.click_TipsArea_btn_Trim(type='video')\n\n        with step(\"[Action] Switch [Trim Mode] to ('Single') in [Precut Window]\"):\n            precut_page.edit_precut_switch_trim_mode('Single')\n\n        with step(\"[Verify] Get Single Trim Duration and check if it is ('00:00:07:07')\"):\n            trim_duration = precut_page.get_precut_single_trim_duration()\n            if trim_duration != '00:00:07:07':\n                assert False, f\"Trim duration is incorrect! Expected: '00:00:07:07', Got: {trim_duration}\"\n\n        with step(\"[Action] Click [OK] Button to leave Precut Window\"):\n            precut_page.click_ok()\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_20",
        "tags": [
            "media_room_func",
            "library_preview"
        ],
        "marked_name": "[test_media_room_func_2_20] Click Minimize button on Preview Window and check result",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Minimize] button on [Preview Window] and check result"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.name('[test_media_room_func_2_20] Click Minimize button on Preview Window and check result')\n    def test_media_room_func_2_20(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Minimize] button on [Preview Window] and check result\n        '''\ndependency_test = \"test_media_room_func_2_19\"\n        self.ensure_dependency(dependency_test)\n\n        # [L23] 2.1 Media Room > Library preview window > Minimize window\n        # with uuid(\"4cc511f4-4fb7-4de7-8ef0-7982c3305ef9\") as case:\n\n        with step(\"[Action] Click [Minimize] button on [Preview Window]\"):\n            assert library_preview_page.library_preview_click_minimize(), \"Preview window was not minimized correctly!\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_21",
        "tags": [
            "media_room_func",
            "library_preview"
        ],
        "marked_name": "[test_media_room_func_2_21] Show, Dock, and Close Library Preview Window",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Show Library Preview] button when [Minimized window]",
            "2. Click [Dock] button on [Preview Window]",
            "3. Click [Close] button on [Preview Window]"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.name('[test_media_room_func_2_21] Show, Dock, and Close Library Preview Window')\n    def test_media_room_func_2_21(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Show Library Preview] button when [Minimized window]\n        2. Click [Dock] button on [Preview Window]\n        3. Click [Close] button on [Preview Window]\n        '''\ndependency_test = \"test_media_room_func_2_20\"\n        self.ensure_dependency(dependency_test)\n\n        # [L24] 2.1 Media Room > Library preview window > Disable library preview window\n        # with uuid(\"5a30f3ff-290d-4179-9e15-06a92a2e3a4d\") as case:\n\n        with step(\"[Action] Click [Show Library Preview] button when [Minimized window]\"):\n            library_preview_page.library_preview_show_library_preview()\n\n        with step(\"[Action] Click [Dock] button on [Preview Window]\"):\n            library_preview_page.library_preview_click_dock()\n\n        with step(\"[Action] Click [Close] button on [Preview Window]\"):\n            assert library_preview_page.library_preview_click_close_preview(), \"Preview window was not closed correctly!\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_22",
        "tags": [
            "media_room_func",
            "media_room",
            "library_preview",
            "search_library"
        ],
        "marked_name": "[test_media_room_func_2_22] Search Component, Select Media, and Verify Preview Update",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Search component ('02') in library and screenshot (locator=L.base.Area.preview.main)",
            "2. Select media ('Travel 02.jpg') by library icon view and check search result",
            "3. Check preview is updated after search ('02') (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.library_preview\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_media_room_func_2_22] Search Component, Select Media, and Verify Preview Update')\n    def test_media_room_func_2_22(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Search component ('02') in library and screenshot (locator=L.base.Area.preview.main)\n        2. Select media ('Travel 02.jpg') by library icon view and check search result\n        3. Check preview is updated after search ('02') (similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_21\"\n        self.ensure_dependency(dependency_test)\n\n        # [L31] 2.1 Media Room > Search > Keyword\n        # with uuid(\"5c4130d7-69f4-4fbd-8463-114132f01b92\") as case:\n\n        with step(\"[Action] Search component ('02') in library and screenshot\"):\n            media_room_page.search_library('02')\n            search_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n\n        with step(\"[Action] Select media ('Travel 02.jpg') by library icon view and check search result\"):\n            if not main_page.select_library_icon_view_media('Travel 02.jpg'):\n                assert False, \"Select media 'Travel 02.jpg' failed!\"\n\n        with step(\"[Verify] Check preview is updated after search ('02')\"):\n            updated_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n            if main_page.compare(search_preview, updated_preview, similarity=0.95):\n                assert False, \"Preview did not update correctly after search! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_23",
        "tags": [
            "media_room_func",
            "library_preview",
            "search_library"
        ],
        "marked_name": "[test_media_room_func_2_23] Screenshot, Cancel Search, and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot (locator=L.base.Area.preview.main)",
            "2. Click [Cancel] button in search library",
            "3. Check preview is the same as initial preview (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_media_room_func_2_23] Screenshot, Cancel Search, and Verify Preview')\n    def test_media_room_func_2_23(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot (locator=L.base.Area.preview.main)\n        2. Click [Cancel] button in search library\n        3. Check preview is the same as initial preview (similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_22\"\n        self.ensure_dependency(dependency_test)\n\n        # [L32] 2.1 Media Room > Search > Cancel search\n        # with uuid(\"87f7672e-ca55-4a88-a1fb-3eec037b21d7\") as case:\n\n        with step(\"[Action] Screenshot (locator=L.base.Area.preview.main)\"):\n            initial_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Verify] Check preview is the same as initial preview\"):\n            updated_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n            if not main_page.compare(initial_preview, updated_preview, similarity=0.95):\n                assert False, \"Preview changed unexpectedly after canceling search! Similarity should be > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_24",
        "tags": [
            "media_room_func",
            "library_preview",
            "explore_view"
        ],
        "marked_name": "[test_media_room_func_2_24] Hide Explore View and Verify Media Content is hidden",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Display/Hide Explore View] button to hide Explore View",
            "2. Check if [Media Content] category (L.media_room.tag_media_content) is hidden"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.explore_view\n    @pytest.mark.name('[test_media_room_func_2_24] Hide Explore View and Verify Media Content is hidden')\n    def test_media_room_func_2_24(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Display/Hide Explore View] button to hide Explore View\n        2. Check if [Media Content] category (L.media_room.tag_media_content) is hidden\n        '''\ndependency_test = \"test_media_room_func_2_23\"\n        self.ensure_dependency(dependency_test)\n\n        # [L33] 2.1 Media Room > Explorer view\n        # with uuid(\"44845949-83ed-4c11-97cb-b9d9bcf61d78\") as case:\n\n        with step(\"[Action] Click [Display/Hide Explore View] button to hide Explore View\"):\n            media_room_page.click_display_hide_explore_view()\n\n        with step(\"[Verify] Check if [Media Content] category is hidden\"):\n            is_hidden = not main_page.exist(L.media_room.tag_media_content, timeout=5)\n            assert is_hidden, \"[Media Content] category is still visible after hiding Explore View!\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_25",
        "tags": [
            "media_room_func",
            "library_preview",
            "custom_tag"
        ],
        "marked_name": "[test_media_room_func_2_25] Add New Custom Tag",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Add new tag with name ('auto_Testing')"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.custom_tag\n    @pytest.mark.name('[test_media_room_func_2_25] Add New Custom Tag')\n    def test_media_room_func_2_25(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Add new tag with name ('auto_Testing')\n        '''\ndependency_test = \"test_media_room_func_2_24\"\n        self.ensure_dependency(dependency_test)\n\n        # [L34] 2.1 Media Room > Add new tag\n        # with uuid(\"db26dc5e-dbbc-4439-b29c-87b426dd4c16\") as case:\n\n        with step(\"[Action] Add new tag with name ('auto_Testing')\"):\n            tag_added = media_room_page.add_new_tag('auto_Testing')\n            assert tag_added, \"Failed to add custom tag: auto_Testing\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_26",
        "tags": [
            "media_room_func",
            "library_preview",
            "custom_tag"
        ],
        "marked_name": "[test_media_room_func_2_26] Rename Custom Tag",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Rename tag by right click from ('auto_Testing') to ('QADF_testing')"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.custom_tag\n    @pytest.mark.name('[test_media_room_func_2_26] Rename Custom Tag')\n    def test_media_room_func_2_26(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Rename tag by right click from ('auto_Testing') to ('QADF_testing')\n        '''\ndependency_test = \"test_media_room_func_2_25\"\n        self.ensure_dependency(dependency_test)\n\n        # [L35] 2.1 Media Room > Modify tag name\n        # with uuid(\"01dff930-9d5a-4c98-ad0a-4e2b306b1572\") as case:\n\n        with step(\"[Action] Rename tag by right click from ('auto_Testing') to ('QADF_testing')\"):\n            rename_success = media_room_page.right_click_rename_tag('auto_Testing', 'QADF_testing')\n            assert rename_success, \"Failed to rename custom tag from 'auto_Testing' to 'QADF_testing'\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_27",
        "tags": [
            "media_room_func",
            "library_preview",
            "custom_tag"
        ],
        "marked_name": "[test_media_room_func_2_27] Add Media to Tag and Delete Tag",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Media Content] Category",
            "2. Select media ('Landscape 02.jpg') by library icon view",
            "3. Add media to specific tag ('QADF_testing') by right click and check the result",
            "4. Delete tag ('QADF_testing', count=1) by right click"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.library_preview\n    @pytest.mark.custom_tag\n    @pytest.mark.name('[test_media_room_func_2_27] Add Media to Tag and Delete Tag')\n    def test_media_room_func_2_27(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Media Content] Category\n        2. Select media ('Landscape 02.jpg') by library icon view\n        3. Add media to specific tag ('QADF_testing') by right click and check the result\n        4. Delete tag ('QADF_testing', count=1) by right click\n        '''\ndependency_test = \"test_media_room_func_2_26\"\n        self.ensure_dependency(dependency_test)\n\n        # [L36] 2.1 Media Room > Tag clip to custom tag\n        # with uuid(\"11d4f4e0-284c-4255-b620-baab55eb233b\") as case:\n\n        with step(\"[Action] Enter [Media Content] Category\"):\n            media_room_page.enter_media_content()\n\n        with step(\"[Action] Select media ('Landscape 02.jpg') by library icon view\"):\n            main_page.select_library_icon_view_media('Landscape 02.jpg')\n\n        with step(\"[Action] Add media to specific tag ('QADF_testing') by right click\"):\n            tag_added = media_room_page.library_clip_context_menu_add_to('QADF_testing')\n            if not tag_added:\n                assert False, \"Failed to add media to tag 'QADF_testing'\"\n\n        with step(\"[Action] Delete tag ('QADF_testing', count=1) by right click\"):\n            media_room_page.right_click_delete_tag('QADF_testing', count=1)\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_28",
        "tags": [
            "media_room_func",
            "color_board",
            "timeline"
        ],
        "marked_name": "[test_media_room_func_2_28] Modify Color Board and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select timeline track (1) and set timecode ('00_00_10_07') at main page",
            "2. Enter [Color Boards] in Media Room",
            "3. Modify [Color Board] Color to ('F2E0B7') in Media Room",
            "4. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L37.png')(Similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.color_board\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_media_room_func_2_28] Modify Color Board and Verify Preview')\n    def test_media_room_func_2_28(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select timeline track (1) and set timecode ('00_00_10_07') at main page\n        2. Enter [Color Boards] in Media Room\n        3. Modify [Color Board] Color to ('F2E0B7') in Media Room\n        4. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L37.png')(Similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_27\"\n        self.ensure_dependency(dependency_test)\n\n        # [L37] 2.1 Media Room > Color Board > Uniform color\n        # with uuid(\"c1e06126-1100-45f2-85b5-a2c9ffe9e89b\") as case:\n\n        with step(\"[Action] Select timeline track (1) and set timecode ('00_00_10_07') at main page\"):\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode('00_00_10_07')\n\n        with step(\"[Action] Enter [Color Boards] in Media Room\"):\n            media_room_page.enter_color_boards()\n\n        with step(\"[Action] Modify [Color Board] Color to ('F2E0B7') in Media Room\"):\n            media_room_page.library_menu_new_color_board(hex_color='F2E0B7')\n\n        with step(\"[Verify] Check preview as GT (L37.png)\"):\n            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L37.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L37.png', preview, similarity=0.95)\n            assert check_preview, \"Preview does not match GT (L37.png)! Similarity should > 0.95\""
    },
    {
        "name": "test_media_room_func_2_29",
        "tags": [
            "media_room_func",
            "color_board"
        ],
        "marked_name": "[test_media_room_func_2_29] Insert Media, Change Color, and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Insert media to selected track and screenshot (locator=main_page.area.preview.main)",
            "2. Click [Change Color] button in [Tips Area] and change color to ('882ECC')",
            "3. Check Preview is updated after changed color (Similarity=0.98)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.color_board\n    @pytest.mark.name('[test_media_room_func_2_29] Insert Media, Change Color, and Verify Preview')\n    def test_media_room_func_2_29(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Insert media to selected track and screenshot (locator=main_page.area.preview.main)\n        2. Click [Change Color] button in [Tips Area] and change color to ('882ECC')\n        3. Check Preview is updated after changed color (Similarity=0.98)\n        '''\ndependency_test = \"test_media_room_func_2_28\"\n        self.ensure_dependency(dependency_test)\n\n        # [L39] 2.1 Media Room > Color Board > Insert to timeline and change color\n        # with uuid(\"5e96c098-f404-4992-bae7-3b946d2927b5\") as case:\n\n        with step(\"[Action] Insert media to selected track and take a screenshot\"):\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step(\"[Action] Click [Change Color] button in [Tips Area] and change color to ('882ECC')\"):\n            tips_area_page.click_TipsArea_btn_ChangeColor('882ECC')\n\n        with step(\"[Verify] Check Preview is updated after changed color (Similarity=0.98)\"):\n            updated_preview = main_page.snapshot(locator=main_page.area.preview.main)\n            check_preview = main_page.compare(initial_preview, updated_preview, similarity=0.98)\n            assert not check_preview, \"Preview did not update after changing color! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_30",
        "tags": [
            "media_room_func",
            "gradient_color",
            "save_template"
        ],
        "marked_name": "[test_media_room_func_2_30] Set Gradient Color, Save Template, and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Gradient Color] to (hex_color='7028E1')",
            "2. Set template name ('custom_purple') when saving template",
            "3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.gradient_color\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_media_room_func_2_30] Set Gradient Color, Save Template, and Verify Preview')\n    def test_media_room_func_2_30(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Gradient Color] to (hex_color='7028E1')\n        2. Set template name ('custom_purple') when saving template\n        3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)\n        '''\ndependency_test = \"test_media_room_func_2_29\"\n        self.ensure_dependency(dependency_test)\n\n        # [L38] 2.1 Media Room > Color Board > Gradient color\n        # with uuid(\"894866e2-b166-4edd-baff-ea6e9b856207\") as case:\n\n        with step(\"[Action] Set [Gradient Color] to ('7028E1')\"):\n            media_room_page.library_menu_new_gradient_color('7028E1')\n\n        with step(\"[Action] Set template name ('custom_purple') when saving template\"):\n            title_designer_page.click_custom_name_ok('custom_purple')\n\n        with step(\"[Verify] Check Preview is updated as GT (L38.png) (Similarity=0.95)\"):\n            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L38.png', preview_snapshot, similarity=0.95)\n            if not check_preview:\n                assert False, \"Preview does not match GT (L38.png)! Similarity should > 0.95\"\n        assert True"
    },
    {
        "name": "test_media_room_func_2_31",
        "tags": [
            "media_room_func",
            "color_board",
            "gradient_color"
        ],
        "marked_name": "[test_media_room_func_2_31] Insert Color Board, Change Gradient, and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select 2nd color board by clicking (L.media_room.library_listview.unit_collection_view_item_second)",
            "2. Right click and Select right click menu ('Insert on Selected Track')",
            "3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)",
            "4. Click [Change Color] by clicking (L.tips_area.button.btn_change_color)",
            "5. Handle Color Gradient to ('2DB727')",
            "6. Check preview (locator=main_page.area.preview.main) is updated (Similarity=0.9999)"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.color_board\n    @pytest.mark.gradient_color\n    @pytest.mark.name('[test_media_room_func_2_31] Insert Color Board, Change Gradient, and Verify Preview')\n    def test_media_room_func_2_31(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select 2nd color board by clicking (L.media_room.library_listview.unit_collection_view_item_second)\n        2. Right click and Select right click menu ('Insert on Selected Track')\n        3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)\n        4. Click [Change Color] by clicking (L.tips_area.button.btn_change_color)\n        5. Handle Color Gradient to ('2DB727')\n        6. Check preview (locator=main_page.area.preview.main) is updated (Similarity=0.9999)\n        '''\ndependency_test = \"test_media_room_func_2_30\"\n        self.ensure_dependency(dependency_test)\n\n        # [L40] 2.1 Media Room > Color Board > Insert to timeline and change color\n        # with uuid(\"db6ad390-d4fd-4758-ab3a-f0ba4fbf89bc\") as case:\n\n        with step(\"[Action] Select 2nd color board and insert on selected track\"):\n            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)\n            main_page.right_click()\n            main_page.select_right_click_menu('Insert on Selected Track')\n\n        with step(\"[Verify] Check Preview is updated as GT (L38.png) (Similarity=0.95)\"):\n            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L38.png', preview_snapshot, similarity=0.95)\n            if not check_preview:\n                assert False, \"Preview does not match GT (L38.png)! Similarity should > 0.95\"\n\n        with step(\"[Action] Click [Change Color] button\"):\n            main_page.click(L.tips_area.button.btn_change_color)\n\n        with step(\"[Action] Handle Color Gradient to ('2DB727')\"):\n            media_room_page.handle_color_gradient('2DB727')\n\n        with step(\"[Verify] Check Preview is updated after changing color gradient (Similarity=0.9999)\"):\n            final_preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)\n            final_check_preview = main_page.compare(preview_snapshot, final_preview_snapshot, similarity=0.9999)\n            if final_check_preview:\n                assert False, \"Preview did not update correctly after changing color gradient! Similarity should < 0.9999\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_32",
        "tags": [
            "media_room_func",
            "play_video",
            "content_pack"
        ],
        "marked_name": "[test_media_room_func_2_32] Play Downloaded Media and Verify Preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Download] Category in Media Room",
            "2. Select media ('487360077_fhd') by library icon view and Press [Space] key",
            "3. Check if the preview window (main_page.area.preview.main, sec=5) is different when playing"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.play_video\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_media_room_func_2_32] Play Downloaded Media and Verify Preview')\n    def test_media_room_func_2_32(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Download] Category in Media Room\n        2. Select media ('487360077_fhd') by library icon view and Press [Space] key\n        3. Check if the preview window (main_page.area.preview.main, sec=5) is different when playing\n        '''\ndependency_test = \"test_media_room_func_2_31\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L45] 2.1 Media Room > Downloaded > Downloaded file display correctly\n        # with uuid(\"78cdbc6d-29f5-49f6-ade7-0ace8a99fa93\") as case:\n\n        with step(\"[Action] Enter [Download] Category in Media Room\"):\n            media_room_page.enter_downloaded()\n\n        with step(\"[Action] Select media '487360077_fhd' and press [Space] key to play\"):\n            # the media is downloaded in test_media_room_func_2_13\n            main_page.select_library_icon_view_media('487360077_fhd')\n            main_page.press_space_key()\n\n        with step(\"[Verify] Check if preview window is different when playing (sec=5)\"):\n            preview_changed = main_page.Check_PreviewWindow_is_different(area=main_page.area.preview.main, sec=5)\n            if not preview_changed:\n                assert False, \"Preview did not update when playing media! It should change within 5 seconds.\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_33",
        "tags": [
            "media_room_func",
            "media_room",
            "my_project"
        ],
        "marked_name": "[test_media_room_func_2_33] Enter My Project and Select Media",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [My Project]",
            "2. Select media ('can_del') by library icon view and check result"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.my_project\n    @pytest.mark.name('[test_media_room_func_2_33] Enter My Project and Select Media')\n    def test_media_room_func_2_33(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [My Project]\n        2. Select media ('can_del') by library icon view and check result\n        '''\ndependency_test = \"test_media_room_func_2_32\"\n        self.ensure_dependency(dependency_test)\n\n        # [L46] 2.1 Media Room > My Project > Open / Save project > Show project thumb after save project\n        # with uuid(\"9bec537a-3428-418f-bedb-c1dc1d023bcd\") as case:\n        with step('[Action] Enter My Project'):\n            project_room_page.enter_project_room()\n\n        with step('[Action] Select media \"can_del\" by library icon view and check result'):\n            result = main_page.select_library_icon_view_media(\"can_del\")\n            if not result:\n                assert False, \"Failed to select media 'can_del' by library icon view\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_34",
        "tags": [
            "media_room_func",
            "media_room",
            "my_project",
            "file_location"
        ],
        "marked_name": "[test_media_room_func_2_33] Select media and open file location from context menu",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select media ('can_del') by library icon view",
            "2. Open [File Location] from [Library Clip] context menu by right click"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.my_project\n    @pytest.mark.file_location\n    @pytest.mark.name('[test_media_room_func_2_33] Select media and open file location from context menu')\n    def test_media_room_func_2_34(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select media ('can_del') by library icon view\n        2. Open [File Location] from [Library Clip] context menu by right click\n        '''\ndependency_test = \"test_media_room_func_2_33\"\n        self.ensure_dependency(dependency_test)\n\n        # [L48] 2.1 Media Room > My Project > Context menu > Open file location correctly\n        # with uuid(\"c7470b6b-7f32-4a85-a838-4c29056f3f62\") as case:\n\n        with step('[Action] Select media \"can_del\" by library icon view'):\n            result = main_page.select_library_icon_view_media(\"can_del\")\n            if not result:\n                assert False, \"Failed to select media 'can_del' by library icon view\"\n\n        with step('[Action] Open [File Location] from [Library Clip] context menu by right click'):\n            result = media_room_page.library_clip_context_menu_open_file_location()\n            if not result:\n                assert False, \"Failed to open [File Location] from [Library Clip] context menu by right click\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_35",
        "tags": [
            "media_room_func",
            "media_room",
            "my_project"
        ],
        "marked_name": "[test_media_room_func_2_35] Select media and remove clip",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select media ('can_del') by library icon view",
            "2. Right click and select_right_click_menu('Remove')"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.my_project\n    @pytest.mark.name('[test_media_room_func_2_35] Select media and remove clip')\n    def test_media_room_func_2_35(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select media ('can_del') by library icon view\n        2. Right click and select_right_click_menu('Remove')\n        '''\ndependency_test = \"test_media_room_func_2_34\"\n        self.ensure_dependency(dependency_test)\n\n        # [L50] 2.1 Media Room > My Project > Context Menu > Delete project\n        # with uuid(\"992029d0-3f9e-4b72-b97a-ee36040ad761\") as case:\n\n        with step('[Action] Select media \"can_del\" by library icon view'):\n            result = main_page.select_library_icon_view_media(\"can_del\")\n            if not result:\n                assert False, \"Failed to select media 'can_del' by library icon view\"\n\n        with step('[Action] Right click and select \"Remove\" from right click menu'):\n            main_page.right_click()\n            remove_selected = main_page.select_right_click_menu(\"Remove\")\n            if not remove_selected:\n                assert False, \"Failed to select 'Remove' from right click menu\"\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_36",
        "tags": [
            "media_room_func",
            "timeline",
            "clip_marker"
        ],
        "marked_name": "[test_media_room_func_2_36] Remove All Clip Markers and Save Project",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select Timeline media ('Y man') and screenshot (locator=L.library_preview.upper_view_region)",
            "2. Right click and select_right_click_menu('Clip Marker', 'Remove All Clip Markers')",
            "3. Check preview is updated (Similarity=0.99)",
            "4. Save the Project as (name=\"test_media_room_func_2_36\", folder_path=Test_Material_Folder + 'BFT_21_Stage1/')"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.timeline\n    @pytest.mark.clip_marker\n    @pytest.mark.name('[test_media_room_func_2_36] Remove All Clip Markers and Save Project')\n    def test_media_room_func_2_36(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select Timeline media ('Y man') and screenshot (locator=L.library_preview.upper_view_region)\n        2. Right click and select_right_click_menu('Clip Marker', 'Remove All Clip Markers')\n        3. Check preview is updated (Similarity=0.99)\n        4. Save the Project as (name=\"test_media_room_func_2_36\", folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        '''\ndependency_test = \"test_media_room_func_2_35\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Select Timeline media 'Y man' and take a screenshot\"):\n            main_page.select_timeline_media('Y man')\n            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n\n        with step(\"[Action] Right click and select 'Remove All Clip Markers'\"):\n            main_page.right_click()\n            main_page.select_right_click_menu('Clip Marker', 'Remove All Clip Markers')\n\n        with step(\"[Verify] Check preview is updated (Similarity=0.99)\"):\n            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)\n            if not main_page.compare(initial_preview, updated_preview, similarity=0.99):\n                assert False, \"Preview did not update after removing all clip markers! Similarity should > 0.99\"\n\n        with step(\"[Action] Save the project as 'test_media_room_func_2_36'\"):\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name=\"test_media_room_func_2_36\",\n                                          folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n\n        assert True"
    },
    {
        "name": "test_media_room_func_2_z",
        "tags": [
            "media_room_func",
            "media_room"
        ],
        "marked_name": "[test_media_room_func_2_z] Close AP due to the section is completed",
        "description": [
            "1. Enter Video Intro Room from Launcher",
            "2. Select favorite template",
            "3. Double click to enter designer"
        ],
        "full_code": "@pytest.mark.media_room_func\n    @pytest.mark.media_room\n    @pytest.mark.name('[test_media_room_func_2_z] Close AP due to the section is completed')\n    def test_media_room_func_2_z(self):\n    '''\n        1. Enter Video Intro Room from Launcher\n        2. Select favorite template\n        3. Double click to enter designer\n        '''\n# launch APP\n        if not main_page.start_app() or not main_page.is_app_exist():\n            assert False, \"Launch APP failed!\"\n\n\n        # [L111] 3.1 Video Intro Designer > Modify template > From Favorites\n        # with uuid(\"e5d5704c-a66b-410f-8ec0-8e93053ee302\") as case:\n\n        # enter Video Intro Room > My Favorites category\n        intro_video_page.enter_intro_video_room()\n        # time.sleep(DELAY_TIME * 6)\n        if not intro_video_page.enter_my_favorites():\n            assert False, \"Enter My Favorites failed!\"\n\n        # select 1st template\n        intro_video_page.select_intro_template_method_2(1)\n\n        # Double click to enter designer\n        with step(\"[Action] Double click to enter designer\"):\n            main_page.double_click()\n\n        with step(\"[Verify] Check if intro video designer is shown\"):\n            assert main_page.exist(L.intro_video_room.intro_video_designer.main_window, timeout=15), \"Intro video designer not found!\""
    },
    {
        "name": "test_intro_room_func_3_2",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "timeline"
        ],
        "marked_name": "[test_intro_room_func_3_2] Check preview intro video by Play/Pause/Stop/Enter timecode",
        "description": [
            "1. Check default duration is 7 seconds",
            "2. Set new duration to 9 seconds",
            "3. Check new duration is 9 seconds"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_intro_room_func_3_2] Check preview intro video by Play/Pause/Stop/Enter timecode')\n    def test_intro_room_func_3_2(self):\n    '''\n        1. Check default duration is 7 seconds\n        2. Set new duration to 9 seconds\n        3. Check new duration is 9 seconds\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_2\"\n        if not self.ensure_dependency(dependency_test, run_dependency=False):\n            with step(f\"[Initial] Set up initialized status\"):\n                self.test_intro_room_func_3_1()\n\n\n        # [L113] 3.1 Video Intro Designer > Edit > Change template duration\n        # with uuid(\"dad38202-8be2-45d8-a38a-aca3df0831d6\") as case:\n        if not intro_video_page.click_duration_btn():\n            assert False, \"Click duration button failed!\"\n\n        # Get default duration\n        with step(\"[Verify] Check default duration is 7 seconds\"):\n            result = intro_video_page.duration_setting.get_org_duration()\n            if result != '7 seconds':\n                default_duration = False\n            else:\n                default_duration = True\n\n        # Change duration\n        if not intro_video_page.duration_setting.set_new_duration(9):\n            assert False, \"Set new duration failed!\"\n\n        with step(\"[Verify] Check default duration is 9 seconds\"):\n            get_value = intro_video_page.duration_setting.get_new_duration()\n\n            # Current INT should transfer to String\n            if get_value != '9':\n                set_result = False\n            else:\n                set_result = True\n\n        intro_video_page.duration_setting.click_OK()\n\n        assert default_duration and set_result, f\"Duration time error! Default duration={default_duration}, set new duration={set_result}\""
    },
    {
        "name": "test_intro_room_func_3_4",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "replace_media",
            "color_board"
        ],
        "marked_name": "[test_intro_room_func_3_4] Replace Background Media > Use a Color Board > Check color code",
        "description": [
            "1. Click [Replace Background Media] > Use a Color Board",
            "2. Set color to #7B17FF",
            "3. Check if color changed as expected"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.replace_media\n    @pytest.mark.color_board\n    @pytest.mark.name('[test_intro_room_func_3_4] Replace Background Media > Use a Color Board > Check color code')\n    def test_intro_room_func_3_4(self):\n    '''\n        1. Click [Replace Background Media] > Use a Color Board\n        2. Set color to #7B17FF\n        3. Check if color changed as expected\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L116] 3.1 Video Intro Designer > Edit > Replace master video correctly from Color Board\n        # with uuid(\"71de433f-e2cd-465d-b13d-4504f2263308\") as case:\n\n        # Click [Replace Background Media] > Use a Color Board\n        intro_video_page.click_replace_media(3)\n        self._set_color('7B17FF')\n\n        with step(\"[Verify] Check if color changed as expected\"):\n            # Verify Step\n            intro_video_page.click_replace_media(3)\n            check_current_RBG = self._get_color()\n            if check_current_RBG == '7B17FF':\n                assert True, \"Color changed as expected!\"\n            else:\n                assert False, \"Color changed failed!\""
    },
    {
        "name": "test_intro_room_func_3_5",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "replace_media",
            "color_board"
        ],
        "marked_name": "[test_intro_room_func_3_5] Replace Background Media > Use a Color Board > Check Preview",
        "description": [
            "1. Click [Replace Background Media] > Use a Color Board",
            "2. Set color to #95C029",
            "3. Check if preview changed after modified color again"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.replace_media\n    @pytest.mark.color_board\n    @pytest.mark.name('[test_intro_room_func_3_5] Replace Background Media > Use a Color Board > Check Preview')\n    def test_intro_room_func_3_5(self):\n    '''\n        1. Click [Replace Background Media] > Use a Color Board\n        2. Set color to #95C029\n        3. Check if preview changed after modified color again\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L315] 3.1 Video Intro Designer > Edit > Add Color Board (Able to modify setting for color board)\n        # with uuid(\"59f54e15-0b43-4b7e-8e2b-3f00ddfb41b7\") as case:\n\n        intro_video_page.click_replace_media(3)\n        img_7B17FF = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n        self._set_color('95C029')\n\n        img_95C029 = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n\n        with step(\"[Verify] Check if preview changed after modified color again\"):\n            designer_preview_result = main_page.compare(img_7B17FF, img_95C029, similarity=0.98)\n            assert not designer_preview_result, \"Preview is not change after modified color again! Similarity should<0.98\""
    },
    {
        "name": "test_intro_room_func_3_6",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "replace_media",
            "import_media"
        ],
        "marked_name": "[test_intro_room_func_3_6] Replace Background Media > Use a Local Content > Modify Position > Check Preview",
        "description": [
            "1. Click [Replace Background Media] > Use a Local Content",
            "2. Select a local content",
            "3. Check if replace media with local content successfully",
            "4. Remove yellow MGT and Color board",
            "5. Move Sticker to down",
            "6. Check if preview changed correctly after modified"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.replace_media\n    @pytest.mark.import_media\n    @pytest.mark.name('[test_intro_room_func_3_6] Replace Background Media > Use a Local Content > Modify Position > Check Preview')\n    def test_intro_room_func_3_6(self):\n    '''\n        1. Click [Replace Background Media] > Use a Local Content\n        2. Select a local content\n        3. Check if replace media with local content successfully\n        4. Remove yellow MGT and Color board\n        5. Move Sticker to down\n        6. Check if preview changed correctly after modified\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L306] 3.1 Video Intro Designer > Edit > Replace master video from local content\n        # with uuid(\"6e03aff5-5870-41fc-add3-a2358348a59a\") as case:\n        intro_video_page.click_replace_media(1)\n        if not main_page.select_file(Test_Material_Folder + 'Produce_Local/Produce_G367.mkv'):\n            assert False, \"Select file in file picker failed!\"\n\n        with step(\"[Verify] Check if replace media with local content successfully\"):\n            if not main_page.exist(L.trim.main_window, timeout=10):\n                assert False, \"Replace media with local content failed!\"\n\n        with step(\"[Action] Press Trim buton to apply effect\"):\n            time.sleep(DELAY_TIME)\n            main_page.click(L.trim.btn_OK)\n            time.sleep(DELAY_TIME * 5)\n\n        # Remove yellow MGT and Color board\n        for _ in range(2):\n            intro_video_page.click_preview_center()\n            intro_video_page.motion_graphics.click_remove_button()\n            time.sleep(DELAY_TIME*2)\n\n        # move Sticker (Pip_10_00000) to down\n        intro_video_page.move_preview_object_to_down()\n\n        # Leave edit mode\n        intro_video_page.cancel_selection_button()\n        time.sleep(DELAY_TIME)\n\n        with step(\"[Verify] Check if preview changed correctly after modified\"):\n            current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,\n                                                        file_name=Auto_Ground_Truth_Folder + 'I114.png')\n            check_result = main_page.compare(Ground_Truth_Folder + 'I114.png', current_image)\n\n            assert check_result, \"Preview is not change after modified! Similarity should> 0.95\""
    },
    {
        "name": "test_intro_room_func_3_7",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "pip_object",
            "LUT",
            "content_pack"
        ],
        "marked_name": "[test_intro_room_func_3_7] Add/ Move Pip Object > Apply LUT Template",
        "description": [
            "1. Add a pip object and check preivew",
            "2. Move pip object to left upper and check preview",
            "3. Apply LUT template and check preview"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.pip_object\n    @pytest.mark.LUT\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_intro_room_func_3_7] Add/ Move Pip Object > Apply LUT Template')\n    def test_intro_room_func_3_7(self):\n    '''\n        1. Add a pip object and check preivew\n        2. Move pip object to left upper and check preview\n        3. Apply LUT template and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_6\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L124] 3.1 Video Intro Designer > Edit > Add sticker\n        # with uuid(\"f4df2783-70c0-4745-9d5c-fadc90167b44\") as case:\n        #     with uuid(\"8c048835-df6d-4d2a-af28-4fdba6c2a2ad\") as case:\n            # [L124] Click (Add sticker)\n\n\n        with step(\"[Action] Add a pip object (sticker) and check preview changed correctly\"):\n            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            intro_video_page.click_add_pip_object()\n\n            # Video Overlay Room\n            if not intro_video_page.select_pip_template(5, 'Travel'):\n                assert False, \"Select pip template failed!\"\n            time.sleep(DELAY_TIME*5)\n            after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            with step(\"[Verify] Check if preview changed correctly after add a pip object\"):\n                if main_page.compare(before_image, after_image): # Expected is return False\n                    assert False, \"Preview not changed after add a pip object!\"\n\n        with step(\"[Action] Move Sticker to left upper and check if preview chanaged correctly\"):\n            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            # move Sticker to left upper\n            if not intro_video_page.move_preview_object_to_left_upper(x_threshold=0.5):\n                assert False, \"Move Sticker to left upper failed!\"\n\n            with step(\"[Verify] Check if preview changed correctly after moved a pip object\"):\n                after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n                if main_page.compare(before_image, after_image): # Expected is return False\n                    assert False, \"Preview not changed after moved a pip object!\"\n\n        # Leave edit mode\n        intro_video_page.cancel_selection_button()\n        time.sleep(DELAY_TIME)\n\n\n        with step(\"[Action] Apply LUT template and check preview changed correctly\"):\n            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            # [L123] 3.1 Video Intro Designer > Edit > Apply LUT\n            if not intro_video_page.click_LUT_btn():\n                assert False, \"Click LUT button failed!\"\n\n            with step(\"[Verify] Check if LUT window is shown\"):\n                elem = L.intro_video_room.intro_video_designer.color_filter_window.combobox_category\n                if not main_page.exist(elem).AXTitle == 'Color LUT':\n                    assert False, \"LUT window not found!\"\n\n            if not intro_video_page.color_filter.select_LUT_template(4, 'Urban Minimalist'):\n                assert False, \"Select LUT template failed!\"\n\n            # Verify Step\n            with step(\"[Verify] Check if LUT template is applied correctly with GT\"):\n                # Change compare with GT to compare preview changed or not due to highly changing frequency of added content package\n                # current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,\n                #                                             file_name=Auto_Ground_Truth_Folder + 'I123.png')\n                # check_result = main_page.compare(Ground_Truth_Folder + 'I123.png', current_image)\n                after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n                if main_page.compare(before_image, after_image, similarity=1): # Expected is return False\n                    assert False, \"Preview not changed after applied LUT template!\"\n\n        # Close (Color Filter) window\n        if not intro_video_page.color_filter.close_x():\n            assert False, \"Close LUT window failed!\"\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_8",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "text"
        ],
        "marked_name": "[test_intro_room_func_3_8] Add Text > Enable Backdrop Function > Set Backdrop Type to Rounded Rectangle",
        "description": [
            "1. Add text",
            "2. Enable backdrop function",
            "3. Set backdrop type to Rounded Rectangle",
            "4. Check if backdrop type is set correctly"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.text\n    @pytest.mark.name('[test_intro_room_func_3_8] Add Text > Enable Backdrop Function > Set Backdrop Type to Rounded Rectangle')\n    def test_intro_room_func_3_8(self):\n    '''\n        1. Add text\n        2. Enable backdrop function\n        3. Set backdrop type to Rounded Rectangle\n        4. Check if backdrop type is set correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L119] 3.1 Video Intro Designer > Edit > Add general title\n        # with uuid(\"b0027c68-672d-416d-a969-aa875ddaae46\") as case:\n        if not intro_video_page.click_add_text(1):\n            assert False, \"Click Add Text with option 'Add Text' failed!\"\n        \n        with step(\"[Action] Enable backdrop function\"):\n            # Enable backdrop\n            intro_video_page.general_title.click_backdrop_button()\n            intro_video_page.backdrop_settings.enable_backdrop()\n            \n        if not intro_video_page.backdrop_settings.set_type(2, 4):\n            assert False, \"Set backdrop type failed!\"\n\n        with step(\"[Verify] Check if backdrop type is set correctly\"):\n            check_type = intro_video_page.backdrop_settings.get_fit_backdrop_status()\n            if check_type != 'Rounded Rectangle':\n                assert False, \"Backdrop type is not set correctly, Expected is 'Rounded Rectangle'!\"\n\n        # Leave edit mode\n        intro_video_page.cancel_selection_button()\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_9",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "import_media",
            "stock_media"
        ],
        "marked_name": "[test_intro_room_func_3_9] Replace Background Media > Use a Stock Media > Check Preview",
        "description": [
            "1. Replace media from iStock(Video)",
            "2. Check if replace media with SS content successfully"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.import_media\n    @pytest.mark.stock_media\n    @pytest.mark.name('[test_intro_room_func_3_9] Replace Background Media > Use a Stock Media > Check Preview')\n    def test_intro_room_func_3_9(self):\n    '''\n        1. Replace media from iStock(Video)\n        2. Check if replace media with SS content successfully\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_8\"\n        self.ensure_dependency(dependency_test)\n\n        # [L115] 3.1 Video Intro Designer > Edit > Download and replace master video correctly form SS\n        # with uuid(\"73912396-9399-463e-8fde-9e4e5c68b91e\") as case:\n        \n        # Replace media from Shutterstock(Video)\n        # 2023/05/04 modify: Replace media from iStock(Video)\n\n        current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n\n        intro_video_page.click_replace_media(2)\n        # time.sleep(DELAY_TIME * 6)\n        getty_image_page.handle_what_is_stock_media()\n        #getty_image_page.switch_to_SS()\n        # time.sleep(DELAY_TIME * 6)\n\n        download_from_ss_page.search.search_text('crowned crane to walk')\n        # time.sleep(DELAY_TIME * 6)\n        download_from_ss_page.video.select_thumbnail_for_video_intro_designer(5)\n\n\n        for _ in range(40):\n            if main_page.exist(L.media_room.confirm_dialog.btn_no):\n                media_room_page.handle_high_definition_dialog(option='no')\n                time.sleep(DELAY_TIME*3)\n                break\n            else:\n                time.sleep(DELAY_TIME)\n\n        # Verify : If pop up Trim window, Press ESC to leave Trim window\n        with step(\"[Action] Press ESC to leave Trim window if window shows\"):\n            if main_page.exist(L.trim.main_window, timeout=6):\n                main_page.press_esc_key()\n                time.sleep(DELAY_TIME * 2)\n        \n        with step(\"[Verify] Check if replace media with SS content successfully\"):\n            img_updated = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            check_SS_result = main_page.compare(current_image, img_updated)\n            assert not check_SS_result, \"Replace media with SS content failed!\""
    },
    {
        "name": "test_intro_room_func_3_10",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "text"
        ],
        "marked_name": "[test_intro_room_func_3_10] Add Motion Graphics Template",
        "description": [
            "1. Add MGT template (Motion Graphics Template)"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.text\n    @pytest.mark.name('[test_intro_room_func_3_10] Add Motion Graphics Template')\n    def test_intro_room_func_3_10(self):\n    '''\n        1. Add MGT template (Motion Graphics Template)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L120] 3.1 Video Intro Designer > Edit > Add MGT\n        # with uuid(\"4c6d937b-e72a-4ed9-852c-2c1134cb7812\") as case:\n        intro_video_page.click_add_text(2)\n        time.sleep(DELAY_TIME * 3)\n\n        # Insert Speech bubble 01\n        assert intro_video_page.motion_graphics.select_template(1, category=5), \"Select MGT template failed!\""
    },
    {
        "name": "test_intro_room_func_3_11",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "text",
            "layer_order"
        ],
        "marked_name": "[test_intro_room_func_3_11] Change layer order",
        "description": [
            "1. Change layer order",
            "2. Check if layer order changed correctly on preview"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.text\n    @pytest.mark.layer_order\n    @pytest.mark.name('[test_intro_room_func_3_11] Change layer order')\n    def test_intro_room_func_3_11(self):\n    '''\n        1. Change layer order\n        2. Check if layer order changed correctly on preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L125] 3.1 Video Intro Designer > Edit > Change layer order\n        # with uuid(\"963f4ce6-e3b2-46c7-9bdd-3aa36c1fd0bd\") as case:\n\n        with step(\"[Action] Change layer order\"):\n            time.sleep(DELAY_TIME * 3) # wait for loading\n            before_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            intro_video_page.click_layer_order(4)\n            time.sleep(DELAY_TIME)\n            intro_video_page.cancel_selection_button()\n            time.sleep(DELAY_TIME)\n        \n            with step(\"[Verify] Check if layer order changed correctly on preview\"):\n                # Change compare with GT to compare preview changed or not due to highly changing frequency of added content package\n                # current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,\n                #                                             file_name=Auto_Ground_Truth_Folder + 'I125.png')\n                # check_result = main_page.compare(Ground_Truth_Folder + 'I125.png', current_image)\n                after_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n                check_result = main_page.compare(before_img, after_img, similarity=0.98) # should return False\n                assert not check_result, \"Change layer order failed! Similarity should< 0.98\""
    },
    {
        "name": "test_intro_room_func_3_12",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "crop"
        ],
        "marked_name": "[test_intro_room_func_3_12] Crop the layer to small",
        "description": [
            "1. Click [Crop] button",
            "2. Resize to small",
            "3. Check if preview changed after crop"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.crop\n    @pytest.mark.name('[test_intro_room_func_3_12] Crop the layer to small')\n    def test_intro_room_func_3_12(self):\n    '''\n        1. Click [Crop] button\n        2. Resize to small\n        3. Check if preview changed after crop\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_11\"\n        self.ensure_dependency(dependency_test)\n\n        # [L117] 3.1 Video Intro Designer > Edit > Crop\n        # with uuid(\"9d046ecb-a8ac-4339-9355-3f25d5b77d84\") as case:\n\n        current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n        # Click crop\n        if not intro_video_page.click_crop_btn():\n            assert False, \"Click crop button failed!\"\n\n        # Resize to small\n        with step(\"[Action] Resize to small and apply effect\"):\n            intro_video_page.crop_zoom_pan.resize_to_small()\n            intro_video_page.crop_zoom_pan.leave_crop('Yes')\n\n        with step(\"[Verify] Check if preview changed after crop\"):\n            time.sleep(DELAY_TIME*2) # wait applying effect completed\n            img_cancel_crop = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n\n            check_result = main_page.compare(current_image, img_cancel_crop, similarity=0.99)\n            assert not check_result, \"Crop effect failed! Similarity should<0.99\""
    },
    {
        "name": "test_intro_room_func_3_13",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "import_media",
            "in_animation"
        ],
        "marked_name": "[test_intro_room_func_3_13] Add/ Move Image > Apply In Animation Effect > Check Preview",
        "description": [
            "1. Add image to review and move to right upper",
            "2. Apply in_animation effect",
            "3. Check if preview changed after add animation"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.import_media\n    @pytest.mark.in_animation\n    @pytest.mark.name('[test_intro_room_func_3_13] Add/ Move Image > Apply In Animation Effect > Check Preview')\n    def test_intro_room_func_3_13(self):\n    '''\n        1. Add image to review and move to right upper\n        2. Apply in_animation effect\n        3. Check if preview changed after add animation\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L121] 3.1 Video Intro Designer > Edit > Add image\n        # with uuid(\"59ddae48-a065-48f3-a593-06cbf725c81f\") as case:\n\n        with step(\"[Action] Add image to preview area for applying in animation\"):\n\n            intro_video_page.click_add_image(1)\n            \n            main_page.select_file(Test_Material_Folder + 'fix_enhance_20/colorful.jpg')\n\n            # move image to right > up\n            time.sleep(DELAY_TIME)\n            intro_video_page.move_preview_object_to_right_upper()\n\n        with step(\"[Action] Apply in_animation effect\"):\n            # Add animation\n            if not intro_video_page.image.click_animation_btn():\n                assert False, \"Click animation button failed!\"\n\n            # Unfold\n            intro_video_page.image.in_animation.unfold_setting(1)\n\n            # Select template\n            check_image_result = intro_video_page.image.in_animation.select_template('Blizzard')\n            if not check_image_result:\n                assert False, \"Select animation template failed!\"\n        \n\n        # Verify Step\n        with step(\"[Verify] Check if preview changed after add animation\"):\n            time.sleep(DELAY_TIME) # wait applying effect completed\n            after_add_photo = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n\n            # Set Video Intro timecode: 01:15\n            intro_video_page.set_designer_timecode('01_15')\n            time.sleep(DELAY_TIME)\n\n            check_animation = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            check_result = main_page.compare(after_add_photo, check_animation, similarity=0.98)\n            assert not check_result, \"Add animation effect failed! Similarity should<0.98\"\n\n        # [L319] 3.1 Video Intro Designer > Edit > Add BGM\n        # 2023/05/05 update: Skip this case << Download from Meta / Shutterstock (Music) >>"
    },
    {
        "name": "test_intro_room_func_3_14",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "save_template",
            "timeline"
        ],
        "marked_name": "[test_intro_room_func_3_14] Save/ Apply the template",
        "description": [
            "1. Save template as stage_1",
            "2. Select saved template and apply",
            "3. Check if preview changed after play the video"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_intro_room_func_3_14] Save/ Apply the template')\n    def test_intro_room_func_3_14(self):\n    '''\n        1. Save template as stage_1\n        2. Select saved template and apply\n        3. Check if preview changed after play the video\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L322] 3.1 Video Intro Designer > Save Template\n        # with uuid(\"3049da80-c0d6-40f7-86db-e317ef278b7b\") as case:\n\n        with step('[Action] Save Template as stage_1'):        \n            if not intro_video_page.click_btn_save_as('stage_1'):\n                assert False, \"Save template failed!\"\n\n        with step('[Action] Select saved template'):\n            # Enter (Save Templates)\n            if not intro_video_page.enter_saved_category(): assert False, \"Enter saved category failed!\"\n            intro_video_page.select_intro_template_method_2(1)\n            with step('[Action] Double click to select the template'):\n                main_page.double_click()\n            time.sleep(DELAY_TIME*3)\n\n        # Already checked applied effect in previous test, no need to check it again\n        # with step('[Verify] Check if the template is loaded correctly by GT'):\n        #     # Verify Step 1: Check preview\n        #     current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,\n        #                                             file_name=Auto_Ground_Truth_Folder + 'I129.png')\n        #     check_result = main_page.compare(Ground_Truth_Folder + 'I129.png', current_image)\n\n        #     if not check_result:\n        #         assert False, \"Template is not loaded correctly by GT! Similarity should>0.95\"\n\n        with step('[Verify] Check if preview changed after play the video'):\n            \n            intro_video_page.set_designer_timecode('00_01')\n            time.sleep(DELAY_TIME)\n            with step('[Action] Play the video'):\n                main_page.press_space_key()\n                before_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n            time.sleep(DELAY_TIME * 4)\n            with step('[Action] Pause the video'):\n                main_page.press_space_key()\n                after_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)\n\n            check_result = main_page.compare(before_img, after_img, similarity=0.99) # Expected is return False\n            if check_result:\n                assert False, \"Template is changed after play the video! Similarity should<0.99\"\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_15",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "text"
        ],
        "marked_name": "[test_intro_room_func_3_15] Move object to right upper > Edit text to Swimming ring > Share template",
        "description": [
            "1. Move object to right upper",
            "2. Edit text to Swimming ring",
            "3. Share template"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.text\n    @pytest.mark.name('[test_intro_room_func_3_15] Move object to right upper > Edit text to Swimming ring > Share template')\n    def test_intro_room_func_3_15(self):\n    '''\n        1. Move object to right upper\n        2. Edit text to Swimming ring\n        3. Share template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_14\"\n        self.ensure_dependency(dependency_test)\n\n        # [L128] 3.1 Video Intro Designer > Share after modify\n        # with uuid(\"94ed80fa-11d3-4b2f-a414-dbcd960110e8\") as case:\n\n        with step('[Action] Move object to right upper'):\n            # Modify step: Drag (photo) to lower position\n            intro_video_page.hover_preview_center()\n            main_page.right_click()\n            intro_video_page.move_preview_object_to_right_upper(y_threshold=0.6)\n\n        with step('[Action] Edit text to Swimming ring'):\n            # Edit General title to Swimming ring\n            intro_video_page.hover_preview_center(y_threshold=0.5)\n            main_page.double_click()\n            main_page.input_text('Swimming ring')\n            # Leave (Edit mode)\n            intro_video_page.cancel_selection_button()\n\n\n        with step('[Action] Share template'):\n            # Share template step:\n            # Click [Share Template] button\n            if not intro_video_page.click_btn_share_template('pink swimming ring'):\n                assert False, \"Click Share Template failed!\"\n\n            # Confirm Copyright Disclaimer\n            if not intro_video_page.share_temp.click_confirm():\n                assert False, \"Click Confirm failed!\"\n\n            # Input 'Have a nice day' then click share\n            share_result = intro_video_page.share_temp.click_share()\n            assert share_result, \"Share template failed!\""
    },
    {
        "name": "test_intro_room_func_3_16",
        "tags": [
            "intro_room_func",
            "intro_video_designer",
            "template",
            "shared_template",
            "save_project",
            "title_designer"
        ],
        "marked_name": "[test_intro_room_func_3_16] Add modified video intro to timeline > Save project > Remove shared template",
        "description": [
            "1. Add modified video intro to timeline",
            "2. Check if video intro is added to timeline by warning message",
            "3. Check if video intro is added to timeline by GT",
            "4. Save the project",
            "5. Remove shared template"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.template\n    @pytest.mark.shared_template\n    @pytest.mark.save_project\n    @pytest.mark.title_designer\n    @pytest.mark.name('[test_intro_room_func_3_16] Add modified video intro to timeline > Save project > Remove shared template')\n    def test_intro_room_func_3_16(self):\n    '''\n        1. Add modified video intro to timeline\n        2. Check if video intro is added to timeline by warning message\n        3. Check if video intro is added to timeline by GT\n        4. Save the project\n        5. Remove shared template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_intro_room_func_3_15\"\n        self.ensure_dependency(dependency_test)\n\n        # [L130] 3.1 Video Intro Designer > Add to timeline\n        # with uuid(\"6ba6a1b7-3d61-43fd-97b8-17b5865d7d5a\") as case:\n\n        with step('[Action] Add modified video intro to timeline'):\n            intro_video_page.click_btn_add_to_timeline()\n            time.sleep(DELAY_TIME * 3)\n\n\n        with step('[Verify] Check if video intro is added to timeline by warning message'):\n            # Verify Step1 : Check (OH MINE) MGT is in Video track 2\n            timeline_operation_page.select_timeline_media(track_index=2, clip_index=0)\n            with step('[Action] Double click on clip to open title designer'):\n                main_page.double_click()\n            if not title_designer_page.mgt.handle_warning_msg(tick_option=0):\n                assert False, \"Warning message not found!\"\n\n            if not title_designer_page.mgt.click_warning_msg_ok():\n                assert False, \"Click OK on warning message failed!\"\n\n\n        with step('[Verify] Check if video intro is added to timeline by GT'):\n            # Verify Step 2: Check preview\n            title_designer_page.set_timecode('00_00_08_00')\n            current_image = intro_video_page.snapshot(locator=L.title_designer.area.window_title_designer,\n                                                        file_name=Auto_Ground_Truth_Folder + 'I130.png')\n            check_result = main_page.compare(Ground_Truth_Folder + 'I130.png', current_image)\n\n            # press ESC to leave title designer\n            main_page.press_esc_key()\n\n            if not check_result:\n                assert False, \"Video intro is not added to timeline by GT! Similarity should>0.95\"\n\n        with step('[Action] Save the project'):\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_intro_room_func_3_16',\n                                                folder_path=Export_Folder + 'BFT_21_Stage1/')\n            time.sleep(DELAY_TIME * 8)\n\n        # Remove (share Video Intro template)\n        # If share successfully, then delete template\n        with step('[Action] Remove shared template'):\n            # Open (My Profile)\n            intro_video_page.enter_my_profile()\n            intro_video_page.my_profile.delete_1st_template()\n            # close (My Profile)\n            main_page.press_esc_key()"
    },
    {
        "name": "test_intro_room_func_3_17",
        "tags": [
            "intro_room_func",
            "launch",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_intro_room_func_3_17] Check preview update after selecting Beauty category and intro template",
        "description": [
            "1. Restart APP",
            "2. Open packed project ('Packed_Project/test_intro_room_func_3_17_from_test_media_room_func_2_36.pdk', 'Extracted_Folder/test_intro_room_func_3_17')",
            "3. Enter Intro Video Room > Click specific category with name 'Beauty' > Screenshot (locator=main_page.area.preview.main)",
            "4. Select Intro Template with method 2 with index 2",
            "5. Check preview is updated correctly (Similarity=0.98)"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.launch\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_intro_room_func_3_17] Check preview update after selecting Beauty category and intro template')\n    def test_intro_room_func_3_17(self):\n    '''\n        1. Restart APP\n        2. Open packed project ('Packed_Project/test_intro_room_func_3_17_from_test_media_room_func_2_36.pdk', 'Extracted_Folder/test_intro_room_func_3_17')\n        3. Enter Intro Video Room > Click specific category with name 'Beauty' > Screenshot (locator=main_page.area.preview.main)\n        4. Select Intro Template with method 2 with index 2\n        5. Check preview is updated correctly (Similarity=0.98)\n        '''\n# [L58] 2.2 Intro Video Room > Template display\n        # with uuid(\"5656c3b0-9b2b-499a-bc27-f134bba2dc51\") as case:\n\n        with step('[Action] Restart APP'):\n            main_page.close_and_restart_app()\n\n        with step('[Action] Open packed project'):\n            self.open_packed_project(\"Packed_Project/test_intro_room_func_3_17_from_test_media_room_func_2_36.pdk\",\n                                    \"Extracted_Folder/test_intro_room_func_3_17\")\n\n        with step('[Action] Enter Intro Video Room, click specific category \"Beauty\" and capture preview screenshot'):\n            intro_video_page.enter_intro_video_room()\n            intro_video_page.click_intro_specific_category(\"Beauty\")\n            before_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step('[Action] Select Intro Template with method 2 with index 2'):\n            intro_video_page.select_intro_template_method_2(2)\n\n        with step('[Verify] Check preview is updated correctly'):\n            new_preview = main_page.snapshot(locator=main_page.area.preview.main)\n            # Similarity should be less than 0.98 indicating the preview has changed\n            if main_page.compare(before_preview, new_preview, similarity=0.98):\n                assert False, \"Preview is not updated correctly! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_18",
        "tags": [
            "intro_room_func",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_intro_room_func_3_18] Check preview update after selecting Health category and intro template",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click specific category with name ('Health') > Screenshot (locator=main_page.area.preview.main)",
            "2. Select Intro Template with method 2 with index (10)",
            "3. Check preview is updated correctly (Similarity=0.98)"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_intro_room_func_3_18] Check preview update after selecting Health category and intro template')\n    def test_intro_room_func_3_18(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click specific category with name ('Health') > Screenshot (locator=main_page.area.preview.main)\n        2. Select Intro Template with method 2 with index (10)\n        3. Check preview is updated correctly (Similarity=0.98)\n        '''\ndependency_test = \"test_intro_room_func_3_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click specific category \"Health\" and capture preview screenshot'):\n            intro_video_page.click_intro_specific_category(\"Health\")\n            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step('[Action] Select Intro Template with method 2 with index 10'):\n            intro_video_page.select_intro_template_method_2(10)\n\n        with step('[Verify] Check preview is updated correctly'):\n            updated_preview = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(initial_preview, updated_preview, similarity=0.98):\n                # Similarity should be less than 0.98 indicating that the preview has changed\n                assert False, \"Preview did not update correctly! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_19",
        "tags": [
            "intro_room_func",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_intro_room_func_3_19] Compare screenshots of Beauty and Handwritten categories",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click specific category with name ('Beauty') and capture screenshot (locator=L.media_room.library_frame)",
            "2. Click specific category with name ('Handwritten'), select Intro Template with method 2 with index 6, and capture screenshot (locator=L.media_room.library_frame)",
            "3. Compare the screenshots of the two categories, they should be different (Similarity=0.98)"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_intro_room_func_3_19] Compare screenshots of Beauty and Handwritten categories')\n    def test_intro_room_func_3_19(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click specific category with name ('Beauty') and capture screenshot (locator=L.media_room.library_frame)\n        2. Click specific category with name ('Handwritten'), select Intro Template with method 2 with index 6, and capture screenshot (locator=L.media_room.library_frame)\n        3. Compare the screenshots of the two categories, they should be different (Similarity=0.98)\n        '''\ndependency_test = \"test_intro_room_func_3_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L59] 2.2 Intro Video Room > Category display\n        # with uuid(\"1e6335f3-c46a-4b2a-869a-c9768c44212b\") as case:\n\n        with step('[Action] Click specific category \"Beauty\" and capture screenshot'):\n            intro_video_page.click_intro_specific_category(\"Beauty\")\n            screenshot_beauty = main_page.snapshot(locator=L.media_room.library_frame)\n\n        with step('[Action] Click specific category \"Handwritten\", select Intro Template with method 2 with index 6, and capture screenshot'):\n            intro_video_page.click_intro_specific_category(\"Handwritten\")\n            intro_video_page.select_intro_template_method_2(6)\n            screenshot_handwritten = main_page.snapshot(locator=L.media_room.library_frame)\n\n        with step('[Verify] Compare screenshots of Beauty and Handwritten categories'):\n            if main_page.compare(screenshot_beauty, screenshot_handwritten, similarity=0.98):\n                # Similarity should be less than 0.98 since the screenshots should be different\n                assert False, \"Screenshots of 'Beauty' and 'Handwritten' categories are too similar! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_20",
        "tags": [
            "intro_room_func",
            "my_profile"
        ],
        "marked_name": "[test_intro_room_func_3_20] Verify My Profile is empty correctly",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click specific category with name ('Beauty')",
            "2. Enter My Profile",
            "3. Compare preview (locator=L.intro_video_room.my_profile.main_window) with GT (similarity=0.8) to check if My Profile is empty correctly",
            "4. Press [Esc] key"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.my_profile\n    @pytest.mark.name('[test_intro_room_func_3_20] Verify My Profile is empty correctly')\n    def test_intro_room_func_3_20(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click specific category with name ('Beauty')\n        2. Enter My Profile\n        3. Compare preview (locator=L.intro_video_room.my_profile.main_window) with GT (similarity=0.8) to check if My Profile is empty correctly\n        4. Press [Esc] key\n        '''\ndependency_test = \"test_intro_room_func_3_19\"\n        self.ensure_dependency(dependency_test)\n\n        # [L60] 2.2 Intro Video Room > My profile\n        # with uuid(\"9f19ce26-268c-4255-9467-033156ceb53f\") as case:\n\n        with step('[Action] Click specific category \"Beauty\"'):\n            intro_video_page.click_intro_specific_category(\"Beauty\")\n\n        with step('[Action] Enter My Profile'):\n            intro_video_page.enter_my_profile()\n\n        with step('[Verify] Check if My Profile preview is empty as GT'):\n            my_profile_preview = main_page.snapshot(\n                locator=L.intro_video_room.my_profile.main_window,\n                file_name=Auto_Ground_Truth_Folder + 'L60.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L60.png',\n                my_profile_preview,\n                similarity=0.8\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.8 for an empty My Profile view\n                assert False, \"My Profile preview does not match GT (L60.png)! Similarity should > 0.8\"\n\n        with step('[Action] Press [Esc] key'):\n            main_page.press_esc_key()\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_21",
        "tags": [
            "intro_room_func",
            "import_media"
        ],
        "marked_name": "[test_intro_room_func_3_21] Verify preview update after media replacement",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. exist_click(L.media_room.input_search) > keyboard.send('universer') > press_enter_key() > time.sleep(DELAY_TIME * 3)",
            "2. self.sort_by_like() to sort by Like",
            "3. Select Intro Template with method 2 with index 1",
            "4. Click [Insert to Selected Track] button from Tip area",
            "5. Click [Yes] button (L.main.confirm_dialog.btn_yes) from [Do you want to edit the template in Video Intro designer?] dialog",
            "6. self.check_open_intro_template() to check open intro template result",
            "7. Click Replace Media and choose option (1)",
            "8. Select file (Test_Material_Folder + 'Produce_Local/4978895.mov') in file picker",
            "9. Check if pop up trim dialog is shown and close it",
            "10. Check preview (locator=L.intro_video_room.intro_video_designer.preview_area) is updated correctly with GT (Auto_Ground_Truth_Folder + 'L61_replace_Video.png')(similarity=0.95)",
            "11. Save custom template as (Test_save_intro)"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.import_media\n    @pytest.mark.name('[test_intro_room_func_3_21] Verify preview update after media replacement')\n    def test_intro_room_func_3_21(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. exist_click(L.media_room.input_search) > keyboard.send('universer') > press_enter_key() > time.sleep(DELAY_TIME * 3)\n        2. self.sort_by_like() to sort by Like\n        3. Select Intro Template with method 2 with index 1\n        4. Click [Insert to Selected Track] button from Tip area\n        5. Click [Yes] button (L.main.confirm_dialog.btn_yes) from [Do you want to edit the template in Video Intro designer?] dialog\n        6. self.check_open_intro_template() to check open intro template result\n        7. Click Replace Media and choose option (1)\n        8. Select file (Test_Material_Folder + 'Produce_Local/4978895.mov') in file picker\n        9. Check if pop up trim dialog is shown and close it\n        10. Check preview (locator=L.intro_video_room.intro_video_designer.preview_area) is updated correctly with GT (Auto_Ground_Truth_Folder + 'L61_replace_Video.png')(similarity=0.95)\n        11. Save custom template as (Test_save_intro)\n        '''\ndependency_test = \"test_intro_room_func_3_20\"\n        self.ensure_dependency(dependency_test)\n\n        # [L61] 2.2 Intro Video Room > Open Intro Video Designer\n        # with uuid(\"eae9c5b2-b7b1-4cc9-99b0-8953963a869a\") as case:\n\n        with step('[Action] Click search input, type \"universer\", press enter, and wait'):\n            main_page.exist_click(L.media_room.input_search)\n            main_page.keyboard.send('universer')\n            main_page.press_enter_key()\n            time.sleep(DELAY_TIME * 3)\n\n        with step('[Action] Sort media by Like'):\n            self.sort_by_like()\n\n        with step('[Action] Select Intro Template with method 2 with index 1'):\n            intro_video_page.select_intro_template_method_2(1)\n\n        with step('[Action] Click [Insert to Selected Track] button from Tip area'):\n            tips_area_page.click_TipsArea_btn_insert_project()\n\n        with step('[Action] Click [Yes] button from confirm dialog'):\n            main_page.click(L.main.confirm_dialog.btn_yes)\n\n        with step('[Verify] Check if intro template opened correctly'):\n            self.check_open_intro_template()\n\n        with step('[Action] Click Replace Media and choose option 1'):\n            intro_video_page.click_replace_media(1)\n\n        with step('[Action] Select file in file picker'):\n            file_path = Test_Material_Folder + 'Produce_Local/4978895.mov'\n            main_page.select_file(file_path)\n\n        with step('[Action] Check and close pop up trim dialog if shown'):\n            # Pop up trim dialog\n            if not main_page.exist(L.trim.main_window, timeout=10):\n                assert False, \"Pop up trim dialog not found!\"\n            time.sleep(DELAY_TIME*0.5)\n            main_page.press_esc_key()\n            time.sleep(DELAY_TIME*0.5)\n\n\n        with step('[Verify] Check preview is updated correctly'):\n            preview = main_page.snapshot(\n                locator=L.intro_video_room.intro_video_designer.preview_area,\n                file_name=Auto_Ground_Truth_Folder + 'L61_replace_Video.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L61_replace_Video.png',\n                preview,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.98 for updated preview\n                assert False, \"Preview does not match GT (L61_replace_Video.png)! Similarity should > 0.95\"\n\n        with step('[Action] Save custom template as (Test_save_intro)'):\n            intro_video_page.click_btn_save_as(custom_name='Test_save_intro')\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_22",
        "tags": [
            "intro_room_func",
            "play_video"
        ],
        "marked_name": "[test_intro_room_func_3_22] Verify timeline addition and preview operations when playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter room (Title)(1) and Enter Intro Video Room",
            "2. Enter Saved Category > Select Intro Template with method 2 by index (1)",
            "3. Right click > Select (Add to Timeline) on right click menu",
            "4. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog",
            "5. Click preview operation (Play) in playback window",
            "6. Check if the preview window is different when playing",
            "7. Click preview operation (Stop) in playback window",
            "8. Click undo button"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_intro_room_func_3_22] Verify timeline addition and preview operations when playing')\n    def test_intro_room_func_3_22(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter room (Title)(1) and Enter Intro Video Room\n        2. Enter Saved Category > Select Intro Template with method 2 by index (1)\n        3. Right click > Select (Add to Timeline) on right click menu\n        4. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog\n        5. Click preview operation (Play) in playback window\n        6. Check if the preview window is different when playing\n        7. Click preview operation (Stop) in playback window\n        8. Click undo button\n        '''\ndependency_test = \"test_intro_room_func_3_23\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Enter room \"Title\" with index 1 and then enter Intro Video Room'):\n            main_page.enter_room(1)\n            intro_video_page.enter_intro_video_room()\n\n\n        # [L62] 2.2 Intro Video Room > Add template to timeline > Right click menu\n        # with uuid(\"8996d86e-4c16-450e-9863-9e96aebf3400\") as case:\n\n        with step('[Action] Enter Saved Category and select Intro Template with method 2 by index 1'):\n            intro_video_page.enter_saved_category()\n            intro_video_page.select_intro_template_method_2(1)\n\n        with step('[Action] Right click and select \"Add to Timeline\" from right click menu'):\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Add to Timeline\")\n\n        with step('[Action] Click [No] button on confirm dialog'):\n            main_page.click(L.base.confirm_dialog.btn_no)\n\n        with step('[Action] Click preview operation \"Play\" in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Play\")\n\n        with step('[Verify] Check if the preview window is different when playing'):\n            if not main_page.Check_PreviewWindow_is_different(sec=4):\n                assert False, \"Preview window did not change when playing! It should be different.\"\n\n        with step('[Action] Click preview operation \"Stop\" in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Stop\")\n\n        with step('[Action] Click undo button'):\n            main_page.click_undo()\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_23",
        "tags": [
            "intro_room_func",
            "save_project"
        ],
        "marked_name": "[test_intro_room_func_3_23] Verify timeline addition, preview update, and save project",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select Intro Template with method 2 by index (1)",
            "2. Click [Insert to Selected Track] button",
            "3. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog",
            "4. Set timecode to (00_00_07_00) in main page",
            "5. Check preview (locator=main_page.area.preview.main) with GT (Auto_Ground_Truth_Folder + 'L63.png')(similarity=0.95)",
            "6. Set timecode to (00_00_00_00) in main page",
            "7. Save project as from top menu bar and handle [Save Project] Dialog with name 'test_intro_room_func_3_22' and folder_path (Test_Material_Folder + 'BFT_21_Stage1/')"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_intro_room_func_3_23] Verify timeline addition, preview update, and save project')\n    def test_intro_room_func_3_23(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select Intro Template with method 2 by index (1)\n        2. Click [Insert to Selected Track] button\n        3. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog\n        4. Set timecode to (00_00_07_00) in main page\n        5. Check preview (locator=main_page.area.preview.main) with GT (Auto_Ground_Truth_Folder + 'L63.png')(similarity=0.95)\n        6. Set timecode to (00_00_00_00) in main page\n        7. Save project as from top menu bar and handle [Save Project] Dialog with name 'test_intro_room_func_3_22' and folder_path (Test_Material_Folder + 'BFT_21_Stage1/')\n        '''\ndependency_test = \"test_intro_room_func_3_22\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L63] 2.2 Intro Video Room > Add template to timeline > Tips Area button\n        # with uuid(\"0fb947c2-c718-4b81-8bed-7e0a78a84c33\") as case:\n\n        with step('[Action] Select Intro Template with method 2 by index 1'):\n            intro_video_page.select_intro_template_method_2(1)\n\n        with step('[Action] Click [Insert to Selected Track] button'):\n            tips_area_page.click_TipsArea_btn_insert_project()\n\n        with step('[Action] Click [No] button on confirm dialog'):\n            main_page.click(L.base.confirm_dialog.btn_no)\n\n        with step('[Action] Set timeline timecode to 00_00_07_00'):\n            main_page.set_timeline_timecode(\"00_00_07_00\", is_verify=True)\n\n        with step('[Verify] Screenshot preview and compare with GT (L63.png)'):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + \"L63.png\"\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + \"L63.png\",\n                preview,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L63.png)! Similarity should > 0.95\"\n\n        with step('[Action] Set timeline timecode to 00_00_00_00'):\n            main_page.set_timeline_timecode(\"00_00_00_00\", is_verify=True)\n\n        with step('[Action] Save project as and handle save dialog'):\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_intro_room_func_3_22', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n\n        assert True"
    },
    {
        "name": "test_intro_room_func_3_z",
        "tags": [
            "intro_room_func",
            "intro_video_designer"
        ],
        "marked_name": "[test_intro_room_func_3_z] Close AP due to the section is completed",
        "description": [
            "1. Set default Title duration to 10",
            "2. Open [Default] title designer by searching [Default] in library",
            "3. Check open [Default] title designer with title content/ caption bar"
        ],
        "full_code": "@pytest.mark.intro_room_func\n    @pytest.mark.intro_video_designer\n    @pytest.mark.name('[test_intro_room_func_3_z] Close AP due to the section is completed')\n    def test_intro_room_func_3_z(self):\n    '''\n        1. Set default Title duration to 10\n        2. Open [Default] title designer by searching [Default] in library\n        3. Check open [Default] title designer with title content/ caption bar\n        '''\n# launch APP\n        main_page.start_app()\n\n        # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)\n        with step('[Action] Set default Title duration to 10'):\n            time.sleep(DELAY_TIME)\n            main_page.click_set_user_preferences()\n            preferences_page.switch_to_editing()\n            preferences_page.editing.durations_title_set_value('10.0')\n            preferences_page.click_ok()\n\n        # [L132] 3.2 Title Designer > Open Title designer\n        # with uuid(\"7a0b1dbb-0c33-4634-8289-ad6a0acd92e1\") as case:\n        with step('[Action] Open [Default] title designer by searching [Default] in library'):\n            # enter Title room\n            main_page.enter_room(1)\n\n            # Select default title (21.6.5219 : search then select default title)\n            media_room_page.search_library('Default')\n            time.sleep(DELAY_TIME * 2)\n            main_page.select_library_icon_view_media('Default')\n            main_page.double_click()\n\n        with step('[Verify] Check open [Default] title designer'):\n            # Verify Step\n            check_selected_object = title_designer_page.get_title_text_content()\n            if check_selected_object == 'My Title':\n                selected_title_content = True\n            else:\n                selected_title_content = False\n\n            check_caption_bar_content = title_designer_page.get_full_title()\n            if check_caption_bar_content == 'Title Designer | Default':\n                check_caption_bar = True\n            else:\n                check_caption_bar = False\n\n        assert selected_title_content and check_caption_bar, f'Open [Default] title designer failed! text content: {check_selected_object} ({check_selected_object}), caption bar: {check_caption_bar_content} ({check_caption_bar_content})'"
    },
    {
        "name": "test_title_designer_func_4_2",
        "tags": [
            "title_designer_func",
            "title_designer",
            "title"
        ],
        "marked_name": "[test_title_designer_func_4_2] Modify Text Title Content",
        "description": [
            "1. Fold Font Face tab and switch to Express mode",
            "2. Input text to title ('ÆÂÇÐÉÑ ØÜ Ýåþðìü')",
            "3. Check if input text is correct"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.title\n    @pytest.mark.name('[test_title_designer_func_4_2] Modify Text Title Content')\n    def test_title_designer_func_4_2(self):\n    '''\n        1. Fold Font Face tab and switch to Express mode\n        2. Input text to title ('ÆÂÇÐÉÑ ØÜ Ýåþðìü')\n        3. Check if input text is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_1\"\n        self.ensure_dependency(dependency_test)\n\n        # if Font Face is already unfold, click arrow to fold\n        title_designer_page.unfold_object_font_face_tab(0)\n\n        # [L133] 3.2 Title Designer > Modify > Input text case\n        # with uuid(\"12487b29-26d5-469a-8b57-64cb21a89679\") as case:\n        # Express mode\n        title_designer_page.switch_mode(1)\n\n        with step('[Action] Input text to title designer'):\n            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)\n            main_page.mouse.click(*canvas_elem.center)\n            main_page.double_click()\n            title_designer_page.edit_object_title('ÆÂÇÐÉÑ ØÜ Ýåþðìü')\n\n        # Verify step\n        check_selected_object = title_designer_page.get_title_text_content()\n\n        assert check_selected_object == 'ÆÂÇÐÉÑ ØÜ Ýåþðìü', f'Input text failed! Expected: ÆÂÇÐÉÑ ØÜ Ýåþðìü, Actual: {check_selected_object}'"
    },
    {
        "name": "test_title_designer_func_4_3",
        "tags": [
            "title_designer_func",
            "title_designer",
            "title"
        ],
        "marked_name": "[test_title_designer_func_4_3] Set Text to Two line > Set Font /Paragraph > Check if Font /Paragraph is set correctly by GT > Check if able to switch mode with applied effect correctly",
        "description": [
            "1. Set Text to Two line",
            "2. Set Font /Paragraph",
            "3. Check if Font /Paragraph is set correctly by GT",
            "4. Check if able to switch mode with applied effect correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.title\n    @pytest.mark.name('[test_title_designer_func_4_3] Set Text to Two line > Set Font /Paragraph > Check if Font /Paragraph is set correctly by GT > Check if able to switch mode with applied effect correctly')\n    def test_title_designer_func_4_3(self):\n    '''\n        1. Set Text to Two line\n        2. Set Font /Paragraph\n        3. Check if Font /Paragraph is set correctly by GT\n        4. Check if able to switch mode with applied effect correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_2\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Text to Two line'):\n            title_text_elem = main_page.exist(L.title_designer.area.edittext_text_content)\n            main_page.mouse.click(*title_text_elem.center)\n            main_page.press_enter_key()\n            main_page.input_text('AWR')\n\n\n        # [L137] 3.2 Title Designer > Set in [Object] > Font /Paragraph\n        # with uuid(\"7b458139-00b3-4178-a4f6-8515fc581f6a\") as case:\n        with step('[Action] Set Font /Paragraph'):\n            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)\n            main_page.mouse.click(*canvas_elem.center)\n            main_page.double_click()\n            # Set font\n            title_designer_page.set_font_type('IM FELL DW Pica SC Regular')\n\n            # Set size\n            title_designer_page.set_font_size('36')\n\n            # Set line spacing amount\n            title_designer_page.set_line_spacing_amount('-8')\n\n            # Set text spacing amount\n            title_designer_page.set_text_spacing_amount('5')\n\n            # Set font face color\n            title_designer_page.set_font_face_color('120', '83', '236')\n\n            # Set kerning\n            title_designer_page.set_kerning_check()\n\n            # Set align\n            title_designer_page.set_align(2)\n        express_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n        with step('[Verify] Check if Font /Paragraph is set correctly by GT'):\n            # [L135] 3.2 Title Designer > Switch to Advanced mode\n            # with uuid(\"9337d05d-e71b-452b-88ed-accf281de8f5\") as case:\n\n            # Advanced mode\n            title_designer_page.switch_mode(2)\n\n            advance_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,\n                                                    file_name=Auto_Ground_Truth_Folder + 'L135.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L135.png',\n                                                    advance_mode_preview)\n            \n            # close font/ paragraph tab\n            title_designer_page.unfold_object_font_face_tab(0)\n            \n            if not compare_result:\n                assert False, \"Font /Paragraph is not set correctly by GT (L135.png)!\"\n\n        with step('[Verify] Check if switch mode with applied effect correctly'):\n            # express mode\n            compare_switch_advance_mode = main_page.compare(advance_mode_preview, express_mode_preview)\n            title_designer_page.switch_mode(1)\n            back_express_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            compare_express = main_page.compare(back_express_mode_preview, express_mode_preview)\n            if compare_switch_advance_mode:\n                assert False, \"Switch to Advanced mode with applied effect failed!\"\n            if not compare_express:\n                assert False, \"Switch back to Express mode with applied effect failed!\"\n            assert True"
    },
    {
        "name": "test_title_designer_func_4_4",
        "tags": [
            "title_designer_func",
            "title_designer",
            "title",
            "preset"
        ],
        "marked_name": "[test_title_designer_func_4_4] Apply Character Presets",
        "description": [
            "1. Apply Character Presets",
            "2. Check if apply preset correctly by Preview window"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.title\n    @pytest.mark.preset\n    @pytest.mark.name('[test_title_designer_func_4_4] Apply Character Presets')\n    def test_title_designer_func_4_4(self):\n    '''\n        1. Apply Character Presets\n        2. Check if apply preset correctly by Preview window\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L136] 3.2 Title Designer > Set in [Object] > Character Presets\n        # with uuid(\"917276cd-2119-4f6e-a94b-10d03795a2cf\") as case:\n\n        preset_ori = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n        # Apply preset 10\n        title_designer_page.apply_character_presets(9)\n\n        with step('[Verify] Check if preview changed correctly after applied preset 10 by preview window'):\n            # Check preview change\n            preset_x = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            compare_preset_x = main_page.compare(preset_x, preset_ori, similarity=0.7)\n            different_preset_x = not main_page.compare(preset_x, preset_ori, similarity=0.985)\n            if not (compare_preset_x and different_preset_x):\n                assert False, \"Preview not changed after applied preset 10 by preview window! Similarity should be in 0.7~0.985\"\n\n        if main_page.exist(L.title_designer.character_presets.btn_character_presets).AXValue == 1:\n            main_page.exist_click(L.title_designer.character_presets.btn_character_presets)\n            time.sleep(DELAY_TIME*1.5)\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_5",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_5] Check default backdrop type",
        "description": [
            "1. Enter Backdrop Menu",
            "2. Check if default backdrop type is Fit with title"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_5] Check default backdrop type')\n    def test_title_designer_func_4_5(self):\n    '''\n        1. Enter Backdrop Menu\n        2. Check if default backdrop type is Fit with title\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L141] 3.2 Title Designer > Set in [Object] > Backdrop\n        # with uuid(\"09c9be51-6a81-4087-9df3-fdd9af36cf60\") as case:\n        with step('[Action] Enter Backdrop'):\n            title_designer_page.backdrop.set_checkbox(bApply=1)\n            title_designer_page.backdrop.set_unfold_tab()\n            \n        # Verify 1: Check apply type (Fit with title)\n        with step('[Verify] Check the default backdrop type'):\n            get_backdrop_type= title_designer_page.backdrop.get_type()\n            if get_backdrop_type != 2:\n                assert False, f'Backdrop type is not default! Expected: 2, Actual: {get_backdrop_type}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_6",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_6] Set backdrop type to Solid background bar",
        "description": [
            "1. Set backdrop type to Solid background bar"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_6] Set backdrop type to Solid background bar') \n    def test_title_designer_func_4_6(self):\n    '''\n        1. Set backdrop type to Solid background bar\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_5\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Set backdrop type to Solid background bar (1)'):\n            # Switch backdrop type (Solid background bar)\n            title_designer_page.backdrop.set_type(1)\n\n        with step('[Verify] Check if width is disabled due to backdrop type is Solid background bar'):\n            # Verify 2: Check width disable\n            check_width_disable_result = title_designer_page.backdrop.check_width_disable()\n            assert check_width_disable_result, \"Width is not disabled after set backdrop type as Solid background bar!\""
    },
    {
        "name": "test_title_designer_func_4_7",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_7] Adjust Height value w & w/o maintain aspect ratio",
        "description": [
            "1. Adjust Height value w maintain aspect ratio",
            "2. Adjust Height value w/o maintain aspect ratio"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_7] Adjust Height value w & w/o maintain aspect ratio')\n    def test_title_designer_func_4_7(self):\n    '''\n        1. Adjust Height value w maintain aspect ratio\n        2. Adjust Height value w/o maintain aspect ratio\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Adjust Height value'):\n            # Adjust Height value\n            title_designer_page.backdrop.height.value.adjust_slider(1.73)\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check Height value'):\n            # Check Height value\n            get_height_value = title_designer_page.backdrop.height.value.get_value()\n            if get_height_value != '1.73':\n                assert False, f'Height value is not set correctly! Expected: 1.73, Actual: {get_height_value}'\n\n        with step('[Action] Adjust Height value w/o maintain aspect ratio'):\n            # Un-tick maintain aspect ratio\n            title_designer_page.backdrop.set_maintain_aspect_ratio(0)\n            title_designer_page.backdrop.height.value.click_arrow(0, 8)\n        \n        with step('[Verify] Check Height/ Width value w/o maintain aspect ratio'):\n            # Check Height value\n            get_height_value = title_designer_page.backdrop.height.value.get_value()\n            if get_height_value != '1.81':\n                assert False, f'Height value is not set correctly! Expected: 1.81, Actual: {get_height_value}'\n\n            # Check Width value\n            get_width_value = title_designer_page.backdrop.width.value.get_value()\n            if get_width_value != '1.73':\n                assert False, f'Width value is not set correctly! Expected: 1.73, Actual: {get_width_value}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_8",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_8] Set Color > Set Opacity by textbox and slider",
        "description": [
            "1. Set Color",
            "2. Set Opacity by textbox and check value",
            "3. Set Opacity by slider and check value"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_8] Set Color > Set Opacity by textbox and slider')\n    def test_title_designer_func_4_8(self):\n    '''\n        1. Set Color\n        2. Set Opacity by textbox and check value\n        3. Set Opacity by slider and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Color'):\n            # Set uniform color\n            title_designer_page.backdrop.apply_uniform_color('#3f24b2')\n\n        with step('[Action] Set Opacity by textbox'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            # Set opacity\n            title_designer_page.backdrop.opacity.value.set_value(88)\n\n        with step('[Verify] Check Opacity value (Modified by textbox)'):\n            get_opacity = title_designer_page.backdrop.opacity.value.get_value()\n            if get_opacity != '88':\n                assert False, f'Opacity value is not set correctly (Modified by textbox)! Expected: 88, Actual: {get_opacity}'\n        \n        with step('[Action] Adjust Opacity by slider'):\n            title_designer_page.backdrop.opacity.value.adjust_slider(95)\n\n        with step('[Verify] Check Opacity value (Modified by slider)'):\n            get_opacity = title_designer_page.backdrop.opacity.value.get_value()\n            if get_opacity != '95':\n                assert False, f'Opacity value is not set correctly (Modified by slider)! Expected: 95, Actual: {get_opacity}'\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_9",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_9] Adjust Offset Y",
        "description": [
            "1. Adjust Offset X and check value"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_9] Adjust Offset Y')\n    def test_title_designer_func_4_9(self):\n    '''\n        1. Adjust Offset X and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Adjust Offset Y'):\n            # Adjust offset Y to -0.809\n            title_designer_page.backdrop.offset_y.value.set_value('-0.809')\n\n        with step('[Verify] Check Offset Y value'):\n            # Check offset Y value\n            get_offset_y = title_designer_page.backdrop.offset_y.value.get_value()\n            assert get_offset_y=='-0.809', f'Offset Y value is not set correctly! Expected: -0.809, Actual: {get_offset_y}'"
    },
    {
        "name": "test_title_designer_func_4_10",
        "tags": [
            "title_designer_func",
            "title_designer",
            "backdrop"
        ],
        "marked_name": "[test_title_designer_func_4_10] Set backdrop type to Ellipse",
        "description": [
            "1. Set backdrop type to Ellipse"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.backdrop\n    @pytest.mark.name('[test_title_designer_func_4_10] Set backdrop type to Ellipse')\n    def test_title_designer_func_4_10(self):\n    '''\n        1. Set backdrop type to Ellipse\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_9\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set backdrop type to Ellipse (2,1)'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(0.67)\n            type_sloid = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Switch backdrop type (Fit with title) > Ellipse\n            title_designer_page.backdrop.set_type(2,1)\n            type_ellipse = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n        \n        with step('[Verify] Check backdrop type is changed'):\n            different_type_result = not main_page.compare(type_ellipse, type_sloid, similarity=0.99999)\n            if not different_type_result:\n                assert False, \"Backdrop type is not changed after set backdrop type as Ellipse!\"\n\n        with step('[Action] Set to Initial Condition'):\n            title_designer_page.backdrop.set_type(1)\n            # fold tab\n            title_designer_page.backdrop.set_unfold_tab(unfold=0)\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_11",
        "tags": [
            "title_designer_func",
            "title_designer",
            "title",
            "font_face_color"
        ],
        "marked_name": "[test_title_designer_func_4_11] Apply Font Settings (Insert New > Size/ Font/ Color/ Space/ Kerning)",
        "description": [
            "1. Set font settings and check if set correctly",
            "2. Insert new title and set font settings and check if set correctly",
            "3. Check if font settings are set correctly as GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.title\n    @pytest.mark.font_face_color\n    @pytest.mark.name('[test_title_designer_func_4_11] Apply Font Settings (Insert New > Size/ Font/ Color/ Space/ Kerning)')\n    def test_title_designer_func_4_11(self):\n    '''\n        1. Set font settings and check if set correctly\n        2. Insert new title and set font settings and check if set correctly\n        3. Check if font settings are set correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_10\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Font settings'):\n            # Set font face color\n            title_designer_page.set_check_font_face(bCheck=1)\n            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            title_designer_page.set_font_face_color('128', '215', '144')\n            applied_color = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_img, applied_color, similarity=0.98):\n                assert False, \"Font face color is not set correctly!\"\n\n            # Set font\n            title_designer_page.set_font_type('Barbaro')\n            applied_font = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(applied_color, applied_font, similarity=0.98):\n                assert False, \"Font is not set correctly!\"\n\n            # Disable Border (no verfiy step due to might be disabled)\n            title_designer_page.apply_border(bApply=0)\n            \n            # Disable Shadow + fold tab (no verfiy step due to might be disabled)\n            title_designer_page.set_check_shadow(bCheck=0)\n            title_designer_page.unfold_object_shadow_tab(unfold=0)\n\n\n        # [L134] 3.2 Title Designer > Insert new title\n        # with uuid(\"3675bbb6-5abb-4a0c-80a4-f17f0b55b590\") as case:\n        with step('[Action] Insert new title adn set font settings'):\n            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            title_designer_page.insert_title(' suiod fw5')\n            added_text = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_img, added_text, similarity=0.98):\n                assert False, \"Insert new title failed!\"\n\n            # Set size\n            title_designer_page.set_font_size('88')\n            size_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(added_text, size_changed, similarity=0.98):\n                assert False, \"Font size is not set correctly!\"\n\n            # Title font: Mystery Quest\n            title_designer_page.set_font_type('Mystery Quest')\n            font_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(size_changed, font_changed, similarity=0.98):\n                assert False, \"Font is not set correctly!\"\n\n            # Set font face color\n            title_designer_page.set_font_face_color('255', '27', '169')\n            color_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(font_changed, color_changed, similarity=0.995):\n                assert False, \"Font face color is not set correctly!\"\n\n            # Set line spacing amount\n            title_designer_page.set_line_spacing_amount('0')\n            line_spacing_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Set text spacing amount\n            title_designer_page.set_text_spacing_amount('0')\n            text_spacing_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(line_spacing_changed, text_spacing_changed, similarity=0.98):\n                assert False, \"Text spacing amount is not set correctly!\"\n\n            # Set kerning (No verfiy step due to might be disabled at first)\n            title_designer_page.set_kerning_check(0)\n\n        with step('[Verify] Check if font settings are set correctly as GT'):\n            time.sleep(DELAY_TIME*2)\n            second_title_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,\n                                                        file_name=Auto_Ground_Truth_Folder + 'L134.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L134.png',\n                                                second_title_preview)\n            assert compare_result, \"Font settings are not set correctly as GT! But preview changed step by step when applying effect\""
    },
    {
        "name": "test_title_designer_func_4_12",
        "tags": [
            "title_designer_func",
            "title_designer",
            "title",
            "shadow",
            "save_template"
        ],
        "marked_name": "[test_title_designer_func_4_12] Adjust Shadow settings -- Distance/ Blur/ Opacity/ Fill Shadow/ Direction",
        "description": [
            "1. Enable Shadow",
            "2. Adjust Shadow settings -- Distance (Slider + Arrow) and check preview",
            "3. Adjust Shadow settings -- Blur (Textbox + Arrow) and check preview",
            "4. Adjust Shadow settings -- Opacity (Slider + Arrow) and check preview",
            "5. Adjust Shadow settings -- Fill Shadow (Slider + Arrow) and check preview",
            "6. Adjust Shadow settings -- Direction (Slider + Arrow) and check preview",
            "7. Check if shadow settings are set correctly by GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.title\n    @pytest.mark.shadow\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_title_designer_func_4_12] Adjust Shadow settings -- Distance/ Blur/ Opacity/ Fill Shadow/ Direction')\n    def test_title_designer_func_4_12(self):\n    '''\n        1. Enable Shadow\n        2. Adjust Shadow settings -- Distance (Slider + Arrow) and check preview\n        3. Adjust Shadow settings -- Blur (Textbox + Arrow) and check preview\n        4. Adjust Shadow settings -- Opacity (Slider + Arrow) and check preview\n        5. Adjust Shadow settings -- Fill Shadow (Slider + Arrow) and check preview\n        6. Adjust Shadow settings -- Direction (Slider + Arrow) and check preview\n        7. Check if shadow settings are set correctly by GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_11\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L140] 3.2 Title Designer > Set in [Object] > Shadow\n        # with uuid(\"cbe24c99-189b-4ce8-8255-16fd4f25e5a5\") as case:\n        with step('[Action] Enable Shadow'):\n            # unfold tab\n            title_designer_page.unfold_object_shadow_tab()\n\n            # Set Shadow\n            title_designer_page.apply_shadow(bApply=1)\n\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n\n        with step('[Action] Adjust Shadow settings -- Distance (Slider + Arrow)'):\n            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Set distance = 32.5 by slider and arrow\n            title_designer_page.drag_shadow_distance_slider('32')\n            distance_changed_slider = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(before_img, distance_changed_slider, similarity=0.998):\n                assert False, \"Shadow distance is not set correctly by slider!\"\n\n            for _ in range(5):\n                title_designer_page.click_shadow_distance_arrow_btn(0)\n                time.sleep(DELAY_TIME*0.5)\n            distance_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(distance_changed_slider, distance_changed_arrow, similarity=0.9999):\n                assert False, \"Shadow distance is not set correctly by arrow!\"\n\n        with step('[Action] Adjust Shadow settings -- Blur (Textbox + Arrow)'):\n            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Set blur = 15\n            title_designer_page.input_shadow_blur_value('16')\n            blur_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(before_img, blur_changed_textbox, similarity=0.998):\n                assert False, \"Shadow blur is not set correctly by textbox!\"\n\n            title_designer_page.click_shadow_blur_arrow_btn(1)\n            blur_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(blur_changed_textbox, blur_changed_arrow, similarity=0.9999):\n                assert False, \"Shadow blur is not set correctly by arrow!\"\n\n        with step('[Action] Adjust Shadow settings -- Opacity (Slider + Arrow)'):\n            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Set opacity = 87\n            title_designer_page.drag_shadow_opacity_slider('19')\n            opacity_changed_slider = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(before_img, opacity_changed_slider, similarity=0.998):\n                assert False, \"Shadow opacity is not set correctly by slider!\"\n\n            title_designer_page.input_shadow_opacity_value('87')\n            opacity_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(opacity_changed_slider, opacity_changed_textbox, similarity=0.998):\n                assert False, \"Shadow opacity is not set correctly by textbox!\"\n\n        with step('[Action] Adjust Shadow settings -- Fill Shadow (Slider + Arrow)'):\n            # Set fill shadow = 0\n            title_designer_page.set_check_shadow_fill_shadow(bCheck=0)\n            title_designer_page.set_shadow_fill_shadow_color('105','250', '5')\n            no_fill_shadow_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Set fill shadow = 1\n            title_designer_page.set_check_shadow_fill_shadow(bCheck=1)\n            title_designer_page.set_shadow_fill_shadow_color('33', '134', '215')\n            fill_shadow_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Check preview change\n            compare_fill_preview = main_page.compare(no_fill_shadow_preview, fill_shadow_preview, similarity=0.94)\n            different_fill = not main_page.compare(no_fill_shadow_preview, fill_shadow_preview, similarity=0.99)\n\n            assert compare_fill_preview and different_fill, \"Fill shadow is not set correctly! similar should be 0.94~0.99\"\n\n        with step('[Action] Adjust Shadow settings -- Direction (Slider + Arrow)'):\n            ori_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Set distance = 76.8\n            title_designer_page.input_shadow_distance_value('76.8')\n            distance_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_preview, distance_changed_textbox, similarity=0.998):\n                assert False, \"Shadow distance is not set correctly by textbox!\"\n\n            # Set shadow direction = 125\n            title_designer_page.input_shadow_direction_value('130')\n            direction_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(distance_changed_textbox, direction_changed_textbox, similarity=0.998):\n                assert False, \"Shadow direction is not set correctly by textbox!\"\n\n            title_designer_page.click_shadow_direction_arrow_btn(0)\n            for _ in range(6):\n                title_designer_page.click_shadow_direction_arrow_btn(1)\n            distance_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(direction_changed_textbox, distance_changed_arrow, similarity=0.9999):\n                assert False, \"Shadow direction is not set correctly by arrow!\"\n\n        with step('[Verify] Check if shadow settings are set correctly as GT'):\n            main_page.move_mouse_to_0_0()\n            time.sleep(DELAY_TIME)\n            check_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,\n                                                        file_name=Auto_Ground_Truth_Folder + 'L140.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L140.png',\n                                                check_preview)\n            if not compare_result:\n                assert False, \"Shadow settings are not set correctly as GT (L140)! Preview changed step by step when applying effect\"\n        \n        with step('[Action] Set to Initial Condition'):\n            # fold tab\n            title_designer_page.unfold_object_shadow_tab(unfold=0)\n\n        with step('[Action] Save Template'):\n            # Save Template\n            title_designer_page.save_as_name('test_title_designer_func_4_12', click_ok=1)\n\n            # Close title designer\n            title_designer_page.click_ok()\n            time.sleep(DELAY_TIME * 2)\n\n\n        \n        assert True"
    },
    {
        "name": "test_title_designer_func_4_13",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "launch"
        ],
        "marked_name": "[test_title_designer_func_4_13] Reopen AP and add saved template",
        "description": [
            "1. Reopen AP and enter Title Room",
            "2. Open [Custom] template \"test_title_designer_func_4_12\""
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.launch\n    @pytest.mark.name('[test_title_designer_func_4_13] Reopen AP and add saved template')\n    def test_title_designer_func_4_13(self):\n    '''\n        1. Reopen AP and enter Title Room\n        2. Open [Custom] template \"test_title_designer_func_4_12\"\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Relaunch AP and enter Title Room'):\n            # relaunch APP\n            main_page.close_app()\n            main_page.start_app()\n\n            # enter Title Room\n            main_page.enter_room(1)\n\n        with step('[Action] Open [Custom] template \"test_title_designer_func_4_12\"'):\n\n            # Custom template\n            if not main_page.select_LibraryRoom_category('Custom'): \n                assert False, \"Select [Custom] category failed!\"\n\n            # Select 1st Custom teplate \"test_title_designer_func_4_12\"\n            main_page.select_library_icon_view_media('test_title_designer_func_4_12')\n            main_page.double_click()\n            time.sleep(DELAY_TIME * 4) # wait for loading\n        \n        assert True # if unable to found the template, the test will be failed when searching"
    },
    {
        "name": "test_title_designer_func_4_14",
        "tags": [
            "title_designer_func",
            "title_designer",
            "canva"
        ],
        "marked_name": "[test_title_designer_func_4_14] Manual Adjust on canvas -- Resize and Rotate",
        "description": [
            "1. Manual adjust on canvas -- Resize and Rotate",
            "2. Enter Advance mode and reach panel",
            "3. Check Adjusted width/ height/ rotate value"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.canva\n    @pytest.mark.name('[test_title_designer_func_4_14] Manual Adjust on canvas -- Resize and Rotate')\n    def test_title_designer_func_4_14(self):\n    '''\n        1. Manual adjust on canvas -- Resize and Rotate\n        2. Enter Advance mode and reach panel\n        3. Check Adjusted width/ height/ rotate value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L149] 3.2 Title Designer > Manually adjust on canvas\n        # with uuid(\"f54750cd-3f0e-463f-8b05-8b84ba456351\") as case:\n\n        with step('[Action] Manually adjust on canvas -- Resize and Rotate'):\n            # Resize\n            title_designer_page.adjust_title_on_canvas.resize_to_small(x=5, y=3)\n            time.sleep(DELAY_TIME * 2)\n            # Rotate\n            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise('45')\n\n        with step('[Action] Enter Advance mode and reach panel'):\n            # Switch to Advance mode\n            title_designer_page.switch_mode(2)\n            time.sleep(DELAY_TIME)\n\n            # Unfold Object\n            title_designer_page.unfold_object_object_setting_tab()\n            title_designer_page.drag_object_vertical_slider(0.757)\n\n        with step('[Verify] Check width value'):\n            # Verify step\n            check_scale_width_value = title_designer_page.get_object_setting_scale_width_value()\n            if float(check_scale_width_value) >= 1:\n                assert False, f'Width value is not set correctly! Expected: < 1, Actual: {check_scale_width_value}'\n\n        with step('[Verify] Check height value'):\n            check_scale_height_value = title_designer_page.get_object_setting_scale_height_value()\n            if float(check_scale_height_value) >= 1:\n                assert False, f'Height value is not set correctly! Expected: < 1, Actual: {check_scale_height_value}'\n\n        with step('[Verify] Check rotate value'):\n            check_rotate_value = title_designer_page.get_object_setting_rotation_value()\n            if float(check_rotate_value) <= 50:\n                assert False, f'Rotate value is not set correctly! Expected: > 50, Actual: {check_rotate_value}'\n\n        # close app due to the section is completed\n        main_page.close_app()\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_15",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "timeline",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_15] Add keyframe on Position/ Scale/ Opacity/ Rotation",
        "description": [
            "1. Add keyframe on Position/ Scale/ Opacity/ Rotation",
            "2. Check if keyframe settings are set correctly as GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timeline\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_15] Add keyframe on Position/ Scale/ Opacity/ Rotation')\n    def test_title_designer_func_4_15(self):\n    '''\n        1. Add keyframe on Position/ Scale/ Opacity/ Rotation\n        2. Check if keyframe settings are set correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        # Start a new section, starts from \"test_title_designer_func_4_1\"\n        self.test_title_designer_func_4_1()\n\n        # [L142] 3.2 Title Designer > Object Settings\n        # with uuid(\"adfdbb15-9d4a-4338-be3a-39d0922f896a\") as case:\n\n        with step('[Action] Enter Advanced mode'):\n            title_designer_page.switch_mode(2)\n\n        with step('[Action] Add First Position keyframe at (00:00)'):\n            # Add position 1st keyframe\n            title_designer_page.click_object_setting_position_add_keyframe_control()\n\n        with step('[Action] Add Second Position keyframe at (09:00) and adjust value'):\n            title_designer_page.set_timecode('00_00_09_00')\n            title_designer_page.input_object_setting_x_position_value('0.24')\n            title_designer_page.input_object_setting_y_position_value('0.935')\n\n        with step('[Action] Switch to previous keyframe (00:00)'):\n            title_designer_page.click_object_setting_position_previous_keyframe()\n\n        with step('[Action] Add First Scale keyframe at (00:00)'):\n            # Add scale 1st keyframe\n            title_designer_page.click_object_setting_scale_add_keyframe_control()\n\n        with step('[Action] Add Second Scale keyframe at (08:00) and adjust value'):\n            title_designer_page.set_timecode('00_00_08_00')\n            # Add position 2nd keyframe\n            title_designer_page.input_object_setting_scale_height_value('1.64')\n\n        with step('[Action] Add First Opacity keyframe at (08:00)'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            # Add opacity keyframe\n            title_designer_page.click_object_setting_opacity_add_keyframe_control()\n        \n        with step('[Action] Add Second Opacity keyframe at (03:00) and adjust value'):\n            # Add 2nd keyframe\n            title_designer_page.set_timecode('00_00_03_00')\n            title_designer_page.drag_object_setting_opacity_slider('59')\n\n        with step('[Action] Add First Rotation keyframe and adjust value'):\n            title_designer_page.drag_object_vertical_slider(1)\n            # Add rotate keyframe\n            title_designer_page.input_object_setting_rotation_value('60')\n            title_designer_page.click_object_setting_rotation_add_keyframe_control()\n\n        with step('[Action] Add Second Rotation keyframe at (09:00) and adjust value'):\n            # Add 2nd keyframe\n            title_designer_page.set_timecode('00_00_09_00')\n            title_designer_page.input_object_setting_rotation_value('260')\n\n        with step('[Verify] Check if keyframe settings are set correctly as GT'):\n            with step('[Action] Initialize preview'):\n                # scroll simple track (scroll bar)\n                title_designer_page.drag_simple_track_vertical_slider(0.97)\n                title_designer_page.set_timecode('00_00_08_00')\n\n            # Verify preview\n            time.sleep(DELAY_TIME)\n            check_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,\n                                                file_name=Auto_Ground_Truth_Folder + 'L142.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L142.png', check_preview, similarity=0.9)\n            assert compare_result, \"Keyframe settings are not set correctly as GT (L142)!\""
    },
    {
        "name": "test_title_designer_func_4_16",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "ease_in_out",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_16] Add Ease In/ Out on Scale keyframe",
        "description": [
            "1. Adjust Ease in on Second Scale keyframe and check value",
            "2. Adjust Ease out on First Scale keyframe and check value"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.ease_in_out\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_16] Add Ease In/ Out on Scale keyframe')\n    def test_title_designer_func_4_16(self):\n    '''\n        1. Adjust Ease in on Second Scale keyframe and check value\n        2. Adjust Ease out on First Scale keyframe and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_15\"\n        self.ensure_dependency(dependency_test)\n\n        # [L143] 3.2 Title Designer > Object Settings > Ease in / Ease out work\n        # with uuid(\"94d981a1-511c-44b0-996f-ec255d2ce28a\") as case:\n\n        with step('[Action] Adjust Ease in on Second Scale keyframe'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(0.65)\n            time.sleep(DELAY_TIME)\n            # Set Ease in on Scale keyframe\n            title_designer_page.set_check_object_setting_scale_ease_in()\n            title_designer_page.drag_object_setting_scale_ease_in_slider(0.71)\n            check_ease_in_value = title_designer_page.get_object_setting_scale_ease_in_value()\n            if float(check_ease_in_value) != 0.71:\n                assert False, f'Ease in value is not set correctly! Expected: 0.71, Actual: {float(check_ease_in_value)}'\n\n        with step('[Action] Adjust Ease out on First Scale keyframe'):\n            # click previous keyframe\n            title_designer_page.click_object_setting_scale_previous_keyframe()\n\n            # Set Ease out on Scale keyframe\n            title_designer_page.set_check_object_setting_scale_ease_out()\n            title_designer_page.drag_object_setting_scale_ease_out_slider(0.83)\n            check_ease_out_value = title_designer_page.get_object_setting_scale_ease_out_value()\n            if float(check_ease_out_value) != 0.83:\n                assert False, f'Ease out value is not set correctly! Expected: 0.83, Actual: {float(check_ease_out_value)}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_17",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "ease_in_out",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_17] Reset Scale/ Position keyframe",
        "description": [
            "1. Reset Scale keyframe and check if reset",
            "2. Reset Position keyframe and check if reset"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.ease_in_out\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_17] Reset Scale/ Position keyframe')\n    def test_title_designer_func_4_17(self):\n    '''\n        1. Reset Scale keyframe and check if reset\n        2. Reset Position keyframe and check if reset\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_16\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reset Scale keyframe'):\n            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Reset Scale keyframe\n            title_designer_page.click_object_setting_scale_reset_keyframe_control()\n            time.sleep(DELAY_TIME*2)\n            # Click [Yes] when pop up waring (This operation will reset all keyframe ...)\n            main_page.exist_click(L.title_designer.backdrop.warning.btn_yes)\n\n        with step('[Verify] Check if Scale keyframe is reset'):\n            reseted_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_img, reseted_img, similarity=0.98):\n                assert False, \"Scale keyframe is not reset!\"\n            \n        with step('[Action] Reset Position keyframe'):\n            # scroll upper (scroll bar)\n            title_designer_page.drag_object_vertical_slider(0.52)\n            time.sleep(DELAY_TIME)\n\n            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Reset Position keyframe\n            title_designer_page.click_object_setting_position_reset_keyframe_control()\n\n            # Click [Yes] when pop up waring (This operation will reset all keyframe ...)\n            main_page.exist_click(L.title_designer.backdrop.warning.btn_yes)\n\n        with step('[Verify] Check if Position keyframe is reset'):\n            reseted_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_img, reseted_img, similarity=0.98):\n                assert False, \"Position keyframe is not reset!\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_18",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "ease_in_out",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_18] Ease out on Rotation keyframe",
        "description": [
            "1. Set Ease out on Rotation keyframe",
            "2. Check if keyframe settings are set correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.ease_in_out\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_18] Ease out on Rotation keyframe')\n    def test_title_designer_func_4_18(self):\n    '''\n        1. Set Ease out on Rotation keyframe\n        2. Check if keyframe settings are set correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Ease out on First Rotation keyframe'):\n\n            # click next keyframe\n            title_designer_page.click_object_setting_rotation_next_keyframe()\n\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            time.sleep(DELAY_TIME)\n\n            # Set Ease out on Rotation keyframe\n            title_designer_page.set_check_object_setting_rotation_ease_out()\n            title_designer_page.input_object_setting_rotation_ease_out_value('0.75')\n\n        with step('[Verify] Check if keyframe settings are set correctly'):\n            check_ease_out_value = title_designer_page.get_object_setting_rotation_ease_out_value()\n            assert float(check_ease_out_value) == 0.75, f'Ease out value is not set correctly! Expected: 0.75, Actual: {float(check_ease_out_value)}'"
    },
    {
        "name": "test_title_designer_func_4_19",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "timeline",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_19] Switch to next/ previous keyframe",
        "description": [
            "1. Switch to next keyframe on Opacity keyframe",
            "2. Check if switch to correct keyframe (08:00)",
            "3. Switch to previous keyframe on Rotation keyframe",
            "4. Check if switch to correct keyframe (03:00)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timeline\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_19] Switch to next/ previous keyframe')\n    def test_title_designer_func_4_19(self):\n    '''\n        1. Switch to next keyframe on Opacity keyframe\n        2. Check if switch to correct keyframe (08:00)\n        3. Switch to previous keyframe on Rotation keyframe\n        4. Check if switch to correct keyframe (03:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L341] 3.2 Title Designer > Object Settings > Simple timeline Add / Remove / Switch keyframe\n        # with uuid(\"ad107e46-3c92-4dcd-b68c-0d7122e36b04\") as case:\n\n        with step('[Action] Switch to next keyframe on Opacity keyframe'):\n            # Check 2nd Title on simple track\n            # Current timecode = 00:00:03:00\n            title_designer_page.drag_simple_track_vertical_slider(1)\n\n            # Click simple track : Opacity next keyframe\n            title_designer_page.click_simple_track_opacity_next_keyframe(track_no=3)\n\n        with step('[Verify] Check if switch to correct keyframe (08:00)'):\n            # Verify next keyframe button\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:08:00':\n                assert False, f'Next keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'\n\n        with step('[Action] Switch to previous keyframe on Rotation keyframe'):\n            # Click simple track : Rotation previous keyframe\n            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=4)\n\n        with step('[Verify] Check if switch to correct keyframe (03:00)'):\n            # Verify previous keyframe button\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:03:00':\n                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:03:00, Actual: {current_time_code}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_20",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "timeline",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_20] Click [Previous] keyframe when no previous keyframe",
        "description": [
            "1. Cancel Opacity keyframe at (03:00) by click again",
            "2. Jumps to 08:00 and click [Previous] keyframe",
            "3. Check if stay in 08:00 correctly (No previous keyframe)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timeline\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_20] Click [Previous] keyframe when no previous keyframe')\n    def test_title_designer_func_4_20(self):\n    '''\n        1. Cancel Opacity keyframe at (03:00) by click again\n        2. Jumps to 08:00 and click [Previous] keyframe\n        3. Check if stay in 08:00 correctly (No previous keyframe)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Cancel Opacity keyframe at (03:00) by click again'):\n            # Click simple track : Opacity keyframe [Reset] on the 3s keyframe\n            title_designer_page.click_simple_track_opacity_keyframe_control(track_no=3)\n            time.sleep(DELAY_TIME*2)\n\n        with step('[Action] Jumps to 08:00 and click [Previous] keyframe'):\n            # Jump to 8s keyframe > Then click [Previous] keyframe to check previous keyframe\n            current_time_code = title_designer_page.set_timecode('00_00_08_00')\n            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=3)\n\n        with step('[Verify] Check if stay in 08:00 correctly (No previous keyframe)'):\n            # Verify  keyframe Reset button\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:08:00':\n                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_21",
        "tags": [
            "title_designer_func",
            "title_designer",
            "keyframe",
            "timeline",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_21] Add Opacity keyframe at (09:00) and click [Previous] keyframe",
        "description": [
            "1. Add Opacity keyframe at (09:00)",
            "2. Click [Previous] keyframe to check previous keyframe",
            "3. Check if changed to 08:00 correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timeline\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_21] Add Opacity keyframe at (09:00) and click [Previous] keyframe')\n    def test_title_designer_func_4_21(self):\n    '''\n        1. Add Opacity keyframe at (09:00)\n        2. Click [Previous] keyframe to check previous keyframe\n        3. Check if changed to 08:00 correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_20\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Add Opacity keyframe at (09:00)'):\n            # Click simple track : Opacity keyframe [Add] for Rotation keyframe\n            title_designer_page.set_timecode('00_00_09_00')\n            title_designer_page.click_simple_track_opacity_keyframe_control(track_no=3)\n        \n        with step('[Action] Click [Previous] keyframe to check previous keyframe'):\n            # Then click [Previous] keyframe to check previous keyframe\n            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=3)\n\n        with step('[Verify] Check if changed to 08:00 correctly'):\n            # Verify  keyframe Add button\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:08:00':\n                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'\n        \n        with step('[Initialize] Close object setting tab for next test'):\n            # scroll upper (scroll bar)\n            title_designer_page.drag_object_vertical_slider(0.64)\n\n            # fold tab\n            title_designer_page.unfold_object_object_setting_tab(0)\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_22",
        "tags": [
            "title_designer_func",
            "title_designer",
            "special_effect"
        ],
        "marked_name": "[test_title_designer_func_4_22] Apply Special Effect -- LED sign",
        "description": [
            "1. Enter Special Effect tab",
            "2. Apply LED sign effect and check preview"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.special_effect\n    @pytest.mark.name('[test_title_designer_func_4_22] Apply Special Effect -- LED sign')\n    def test_title_designer_func_4_22(self):\n    '''\n        1. Enter Special Effect tab\n        2. Apply LED sign effect and check preview\n        '''\n# Ensure the dependency test is run and passed\n        # Start a new section, starts from \"test_title_designer_func_4_1\"\n        self.test_title_designer_func_4_1()\n\n        # [L144] 3.2 Title Designer > Set in [Object] > Special Effect\n        # with uuid(\"9019594e-a256-461d-9c2f-0657541e569a\") as case:\n\n        with step('[Action] Enter Advanced mode'):\n            title_designer_page.switch_mode(2)\n\n        with step('[Action] Enter Special Effect tab'):\n            # fold object setting tab if opened\n            title_designer_page.unfold_object_object_setting_tab(0)\n        \n            # unfold special effect tab if folded\n            title_designer_page.special_effects.set_unfold_tab(1)\n            time.sleep(DELAY_TIME*2)\n\n        with step('[Action] Apply LED sign effect and check preview'):\n            # Apply LED sign\n            current_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            title_designer_page.special_effects.apply_effect(4)\n\n            # Warning: Do you want to continue?\n            title_designer_page.handle_special_effect_want_to_continue(option=1)\n            led_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            is_applied_special_effect_led = not main_page.compare(current_title_preview, led_title_preview, similarity=0.995)\n            if not is_applied_special_effect_led:\n                assert False, \"LED sign effect is not applied correctly on preview window!\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_23",
        "tags": [
            "title_designer_func",
            "title_designer",
            "special_effect"
        ],
        "marked_name": "[test_title_designer_func_4_23] Check default size value and look 4 size value",
        "description": [
            "1. Check default size value",
            "2. Apply Look 4 and check size value"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.special_effect\n    @pytest.mark.name('[test_title_designer_func_4_23] Check default size value and look 4 size value')\n    def test_title_designer_func_4_23(self):\n    '''\n        1. Check default size value\n        2. Apply Look 4 and check size value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_22\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check default size value'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            time.sleep(DELAY_TIME)\n\n            # Check size value\n            get_current_value = title_designer_page.special_effects.size.value.get_value()\n            if get_current_value != '53':\n                assert False, f'Default size value is not set correctly! Expected: 53, Actual: {get_current_value}'\n\n        with step('[Action] Set to the 4th looks in LED sign'):\n            # Apply LED > Look 4\n            title_designer_page.special_effects.set_look_menu(4)\n            time.sleep(DELAY_TIME * 2)\n            # Check current size\n            get_current_value = title_designer_page.special_effects.size.value.get_value()\n            if get_current_value != '49':\n                assert False, f'Look 4 size value is not set correctly! Expected: 49, Actual: {get_current_value}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_24",
        "tags": [
            "title_designer_func",
            "title_designer",
            "special_effect"
        ],
        "marked_name": "[test_title_designer_func_4_24] Apply Electric Wave effect and adjust size and length value",
        "description": [
            "1. Apply Electric Wave effect and check preview",
            "2. Adjust size and length value and check preview"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.special_effect\n    @pytest.mark.name('[test_title_designer_func_4_24] Apply Electric Wave effect and adjust size and length value')\n    def test_title_designer_func_4_24(self):\n    '''\n        1. Apply Electric Wave effect and check preview\n        2. Adjust size and length value and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_23\"\n        self.ensure_dependency(dependency_test)\n        \n        with step('[Action] Apply Electric Wave effect'):\n            title_designer_page.set_timecode('00_00_03_00')\n            before_img = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            # Apply Electric Wave\n            title_designer_page.special_effects.apply_effect(6)\n            time.sleep(DELAY_TIME * 2)\n\n\n        with step('[Verify] Check apply effect correctly by preview'):\n            applied_electric = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            if main_page.compare(before_img, applied_electric, similarity=0.99):\n                assert False, \"Electric Wave effect is not applied correctly on preview window! Similarity should < 0.99\"\n\n        with step('[Action] Adjust size and length value'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            time.sleep(DELAY_TIME)\n            # Set size to 108\n            title_designer_page.special_effects.size.value.set_value(108)\n            # Set Length to 167\n            title_designer_page.special_effects.length.value.adjust_slider(167)\n            time.sleep(DELAY_TIME * 2)\n\n        with step('[Verify] Check if preview changed correctly'):\n            electric_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            if main_page.compare(electric_title_preview, applied_electric, similarity=0.99):\n                assert False, \"Electric Wave effect is not applied correctly on preview window! Similarity should < 0.99\"\n        \n        with step('[Initialize] Close special effect tab and save template'):\n            title_designer_page.set_timecode('00_00_00_00')\n\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            time.sleep(DELAY_TIME)\n\n            # fold special effect\n            title_designer_page.special_effects.set_unfold_tab(0)\n            time.sleep(DELAY_TIME)\n\n            # Save Template\n            title_designer_page.save_as_name('title_designer_func_4_24', click_ok=1)\n\n            # Close title designer\n            title_designer_page.click_ok()\n            time.sleep(DELAY_TIME * 2)\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_25",
        "tags": [
            "title_designer_func",
            "title_designer",
            "open_project",
            "save_template",
            "timeline",
            "in_out_animation",
            "launch"
        ],
        "marked_name": "[test_title_designer_func_4_25] Reopen AP and open saved template > Apply In animation",
        "description": [
            "1. Reopen AP and open saved template",
            "2. Enter Title Room and select saved template",
            "3. Apply In animation",
            "4. Check if preview changed correctly at (02:18)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.open_project\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.in_out_animation\n    @pytest.mark.launch\n    @pytest.mark.name('[test_title_designer_func_4_25] Reopen AP and open saved template > Apply In animation')\n    def test_title_designer_func_4_25(self):\n    '''\n        1. Reopen AP and open saved template\n        2. Enter Title Room and select saved template\n        3. Apply In animation\n        4. Check if preview changed correctly at (02:18)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_24\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reopen AP and open saved project'):\n            # main_page.close_app()\n            main_page.start_app()\n            time.sleep(DELAY_TIME)\n\n            project_name = 'Packed_Project/test_title_designer_func_4_25_from_test_intro_room_func_3_16.pdk'\n            save_name = 'Extracted_Folder/test_title_designer_func_4_25'\n            self.open_packed_project(project_name, save_name)\n\n        with step('[Action] Enter title room and select saved template'):\n            # enter Title Room\n            main_page.enter_room(1)\n\n            # Custom template\n            main_page.select_LibraryRoom_category('Custom')\n\n            # Select 1st Custom template \"title_designer_func_4_24\"\n            main_page.select_library_icon_view_media('title_designer_func_4_24')\n            main_page.double_click()\n            time.sleep(DELAY_TIME * 3)\n\n        # Current status: Open Title Designer (Advanced) and only unfold \"Font / Paragraph\"\n\n        # [L145] 3.2 Title Designer > Set Animation > Starting Effect\n        # with uuid(\"bb27103b-0bd1-4f73-9eb5-948375335ba1\") as case:\n        with step('[Action] Enter In Animation tab'):\n            # Switch to Animation tab > Unfold\n            title_designer_page.click_animation_tab()\n            title_designer_page.unfold_animation_in_animation_tab()\n            \n        with step('[Action] Apply effect'):\n\n            # Set timecode to snapshot before apply animation\n            title_designer_page.set_timecode('00_00_02_18')\n            no_in_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # title_designer_page.set_timecode('00_00_00_00')\n            # Apply In animation: Popup > Magnets II\n            title_designer_page.select_animation_in_animation_effect(4, 4)\n\n            # Warning: Do you want to continue?\n            title_designer_page.handle_special_effect_want_to_continue(option=1)\n            time.sleep(DELAY_TIME)\n\n        # check if preview changed\n        with step('[Verify] Check if preview changed correctly at (02:18)'):\n            in_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(in_animation_preview, no_in_animation_preview, similarity=0.99):\n                assert False, \"In animation effect is not applied correctly on preview window! Similarity should < 0.99\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_26",
        "tags": [
            "title_designer_func",
            "title_designer",
            "timeline",
            "in_out_animation",
            "play_video"
        ],
        "marked_name": "[test_title_designer_func_4_26] Play video by press space key and check preview",
        "description": [
            "1. Play the vedio by press space key and check if preview changed at (00:00)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.timeline\n    @pytest.mark.in_out_animation\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_designer_func_4_26] Play video by press space key and check preview')\n    def test_title_designer_func_4_26(self):\n    '''\n        1. Play the vedio by press space key and check if preview changed at (00:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_25\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Play the vedio by press space key and check if preview changed at (00:00)'):\n            title_designer_page.set_timecode('00_00_00_00')\n\n            before_play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Preview play > Pause\n            main_page.press_space_key()\n            time.sleep(DELAY_TIME*2)\n            main_page.press_space_key()\n\n            # check if preview changed\n            play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(play_preview, before_play_preview, similarity=0.98):\n                assert False, \"Not preview in animation correctly when playing the video by press space key! Similarity should < 0.98\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_27",
        "tags": [
            "title_designer_func",
            "title_designer",
            "timeline",
            "in_out_animation",
            "play_video"
        ],
        "marked_name": "[test_title_designer_func_4_27] Click Stop and check if go to (00:00)",
        "description": [
            "1. Set timecode to (02:18) and click [Stop] button",
            "2. Check if go to (00:00) after click [Stop] button"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.timeline\n    @pytest.mark.in_out_animation\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_designer_func_4_27] Click Stop and check if go to (00:00)')\n    def test_title_designer_func_4_27(self):\n    '''\n        1. Set timecode to (02:18) and click [Stop] button\n        2. Check if go to (00:00) after click [Stop] button\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_26\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] set timecode to (02:18) and click [Stop] button'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_02_18')\n            # Click [Stop]\n            title_designer_page.click_preview_operation('Stop')\n\n        with step('[Verify] Check if go to (00:00) after click [Stop] button'):\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:00:00':\n                assert False, f'Not go to (00:00) after click [Stop] button! Expected: 00:00:00:00, Actual: {current_time_code}'\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_28",
        "tags": [
            "title_designer_func",
            "title_designer",
            "in_out_animation"
        ],
        "marked_name": "[test_title_designer_func_4_28] Apply another effect and check preview",
        "description": [
            "1. Apply another effect and check preview"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.in_out_animation\n    @pytest.mark.name('[test_title_designer_func_4_28] Apply another effect and check preview')\n    def test_title_designer_func_4_28(self):\n    '''\n        1. Apply another effect and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_27\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Apply another effect and check preview'):\n            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            # Apply In animation: Video rotation > Rotate Counterclockwise\n            title_designer_page.select_animation_in_animation_effect(8, 3)\n            applied_effect = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(before_img, applied_effect, similarity=0.99):\n                assert False, \"Effect is not applied correctly on preview window! Similarity should < 0.99\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_29",
        "tags": [
            "title_designer_func",
            "title_designer",
            "timeline",
            "in_out_animation",
            "play_video"
        ],
        "marked_name": "[test_title_designer_func_4_29] Stop playing video and check if go to (00:00)",
        "description": [
            "1. Press space key to play video and click [Stop] button",
            "2. Check if go to (00:00) after click [Stop] button when playing video"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.timeline\n    @pytest.mark.in_out_animation\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_designer_func_4_29] Stop playing video and check if go to (00:00)')\n    def test_title_designer_func_4_29(self):\n    '''\n        1. Press space key to play video and click [Stop] button\n        2. Check if go to (00:00) after click [Stop] button when playing video\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_28\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Press space key to play video and click [Stop] button'):\n\n            # Preview play > Pause\n            main_page.press_space_key()\n            time.sleep(DELAY_TIME*1.6)\n\n            # Click [Stop]\n            title_designer_page.click_preview_operation('Stop')\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check if go to (00:00) after click [Stop] button when playing video'):\n            current_time_code = title_designer_page.get_timecode()\n            if current_time_code != '00:00:00:00':\n                assert False, f'Not go to (00:00) after click [Stop] button! Expected: 00:00:00:00, Actual: {current_time_code}'\n        \n        with step('[Initialize] Close APP for next test'):\n            # Close title designer\n            title_designer_page.click_ok()\n            time.sleep(DELAY_TIME * 2)\n            # Close APP\n            main_page.close_app()\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_30",
        "tags": [
            "title_designer_func",
            "title_designer",
            "object_setting"
        ],
        "marked_name": "[test_title_designer_func_4_30] Insert new title and set x position = 0 and rotation = 90",
        "description": [
            "1. Insert new title",
            "2. Enter Object setting tab",
            "3. set x position = 0 and check preview",
            "4. set rotation = 90 and check preview"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_designer_func_4_30] Insert new title and set x position = 0 and rotation = 90')\n    def test_title_designer_func_4_30(self):\n    '''\n        1. Insert new title\n        2. Enter Object setting tab\n        3. set x position = 0 and check preview\n        4. set rotation = 90 and check preview\n        '''\n# Ensure the dependency test is run and passed\n        # Start a new section, starts from \"test_title_designer_func_4_1\"\n        self.test_title_designer_func_4_1()\n\n        with step('[Action] Enter Advanced mode'):\n            title_designer_page.switch_mode(2)\n\n        with step('[Action] Insert new title'):\n            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            title_designer_page.insert_title(' suiod fw5')\n            added_text = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(ori_img, added_text, similarity=0.98):\n                assert False, \"Insert new title failed!\"\n\n        with step('[Action] Enter object setting tab'):\n            # ---------------------------------\n            # Move 2nd title to left\n            # Switch to Object tab > Unfold\n            title_designer_page.click_object_tab()\n            # Unfold tab\n            title_designer_page.unfold_object_object_setting_tab(1)\n\n        with step('[Action] Set x position = 0 of new added title'):\n            before_img = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # Set x position = 0\n            title_designer_page.input_object_setting_x_position_value('0')\n        \n        with step('[Verify] Check if preview changed correctly for x position = 0'):\n            x_value_changed = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_img, x_value_changed, similarity=0.98):\n                assert False, \"Set x position failed!\"\n\n        with step('[Action] Set rotation = 90 of new added title'):\n            # Set roation = 90\n            title_designer_page.input_object_setting_rotation_value('90')\n\n        with step('[Verify] Check if preview changed correctly for rotation = 90'):\n            rotation_value_changed = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_img, rotation_value_changed, similarity=0.98):\n                assert False, \"Set rotation failed!\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_31",
        "tags": [
            "title_designer_func",
            "title_designer",
            "in_out_animation"
        ],
        "marked_name": "[test_title_designer_func_4_31] Apply out animation effect on 1st title",
        "description": [
            "1. Highlight the 1st title",
            "2. Apply Out animation: Pop up III",
            "3. Check if preview changed correctly at (09:08)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.in_out_animation\n    @pytest.mark.name('[test_title_designer_func_4_31] Apply out animation effect on 1st title')\n    def test_title_designer_func_4_31(self):\n    '''\n        1. Highlight the 1st title\n        2. Apply Out animation: Pop up III\n        3. Check if preview changed correctly at (09:08)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_30\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Highlight the 1st title'):\n            # fold tab\n            title_designer_page.unfold_object_object_setting_tab(0)\n\n            # ---------------------------------\n            # Switch highlight to 1st title\n            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)\n            main_page.mouse.click(*canvas_elem.center)\n\n            # Switch to Animation tab > Unfold\n            title_designer_page.click_animation_tab()\n\n            # Warning: Do you want to continue?\n            title_designer_page.handle_special_effect_want_to_continue(option=1)\n            time.sleep(DELAY_TIME * 2)\n\n        # [L146] 3.2 Title Designer > Set Animation > Ending Effect\n        # with uuid(\"df9f83b6-b009-4cbe-9180-2168fd1ad35c\") as case:\n\n        with step('[Action] Enter out animation tab'):\n            # Fold (In animation)\n            title_designer_page.unfold_animation_in_animation_tab(0)\n\n            # UnFold (Out animation)\n            title_designer_page.unfold_animation_out_animation_tab()\n\n        with step('[Action] Apply Out animation: Pop up III'):\n\n            # Set timecode to snapshot before apply out animation\n            title_designer_page.set_timecode('00_00_09_08')\n            no_out_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n\n            # Apply Out animation: Pop up III\n            title_designer_page.select_animation_out_animation_effect(6, 5)\n\n            # Warning: Do you want to continue?\n            title_designer_page.handle_special_effect_want_to_continue(option=1)\n\n\n        # check if preview changed\n        with step('[Verify] Check if preview changed correctly at (09:08)'):\n            out_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(out_animation_preview, no_out_animation_preview, similarity=0.995):\n                assert False, \"out animation effect is not applied correctly on preview window! Similarity should < 0.995\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_32",
        "tags": [
            "title_designer_func",
            "title_designer",
            "in_out_animation",
            "play_video",
            "timeline"
        ],
        "marked_name": "[test_title_designer_func_4_32] Play video by press space key and check preview",
        "description": [
            "1. Play the vedio by press space key and check if preview changed correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.in_out_animation\n    @pytest.mark.play_video\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_title_designer_func_4_32] Play video by press space key and check preview')\n    def test_title_designer_func_4_32(self):\n    '''\n        1. Play the vedio by press space key and check if preview changed correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_31\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Play the vedio by press space key and check if preview changed at (07:50)'):\n            title_designer_page.set_timecode('00_00_07_50')\n\n            before_play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n\n            # Preview play > Pause\n            main_page.press_space_key()\n            time.sleep(DELAY_TIME*2)\n            main_page.press_space_key()\n\n            # check if preview changed\n            play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)\n            if main_page.compare(play_preview, before_play_preview, similarity=0.98):\n                assert False, \"Not preview out animation correctly when playing the video by press space key! Similarity should < 0.98\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_33",
        "tags": [
            "title_designer_func",
            "title_designer",
            "motion",
            "path_effect"
        ],
        "marked_name": "[test_title_designer_func_4_33] Apply Motion -- Path effect twice",
        "description": [
            "1. Enter Motion tab",
            "2. Apply path effect and check if preview",
            "3. Apply another path effect and check preview"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.motion\n    @pytest.mark.path_effect\n    @pytest.mark.name('[test_title_designer_func_4_33] Apply Motion -- Path effect twice')\n    def test_title_designer_func_4_33(self):\n    '''\n        1. Enter Motion tab\n        2. Apply path effect and check if preview\n        3. Apply another path effect and check preview\n        '''\n# Ensure the dependency test is run and passed\n        # Start a new section, starts from \"test_title_designer_func_4_1\"\n        self.test_title_designer_func_4_1()\n\n        with step('[Action] Enter Advanced mode'):\n            title_designer_page.switch_mode(2)\n\n        # [L147] 3.2 Title Designer > Set Motion\n        # with uuid(\"c37a6bbf-5989-49ce-bb91-47aac338ddb0\") as case:\n        with step('[Action] Set Enter Path Tab'):\n            # Switch to Motion tab > Unfold\n            title_designer_page.click_motion_tab()\n            # UnFold Path\n            title_designer_page.path.set_unfold()\n\n        with step('[Action] Apply path'):\n            original_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            # Apply path\n            title_designer_page.path.select_path(3)\n\n        with step('[Verify] Check if preview changed correctly'):\n            # Verify preview 1\n            path_3_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(original_preview, path_3_preview, similarity=0.98):\n                assert False, \"Path effect is not applied correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Action] Apply another path effect again'):\n            # scroll down (scroll bar)\n            title_designer_page.drag_object_vertical_slider(1)\n            # Apply path\n            title_designer_page.path.select_path(10)\n\n        with step('[Verify] Check if preview changed correctly'):\n            # Verify preview 2\n            path_10_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(path_3_preview, path_10_preview, similarity=0.9):\n                assert False, \"Path effect is not applied correctly on preview window! Similarity should < 0.9\"\n\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_02_29')\n\n            # Verify preview 3\n            check_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L147.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L147.png', check_preview, similarity=0.9)\n            if not compare_result:\n                assert False, \"Path effect is not applied correctly on preview window as GT (L147.png)!\"\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_34",
        "tags": [
            "title_designer_func",
            "title_designer",
            "motion",
            "path_effect",
            "play_video"
        ],
        "marked_name": "[test_title_designer_func_4_34] Play the video and check path effect changed on preview",
        "description": [
            "1. Play the video by press space key",
            "2. Check if preview changed correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.motion\n    @pytest.mark.path_effect\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_designer_func_4_34] Play the video and check path effect changed on preview')\n    def test_title_designer_func_4_34(self):\n    '''\n        1. Play the video by press space key\n        2. Check if preview changed correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_33\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Play the video by press space key'):\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # Preview play > Pause\n            main_page.press_space_key()\n            time.sleep(DELAY_TIME * 4)\n            main_page.press_space_key()\n\n        with step('[Verify] Check if preview changed correctly'):\n            after_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_preview, after_preview, similarity=0.98):\n                assert False, \"Not preview path effect correctly when playing the video by press space key! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_35",
        "tags": [
            "title_designer_func",
            "title_designer",
            "open_project",
            "particle",
            "launch"
        ],
        "marked_name": "[test_title_designer_func_4_35] Insert a particle twice and check preview/ particle title",
        "description": [
            "1. Insert a particle",
            "2. Check if preview changed correctly",
            "3. Undo and insert another particle",
            "4. Check if preview changed correctly",
            "5. Check if inserted particle template title is Bamboo"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.open_project\n    @pytest.mark.particle\n    @pytest.mark.launch\n    @pytest.mark.name('[test_title_designer_func_4_35] Insert a particle twice and check preview/ particle title')\n    def test_title_designer_func_4_35(self):\n    '''\n        1. Insert a particle\n        2. Check if preview changed correctly\n        3. Undo and insert another particle\n        4. Check if preview changed correctly\n        5. Check if inserted particle template title is Bamboo\n        '''\n# Ensure the dependency test is run and passed\n        # Start a new section, starts from \"test_title_designer_func_4_1\"\n        \n        with step('[Initialize] Open project and enter Title room'):\n            with step('[Action] Reopen AP and open saved project'):\n                main_page.close_app()\n                main_page.start_app()\n                time.sleep(DELAY_TIME)\n\n                project_name = 'Packed_Project/test_title_designer_func_4_25_from_test_intro_room_func_3_16.pdk'\n                save_name = 'Extracted_Folder/test_title_designer_func_4_25'\n                self.open_packed_project(project_name, save_name)\n                \n            with step('[Action] Open [Default] title designer by searching [Default] in library'):\n                # enter Title room\n                main_page.enter_room(1)\n\n                # Select default title (21.6.5219 : search then select default title)\n                media_room_page.search_library('Default')\n                time.sleep(DELAY_TIME * 2)\n                main_page.select_library_icon_view_media('Default')\n                main_page.double_click()\n\n            with step('[Verify] Check open [Default] title designer'):\n                # Verify Step\n                check_selected_object = title_designer_page.get_title_text_content()\n                if check_selected_object != 'My Title':\n                    assert False, f\"Open [Default] title designer failed! Expected: My Title, Actual: {check_selected_object}\"\n                check_caption_bar_content = title_designer_page.get_full_title()\n                if check_caption_bar_content != 'Title Designer | Default':\n                    assert False, f\"Open [Default] title designer failed! Expected: Title Designer | Default, Actual: {check_caption_bar_content}\"\n\n\n        # [L150] 3.2 Title Designer > Insert object > Particle\n        # with uuid(\"01518edc-0a14-4a92-95c5-baaed5ae0c51\") as case:\n\n        with step('[Action] Insert a particle'):\n            # Switch to Advance mode\n            title_designer_page.switch_mode(2)\n\n            # Switch to Object tab > Unfold\n            title_designer_page.click_object_tab()\n\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_05_28')\n\n            before_applied_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n\n            # Click [Insert particle]\n            title_designer_page.click_insert_particle_btn()\n\n            # Select Frame > 6th template\n            title_designer_page.insert_particle(menu_index=6, particle_index=5)\n\n        with step('[Verify] Check if preview changed correctly for the first particle'):\n            frame_6_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_applied_preview, frame_6_preview, similarity=0.98):\n                assert False, \"Particle effect is not applied correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Action] Undo and insert another particle'):\n            title_designer_page.click_undo_btn()\n            time.sleep(DELAY_TIME * 2)\n\n            # Click [Insert particle]\n            title_designer_page.click_insert_particle_btn()\n            # Select Holiday > 1st template (naming: Bamboo)\n            title_designer_page.insert_particle(menu_index=4, particle_index=0)\n\n        with step('[Verify] Check if preview changed correctly for the second particle'):\n            # Verify preview 2\n            hodiday_4_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(frame_6_preview, hodiday_4_preview, similarity=0.9):\n                assert False, \"Particle effect is not applied correctly on preview window for the second time! Similarity should < 0.9\"\n\n        with step('[Verify] Check if inserted particle template title is Bamboo'):\n            # Check insert template title\n            elem = main_page.exist(L.title_designer.area.edittext_text_content)\n            if elem.AXValue != 'Bamboo':\n                assert False, f\"Particle template title is not Bamboo! Expected: Bamboo, Actual: {elem.AXValue}\"\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_36",
        "tags": [
            "title_designer_func",
            "title_designer",
            "image"
        ],
        "marked_name": "[test_title_designer_func_4_36] Insert image and check preview/ image title",
        "description": [
            "1. Insert an image",
            "2. Check if preview changed correctly",
            "3. Check if image title is beauty.jpg"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.image\n    @pytest.mark.name('[test_title_designer_func_4_36] Insert image and check preview/ image title')\n    def test_title_designer_func_4_36(self):\n    '''\n        1. Insert an image\n        2. Check if preview changed correctly\n        3. Check if image title is beauty.jpg\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_35\"\n        self.ensure_dependency(dependency_test)\n\n        # [L151] 3.2 Title Designer > Insert object > Image\n        # with uuid(\"941b1888-0447-45df-b9fd-51f984b219b2\") as case:\n\n        with step('[Action] Insert an image'):\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # Click [Insert image]\n            title_designer_page.insert_image(Test_Material_Folder + 'BFT_21_Stage1/beauty.jpg')\n\n        with step('[Verify] Check if preview changed correctly'):\n            # Check preview update:\n            inserted_image_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_preview, inserted_image_preview, similarity=0.98):\n                assert False, \"Image is not inserted correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Verify] Check if image title is beauty.jpg'):\n            # Check insert template title\n            elem = main_page.exist(L.title_designer.area.edittext_text_content)\n            assert elem.AXValue == 'beauty.jpg', f'Image title is not beauty.jpg! Expected: beauty.jpg, Actual: {elem.AXValue}'"
    },
    {
        "name": "test_title_designer_func_4_37",
        "tags": [
            "title_designer_func",
            "title_designer",
            "image"
        ],
        "marked_name": "[test_title_designer_func_4_37] Move/ Resize/ Rotate the Image object and check preview",
        "description": [
            "1. Move the Image object and check preview",
            "2. Resize the Image object and check preview",
            "3. Rotate the Image object and check preview",
            "4. Check if preview changed correctly as GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.image\n    @pytest.mark.name('[test_title_designer_func_4_37] Move/ Resize/ Rotate the Image object and check preview')\n    def test_title_designer_func_4_37(self):\n    '''\n        1. Move the Image object and check preview\n        2. Resize the Image object and check preview\n        3. Rotate the Image object and check preview\n        4. Check if preview changed correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_36\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Move the Image object'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_02_06')\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # Resize / move the Image object\n            title_designer_page.adjust_title_on_canvas.drag_move_to_left(x=120)\n\n        with step('[Verify] Check if preview changed correctly after move the image'):\n            moved_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_preview, moved_preview, similarity=0.98):\n                assert False, \"Image is not moved correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Action] Resize the Image object'):\n            title_designer_page.adjust_title_on_canvas.resize_to_large(x=80, y=80)\n\n        with step('[Verify] Check if preview changed correctly after resize the image'):\n            resized_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(moved_preview, resized_preview, similarity=0.98):\n                assert False, \"Image is not resized correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Action] Rotate the Image object'):\n            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise(45)\n\n        with step('[Verify] Check if preview changed correctly after rotate the image'):\n            rotated_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(resized_preview, rotated_preview, similarity=0.98):\n                assert False, \"Image is not rotated correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            current_image = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L151.png')\n            check_image = main_page.compare(Ground_Truth_Folder + 'L151.png', current_image, similarity=0.9)\n            if not check_image:\n                assert False, \"Image is not resized/ moved/ rotated correctly on preview window as GT (L151.png)! But checked preview changed step by step in previous steps\"\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_38",
        "tags": [
            "title_designer_func",
            "title_designer",
            "bg_image"
        ],
        "marked_name": "[test_title_designer_func_4_38] Insert Background Image and Delete Background Image",
        "description": [
            "1. Insert Background Image",
            "2. Check if preview changed correctly",
            "3. Delete Background Image",
            "4. Check if preview changed correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.bg_image\n    @pytest.mark.name('[test_title_designer_func_4_38] Insert Background Image and Delete Background Image')\n    def test_title_designer_func_4_38(self):\n    '''\n        1. Insert Background Image\n        2. Check if preview changed correctly\n        3. Delete Background Image\n        4. Check if preview changed correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_37\"\n        self.ensure_dependency(dependency_test)\n\n        # [L152] 3.2 Title Designer > Insert object > Background Image\n        # with uuid(\"ea00aff9-e85e-447f-981a-ecd745ad0838\") as case:\n\n        with step('[Action] Insert Background Image'):\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            # Click [Insert BG]\n            title_designer_page.insert_background(Test_Material_Folder + 'BFT_21_Stage1/outside.jpg')\n            title_designer_page.insert_background_adjust_setting(0)\n\n        with step('[Verify] Check if preview changed correctly'):\n            inserted_BG_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_preview, inserted_BG_preview, similarity=0.98):\n                assert False, \"Background Image is not inserted correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            # Check preview update:\n            if not main_page.compare(Ground_Truth_Folder + 'L152.png', inserted_BG_preview, similarity=0.9):\n                assert False, \"Background Image is not inserted correctly on preview window as GT!\"\n\n        with step('[Action] Delete Background Image'):\n            # Click (Delete BG) button\n            title_designer_page.click_delete_background_btn()\n\n        with step('[Verify] Check if preview changed correctly'):\n            deleted_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(inserted_BG_preview, deleted_preview, similarity=0.98):\n                assert False, \"Background Image is not deleted correctly on preview window! Similarity should < 0.98\"\n\n        with step('[Initialize] Undo for next test'):\n            # Undo\n            title_designer_page.click_undo_btn()\n        \n        assert True"
    },
    {
        "name": "test_title_designer_func_4_39",
        "tags": [
            "title_designer_func",
            "title_designer",
            "max_min_window"
        ],
        "marked_name": "[test_title_designer_func_4_39] Maximize/ Minimize screen and check preview",
        "description": [
            "1. Maximize screen",
            "2. Check if preview changed correctly as GT",
            "3. Minimize screen",
            "4. Check if preview changed correctly as GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.max_min_window\n    @pytest.mark.name('[test_title_designer_func_4_39] Maximize/ Minimize screen and check preview')\n    def test_title_designer_func_4_39(self):\n    '''\n        1. Maximize screen\n        2. Check if preview changed correctly as GT\n        3. Minimize screen\n        4. Check if preview changed correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_38\"\n        self.ensure_dependency(dependency_test)\n\n        # [L153] 3.2 Title Designer > Preview > in designer & full screen\n        # with uuid(\"609fda02-864a-4c71-900b-6bf39f7b54ac\") as case:\n\n        with step('[Action] Maximize screen'):\n            # Click [Stop]\n            title_designer_page.click_preview_operation('Stop')\n            # Click [full screen]\n            title_designer_page.click_maximize_btn()\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            full_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L153_full.png')\n            check_result_full = main_page.compare(Ground_Truth_Folder + 'L153_full.png', full_preview, similarity=0.85)\n            if not check_result_full:\n                assert False, \"Preview is not maximized correctly on preview window as GT!\"\n\n        with step('[Action] Minimize screen'):\n            # Click [restore button]\n            title_designer_page.click_maximize_btn()\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            restore_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L153.png')\n            check_result_restore = main_page.compare(Ground_Truth_Folder + 'L153.png', restore_preview, similarity=0.85)\n            if not check_result_restore:\n                assert False, \"Preview is not minimized correctly on preview window as GT!\"\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_40",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "dz",
            "cyberlink_cloud"
        ],
        "marked_name": "[test_title_designer_func_4_40] Share to DZ (Completed Window pops up)",
        "description": [
            "1. Share to DZ (check till completed window pops up)"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.dz\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.name('[test_title_designer_func_4_40] Share to DZ (Completed Window pops up)')\n    def test_title_designer_func_4_40(self):\n    '''\n        1. Share to DZ (check till completed window pops up)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_39\"\n        self.ensure_dependency(dependency_test)\n\n        # [L154] 3.2 Title Designer > Share template DZ and Cloud\n        # with uuid(\"441355f4-e673-45fc-b3e4-1b8189a15db8\") as case:\n\n        with step('[Action] Share template to DZ'):\n            # Click [Share] > Upload to \"Cyberlink Cloud and DZ\"\n            # Verify DZ link\n            check_upload = title_designer_page.share_to_dz(name='title_particle_text', upload_option=0, style='Romance', tags='123', collection='test', description='Great', verify_dz_link=1)\n            if not check_upload:\n                assert False, \"Share template to DZ failed!\"\n\n        with step('[Initialize] Close title designer window for next test'):\n            # Click [Cancel] to close title designer\n            title_designer_page.click_cancel()\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_41",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "dz",
            "cyberlink_cloud"
        ],
        "marked_name": "[test_title_designer_func_4_41] Show uploaded content on download from CL/DZ window",
        "description": [
            "1. Download the uploaded content form CL/DZ",
            "2. Delete the uploaded content form CL/DZ",
            "3. Check if show uploaded content on download from CL/DZ window"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.dz\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.name('[test_title_designer_func_4_41] Show uploaded content on download from CL/DZ window')\n    def test_title_designer_func_4_41(self):\n    '''\n        1. Download the uploaded content form CL/DZ\n        2. Delete the uploaded content form CL/DZ\n        3. Check if show uploaded content on download from CL/DZ window\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_40\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Download the uploaded content form CL/DZ'):\n            # Click download content form CL/DZ\n            title_room_page.click_DownloadContent_from_DZCL()\n\n            # Already enter \"Download Title Templates\" > Open My Cyberlink Cloud\n            # Select template name \"title_particle_text\"\n            check_CL_content = download_from_cl_dz_page.select_template('title_particle_text')\n\n        with step('[Action] Delete the uploaded content form CL/DZ'):\n            download_from_cl_dz_page.tap_delete_button()\n            # Close \"Download Title Templates\" window\n            # download_from_cl_dz_page.tap_close_button()\n            main_page.press_esc_key()\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check if show uploaded content on download from CL/DZ window'):\n            assert check_CL_content, \"Show uploaded content on download from CL/DZ window failed!\""
    },
    {
        "name": "test_title_designer_func_4_42",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "font_face"
        ],
        "marked_name": "[test_title_designer_func_4_42] Adjust font face color of the saved template",
        "description": [
            "1. Open title designer with the saved template",
            "2. Adjust font face color the saved template",
            "3. Check if preview changed correctly"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.font_face\n    @pytest.mark.name('[test_title_designer_func_4_42] Adjust font face color of the saved template')\n    def test_title_designer_func_4_42(self):\n    '''\n        1. Open title designer with the saved template\n        2. Adjust font face color the saved template\n        3. Check if preview changed correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_41\"\n        self.ensure_dependency(dependency_test)\n\n        # [L155] 3.2 Title Designer > Save template\n        # with uuid(\"5ce4dc5e-1d12-4e48-83f2-ffcc25408da0\") as case:\n\n        with step('[Action] Open title designer with the saved template'):\n            # Click \"title_particle_text\" template to title designer\n            main_page.select_library_icon_view_media('title_particle_text')\n            main_page.right_click()\n            main_page.select_right_click_menu('Modify Template')\n\n        with step('[Action] Adjust font face color the saved template'):\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n\n            # Enter title designer > Modify font face\n            # Set font face color\n            title_designer_page.set_font_face_color('85', '6', '208')\n\n        with step('[Verify] Check if preview changed correctly'):\n            font_face_color_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            if main_page.compare(before_preview, font_face_color_preview, similarity=0.99):\n                assert False, \"Font face color is not adjusted correctly on preview window! Similarity should < 0.99\"\n\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_43",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template"
        ],
        "marked_name": "[test_title_designer_func_4_43] Reopen the saved template and check preview",
        "description": [
            "1. Save the modified template",
            "2. Reopen the saved template again",
            "3. Check if preview changed after reopen the saved template"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_title_designer_func_4_43] Reopen the saved template and check preview')\n    def test_title_designer_func_4_43(self):\n    '''\n        1. Save the modified template\n        2. Reopen the saved template again\n        3. Check if preview changed after reopen the saved template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_42\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Save the modified template'):\n            # Save template\n            main_page.click(L.title_designer.btn_save_as)\n            title_designer_page.click_custom_name_ok('BFT_title_Save')\n            before_reopen_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n\n        with step('[Action] Reopen the saved template again'):\n            # Click [Cancel]\n            title_designer_page.click_cancel()\n            # Verify Step\n            main_page.select_library_icon_view_media('BFT_title_Save')\n            main_page.right_click()\n            main_page.select_right_click_menu('Modify Template')\n\n        with step('[Verify] Check if preview changed after reopen the saved template (Should not change)'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_05_00')\n            time.sleep(DELAY_TIME * 4)\n\n            after_reopen_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n            check_save_result = main_page.compare(before_reopen_preview, after_reopen_preview, similarity=0.95)\n            assert check_save_result, \"Preview is changed after reopen the saved template!\""
    },
    {
        "name": "test_title_designer_func_4_44",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "timeline"
        ],
        "marked_name": "[test_title_designer_func_4_44] Add saved title template to timeline at (10:00)",
        "description": [
            "1. Add saved title template to timeline at (10:00)",
            "2. Check if preview changed correctly as GT"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_title_designer_func_4_44] Add saved title template to timeline at (10:00)')\n    def test_title_designer_func_4_44(self):\n    '''\n        1. Add saved title template to timeline at (10:00)\n        2. Check if preview changed correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_43\"\n        self.ensure_dependency(dependency_test)\n\n        # [L156] 3.2 Title Designer > Add saved title template to timeline\n        # with uuid(\"fb5b54c4-d0a8-4a3d-ac92-09e88ccf330b\") as case:\n\n        with step('[Action] Add saved title template to timeline at (10:00)'):\n            # Click [Cancel] to close title designer\n            title_designer_page.click_cancel()\n\n            # select timeline track 1\n            main_page.timeline_select_track(1)\n\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_10_00')\n            time.sleep(DELAY_TIME * 2)\n\n            # Drag BFT_title_Save to timeline track1\n            main_page.drag_media_to_timeline_playhead_position('BFT_title_Save')\n            \n        with step('[Verify] Check if preview changed correctly as GT'):\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_16_23')\n            time.sleep(DELAY_TIME * 2)\n\n            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L156.png')\n            check_current_title = main_page.compare(Ground_Truth_Folder + 'L156.png', timeline_preview, similarity=0.9)\n            assert check_current_title, \"Preview is not added to timeline correctly as GT (L156.png)!\""
    },
    {
        "name": "test_title_designer_func_4_45",
        "tags": [
            "title_designer_func",
            "title_designer",
            "save_template",
            "timeline",
            "play_video"
        ],
        "marked_name": "[test_title_designer_func_4_45] Play title with press space key > Save project",
        "description": [
            "1. Play the title with press space key",
            "2. Check if preview changed correctly",
            "3. Save project"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.title_designer\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_designer_func_4_45] Play title with press space key > Save project')\n    def test_title_designer_func_4_45(self):\n    '''\n        1. Play the title with press space key\n        2. Check if preview changed correctly\n        3. Save project\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_designer_func_4_44\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Play timeline preview'):\n            before_play_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_10_00')\n            # Play timeline preview\n            main_page.press_space_key()\n            time.sleep(DELAY_TIME * 6)\n            main_page.press_space_key()\n\n        with step('[Verify] Check if preview changed correctly'):\n            played_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            if main_page.compare(before_play_preview, played_preview, similarity=0.98):\n                assert False, \"Not preview timeline correctly when playing the video by press space key! Similarity should < 0.98\"\n\n        with step('[Action] Save project'):\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_title_designer_func_4_45',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n            time.sleep(DELAY_TIME * 2)\n        assert True"
    },
    {
        "name": "test_title_designer_func_4_z",
        "tags": [
            "title_designer_func"
        ],
        "marked_name": "[test_title_designer_func_4_z] Close AP due to the section is completed",
        "description": [
            "1. Open AP with project: BFT_21_Stage1/test_title_mgt_func_5_1_from_test_title_designer_func_4_45.pdk",
            "2. Open Title designer with Motion Graphics title",
            "3. Check if title of title designer is correct"
        ],
        "full_code": "@pytest.mark.title_designer_func\n    @pytest.mark.name('[test_title_designer_func_4_z] Close AP due to the section is completed')\n    def test_title_designer_func_4_z(self):\n    '''\n        1. Open AP with project: BFT_21_Stage1/test_title_mgt_func_5_1_from_test_title_designer_func_4_45.pdk\n        2. Open Title designer with Motion Graphics title\n        3. Check if title of title designer is correct\n        '''\nwith step('[Action] Open AP and open saved project'):\n            main_page.start_app()\n            project_name = 'Packed_Project/test_title_mgt_func_5_1_from_test_title_designer_func_4_45.pdk'\n            save_name = 'Extracted_Folder/test_title_mgt_func_5_1'\n            self.open_packed_project(project_name, save_name)\n\n        # [L158] 3.3 Title Designer (motion graphics title) > Open Title designer\n        # with uuid(\"f36c7d26-cec9-47aa-a29c-9aff9bb61e6c\") as case:\n        with step('[Action] Open Title designer with Motion Graphics title'):\n            # enter Title room\n            main_page.enter_room(1)\n            main_page.select_LibraryRoom_category('Motion Graphics')\n            main_page.select_library_icon_view_media('Motion Graphics 002')\n\n            # Enter title designer\n            main_page.double_click()\n            time.sleep(DELAY_TIME * 2)\n            title_designer_page.mgt.click_warning_msg_ok()\n\n        with step('[Verify] Check if title of title designer is correct'):\n            check_title_caption = title_designer_page.get_title()\n\n            if check_title_caption != 'Motion Graphics 002':\n                assert False, f\"Title designer is not opened correctly! Expected: Motion Graphics 002, Actual: {check_title_caption}\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_2",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "title"
        ],
        "marked_name": "[test_title_mgt_func_5_2] Check title track",
        "description": [
            "1. Enter MGT -- Title tab",
            "2. Check if title track is correct",
            "3. Switch to other track",
            "4. Check if title track is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.title\n    @pytest.mark.name('[test_title_mgt_func_5_2] Check title track')\n    def test_title_mgt_func_5_2(self):\n    '''\n        1. Enter MGT -- Title tab\n        2. Check if title track is correct\n        3. Switch to other track\n        4. Check if title track is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L159] 3.3 Title Designer (motion graphics title) > Title > Select title track\n        # with uuid(\"1819ea47-ec11-402e-ab01-bf894b84a615\") as case:\n\n        with step('[Action] Enter mgt -- title tab'):\n            # Unfold Title\n            title_designer_page.mgt.unfold_title_tab()\n\n        with step('[Verify] Check if title track is correct'):\n            # Get current selected track\n            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle\n            if selected_track_elem != 'PowerDirector':\n                assert False, f\"Current selected track is not correct! Expected: PowerDirector, Actual: {selected_track_elem}\"\n            \n        with step('[Action] Switch to other track'):\n            # Switch to other track\n            title_designer_page.mgt.select_title_track('By CyberLink')\n\n        with step('[Verify] Check if title track is correct'):\n            # Check current selected track\n            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle\n            if selected_track_elem != 'By CyberLink':\n                assert False, f\"Current selected track is not correct! Expected: By CyberLink, Actual: {selected_track_elem}\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_3",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "title"
        ],
        "marked_name": "[test_title_mgt_func_5_3] Enter Text to MGT",
        "description": [
            "1. Enter text to MGT",
            "2. Check if text is entered correctly"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.title\n    @pytest.mark.name('[test_title_mgt_func_5_3] Enter Text to MGT')\n    def test_title_mgt_func_5_3(self):\n    '''\n        1. Enter text to MGT\n        2. Check if text is entered correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L160] 3.3 Title Designer (motion graphics title) > Title > Edit text\n        # with uuid(\"b7e68c42-15cc-4296-92c2-8ed8ff57bbe1\") as case:\n\n        with step('[Action] Enter text to MGT'):\n            title_designer_page.mgt.input_title_text('がぎぐげご さしすせ')\n\n        with step('[Verify] Check if text is entered correctly'):\n            # Check current selected track\n            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle\n            if selected_track_elem != 'がぎぐげご さしすせ':\n                assert False, f\"Current selected track is not correct! Expected: がぎぐげご さしすせ, Actual: {selected_track_elem}\"\n\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_4",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt"
        ],
        "marked_name": "[test_title_mgt_func_5_4] Modify font type/ Apply Bold/ Apply Font Color",
        "description": [
            "1. Modify font type and check preview",
            "2. Apply Bold and check preview",
            "3. Apply Font Color and check preview"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.name('[test_title_mgt_func_5_4] Modify font type/ Apply Bold/ Apply Font Color')\n    def test_title_mgt_func_5_4(self):\n    '''\n        1. Modify font type and check preview\n        2. Apply Bold and check preview\n        3. Apply Font Color and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_3\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Modify font type'):\n            before_img = main_page.snapshot(locator=L.title_designer.main_window)\n            # Modify font type\n            title_designer_page.mgt.apply_font_type('Trebuchet MS Regular')\n            \n        with step('[Verify] Check if preview changed correctly after modify font type'):\n            applied_font_type = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(before_img, applied_font_type, similarity=0.98):\n                assert False, \"Font type is not applied correctly on preview window! Similarity should < 0.98\"\n        \n        with step('[Action] Apply Bold'):\n            # Apply Bold\n            title_designer_page.mgt.click_bold_btn()\n\n        with step('[Verify] Check if preview changed correctly after apply bold'):\n            applied_bold = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(applied_font_type, applied_bold, similarity=0.999):\n                assert False, \"Bold is not applied correctly on preview window! Similarity should < 0.999\"\n        \n        with step('[Action] Apply Font Color'):\n            # Apply font color\n            title_designer_page.mgt.apply_font_face_color('2200E9')\n\n        with step('[Verify] Check if preview changed correctly after apply font color'):\n            applied_font_color = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(applied_bold, applied_font_color, similarity=0.999):\n                assert False, \"Font color is not applied correctly on preview window! Similarity should < 0.999\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_5",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "title"
        ],
        "marked_name": "[test_title_mgt_func_5_5] Adjust Text/ Font Type/ Font Face Color for other track",
        "description": [
            "1. Switch to other track",
            "2. Enter text to MGT and check title",
            "3. Modify font type and check preview",
            "4. Apply Font Face Color and check preview"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.title\n    @pytest.mark.name('[test_title_mgt_func_5_5] Adjust Text/ Font Type/ Font Face Color for other track')\n    def test_title_mgt_func_5_5(self):\n    '''\n        1. Switch to other track\n        2. Enter text to MGT and check title\n        3. Modify font type and check preview\n        4. Apply Font Face Color and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_4\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to other track'):\n            # Switch to other track -----------------------------------\n            title_designer_page.mgt.select_title_track('PowerDirector')\n\n        with step('[Action] Enter text to MGT'):\n            title_designer_page.mgt.input_title_text('許功蓋＠＃&*_-<>?')\n\n        with step('[Verify] Check if text is entered correctly'):\n            # Check current selected track\n            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle\n            if selected_track_elem != '許功蓋＠＃&*_-<>?':\n                assert False, f\"Current selected track is not correct! Expected: 許功蓋＠＃&*_-<>?, Actual: {selected_track_elem}\"\n\n        with step('[Action] Modify font type'):\n            before_preview = main_page.snapshot(locator=L.title_designer.main_window)\n            # Modify font type\n            title_designer_page.mgt.apply_font_type('Hoefler Text Regular')\n\n        with step('[Verify] Check if preview changed correctly after modify font type'):\n            applied_font_type = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(before_preview, applied_font_type, similarity=0.99):\n                assert False, \"Font type is not applied correctly on preview window! Similarity should < 0.99\"\n\n        with step('[Action] Apply Font Face Color'):\n            # Apply font color\n            title_designer_page.mgt.apply_font_face_color('EA10D7')\n\n        with step('[Verify] Check if preview changed correctly after apply font color'):\n            applied_font_face_color = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(applied_font_type, applied_font_face_color, similarity=0.99):\n                assert False, \"Font color is not applied correctly on preview window! Similarity should < 0.99\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_6",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "graphics_color"
        ],
        "marked_name": "[test_title_mgt_func_5_6] Apply Graphics Color",
        "description": [
            "1. Room in",
            "2. Enter Graphics Color tab",
            "3. Apply Graphics Color -- A81B22",
            "4. Apply Graphics Color -- C8D996",
            "5. Apply Graphics Color -- 18FA4F",
            "6. Check if preview changed correctly as GT"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.graphics_color\n    @pytest.mark.name('[test_title_mgt_func_5_6] Apply Graphics Color')\n    def test_title_mgt_func_5_6(self):\n    '''\n        1. Room in\n        2. Enter Graphics Color tab\n        3. Apply Graphics Color -- A81B22\n        4. Apply Graphics Color -- C8D996\n        5. Apply Graphics Color -- 18FA4F\n        6. Check if preview changed correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Room in'):\n            # Click [Zoom in] > 87%\n            for x in range(3):\n                title_designer_page.click_zoom_in()\n\n        # [L161] 3.3 Title Designer (motion graphics title) > Able to change group color\n        # with uuid(\"d8e3d3ad-3758-42e4-922b-6f74d499130a\") as case:\n\n        with step('[Action] UnFold Graphics Color tab'):\n            # Fold Title tab\n            title_designer_page.mgt.unfold_title_tab(unfold=0)\n            # Unfold Graphics Color\n            title_designer_page.mgt.unfold_graphics_color_tab()\n        with step('[Action] Apply Graphics Color -- A81B22'):\n            before_preview = main_page.snapshot(locator=L.title_designer.main_window)\n            # Change color 1\n            title_designer_page.mgt.apply_graphics_color(group_no=1, HexColor='A81B22')\n\n        with step('[Action] Apply Graphics Color -- C8D996'):\n            # Change color 2\n            title_designer_page.mgt.apply_graphics_color(group_no=2, HexColor='C8D996')\n\n        with step('[Action] Apply Graphics Color -- 18FA4F'):\n            # Change color 3\n            title_designer_page.mgt.apply_graphics_color(group_no=3, HexColor='18FA4F')\n\n        with step('[Verfiy] Check if preview changed correctly as GT'):\n            time.sleep(DELAY_TIME*1.5)\n            mgt_preview = main_page.snapshot(locator=L.title_designer.main_window, file_name=Auto_Ground_Truth_Folder + 'L161.png')\n            check_current_title = main_page.compare(Ground_Truth_Folder + 'L161.png', mgt_preview)\n            if not check_current_title:\n                assert False, \"Preview is not changed correctly as GT (L161.png) !\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_7",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_7] Object Settings > Check default position",
        "description": [
            "1. Enter Object settings",
            "2. Check default position"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_7] Object Settings > Check default position')\n    def test_title_mgt_func_5_7(self):\n    '''\n        1. Enter Object settings\n        2. Check default position\n        '''\n# Ensure the dependency test is run and passed\n        self.test_title_mgt_func_5_1()\n\n        # [L162] 3.3 Title Designer (motion graphics title) > Object Settings > Position\n        # with uuid(\"14b89fd0-4bcb-4247-abaf-011187aa74e2\") as case:\n\n        with step('[Action] Enter Object Setting'):\n            # Unfold Object Setting\n            title_designer_page.mgt.unfold_object_setting_tab()\n\n        with step('[Verify] Check if default position is correct'):\n            default_x_value = title_designer_page.mgt.get_position_x_value()\n            default_y_value = title_designer_page.mgt.get_position_y_value()\n            assert default_x_value == '0.500' and default_y_value == '0.500', f\"Default position is not correct! Expected: x=0.500, y=0.500; Actual: x={default_x_value}, y={default_y_value}\""
    },
    {
        "name": "test_title_mgt_func_5_8",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_8] Set Position vale by textbox/ arrow",
        "description": [
            "1. Set x position -- by textbox/ arrow",
            "2. Check x position value is correct",
            "3. Set y position -- by textbox/ arrow",
            "4. Check y position value is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_8] Set Position vale by textbox/ arrow')\n    def test_title_mgt_func_5_8(self):\n    '''\n        1. Set x position -- by textbox/ arrow\n        2. Check x position value is correct\n        3. Set y position -- by textbox/ arrow\n        4. Check y position value is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set x position -- by textbox/ arrow'):\n            before_preview = main_page.snapshot(locator=L.title_designer.main_window)\n            # Set x = 0.603\n            title_designer_page.mgt.set_position_x_value('0.60')\n            adjusted_by_textbox = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(before_preview, adjusted_by_textbox, similarity=0.98):\n                assert False, \"Position x is not adjusted correctly by textbox! Similarity should < 0.98\"\n            \n            title_designer_page.mgt.click_position_x_arrow_btn(0, 3)\n            adjusted_by_arrow = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(adjusted_by_textbox, adjusted_by_arrow, similarity=0.995):\n                assert False, \"Position x is not adjusted correctly by arrow! Similarity should < 0.995\"\n                \n        with step('[Verify] Check x position value is correct'):\n            check_x_value = title_designer_page.mgt.get_position_x_value()\n            if check_x_value != '0.603':\n                assert False, f\"Position x is not correct! Expected: 0.603, Actual: {check_x_value}\"\n                \n        with step('[Action] Set y position -- by textbox/ arrow'):\n            # Set y = 0.531\n            before_preview = main_page.snapshot(locator=L.title_designer.main_window)\n            title_designer_page.mgt.set_position_y_value('0.53')\n            adjusted_by_textbox = main_page.snapshot(locator=L.title_designer.main_window)\n            if main_page.compare(before_preview, adjusted_by_textbox, similarity=0.98):\n                assert False, \"Position y is not adjusted correctly by textbox! Similarity should < 0.98\"\n            title_designer_page.mgt.click_position_y_arrow_btn(0, 1)\n            if main_page.compare(adjusted_by_textbox, adjusted_by_arrow, similarity=0.995):\n                assert False, \"Position yx is not adjusted correctly by arrow! Similarity should < 0.995\"\n\n        with step('[Verify] Check y position value is correct'):\n            check_y_value = title_designer_page.mgt.get_position_y_value()\n            if check_y_value != '0.531':\n                assert False, f\"Position y is not correct! Expected: 0.531, Actual: {check_y_value}\"\n                \n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_9",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_9] Check Default Scale value",
        "description": [
            "1. Check if default scale is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_9] Check Default Scale value')\n    def test_title_mgt_func_5_9(self):\n    '''\n        1. Check if default scale is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check if default scale is correct'):\n            # Scroll down\n            title_designer_page.drag_object_vertical_slider(1)\n\n            # [L163] 3.3 Title Designer (motion graphics title) > Object Settings > Scale\n            # with uuid(\"b30d1cc7-6482-472d-8a2f-382ed7bf011b\") as case:\n            default_w_value = title_designer_page.mgt.get_scale_width_value()\n            default_h_value = title_designer_page.mgt.get_scale_height_value()\n\n            assert default_w_value == '1.25' and default_h_value == '1.25', f'Default scale is not correct! Expected: w=1.25, h=1.25; Actual: w={default_w_value}, h={default_h_value}'"
    },
    {
        "name": "test_title_mgt_func_5_10",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_10] Set Scale width/ height value by textbox/ arrow",
        "description": [
            "1. Set Scale width value by textbox/ arrow with untick maintain_aspect_ratio",
            "2. Check scale width value is correct",
            "3. Set Scale height value by textbox/ arrow with untick maintain_aspect_ratio",
            "4. Check scale height value is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_10] Set Scale width/ height value by textbox/ arrow')\n    def test_title_mgt_func_5_10(self):\n    '''\n        1. Set Scale width value by textbox/ arrow with untick maintain_aspect_ratio\n        2. Check scale width value is correct\n        3. Set Scale height value by textbox/ arrow with untick maintain_aspect_ratio\n        4. Check scale height value is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_9\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Adjust Scale width value by textbox/ arrow with untick maintain_aspect_ratio'):\n            # Set w = 2.01\n            title_designer_page.mgt.set_scale_width_value('2.1')\n            title_designer_page.mgt.click_maintain_aspect_ratio(0)\n            title_designer_page.mgt.click_scale_width_arrow_btn(1, 9)\n            \n        with step('[Verify] Check scale width value is correct'):\n            # Verify Step\n            check_w_value = title_designer_page.mgt.get_scale_width_value()\n            if check_w_value != '2.01':\n                assert False, f\"Scale width value is not correct! Expected: 2.01, Actual: {check_w_value}\"\n\n        with step('[Action] Adjust Scale height value by textbox/ arrow with untick maintain_aspect_ratio'):\n            # Set h = 3.26\n            title_designer_page.mgt.set_scale_height_value('3.3')\n            title_designer_page.mgt.click_scale_height_arrow_btn(1, 4)\n\n        with step('[Verify] Check scale height value is correct'):\n            check_h_value = title_designer_page.mgt.get_scale_height_value()\n            if check_h_value != '3.26':\n                assert False, f\"Scale height value is not correct! Expected: 3.26, Actual: {check_h_value}\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_11",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_11] Check Default Rotation value",
        "description": [
            "1. Check if default rotation value is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_11] Check Default Rotation value')\n    def test_title_mgt_func_5_11(self):\n    '''\n        1. Check if default rotation value is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_10\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L164] 3.3 Title Designer (motion graphics title) > Object Settings > Rotation\n        # with uuid(\"a4cd66bc-3eb9-4e64-b37c-92ed9118657e\") as case:\n\n        with step('[Verify] Check default rotation value'):\n            default_rotation_value = title_designer_page.mgt.get_rotation_value()\n            assert default_rotation_value == '0.00', f\"Default rotation value is not correct! Expected: 0.00, Actual: {default_rotation_value}\""
    },
    {
        "name": "test_title_mgt_func_5_12",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_12] Set Rotation value by textbox > Check ",
        "description": [
            "1. Set Rotation value by textbox",
            "2. Check rotation value is correct"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_12] Set Rotation value by textbox > Check ')\n    def test_title_mgt_func_5_12(self):\n    '''\n        1. Set Rotation value by textbox\n        2. Check rotation value is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_11\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Rotation value by textbox'):\n            title_designer_page.mgt.set_rotation_value('146')\n\n        with step('[Verify] Check rotation value is correct'):\n            check_rotation_value = title_designer_page.mgt.get_rotation_value()\n            if check_rotation_value != '146.00':\n                assert False, f\"Rotation value is not correct! Expected: 146.00, Actual: {check_rotation_value}\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_13",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting"
        ],
        "marked_name": "[test_title_mgt_func_5_13] Check if preview changed correctly as GT (from test_title_mgt_func_5_7~11)",
        "description": [
            "1. Check if preview changed correctly as GT (from test_title_mgt_func_5_7~12)"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_title_mgt_func_5_13] Check if preview changed correctly as GT (from test_title_mgt_func_5_7~11)')\n    def test_title_mgt_func_5_13(self):\n    '''\n        1. Check if preview changed correctly as GT (from test_title_mgt_func_5_7~12)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check Preview is correct as GT'):\n            rotate_preview = main_page.snapshot(locator=L.title_designer.main_window,\n                                                  file_name=Auto_Ground_Truth_Folder + 'L164.png')\n            check_current_title = main_page.compare(Ground_Truth_Folder + 'L164.png', rotate_preview)\n\n            if not check_current_title:\n                assert False, \"Preview is not changed correctly as GT (L164.png) !\"\n            assert True"
    },
    {
        "name": "test_title_mgt_func_5_14",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "object_setting",
            "canva"
        ],
        "marked_name": "[test_title_mgt_func_5_14] Undo Rotation > Resize MGT to small",
        "description": [
            "1. Zoom out to 67%",
            "2. Click undo button to set rotation = 0",
            "3. Check rotation value =0",
            "4. Resize MGT to small",
            "5. Check if preview changed correctly after resize"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.object_setting\n    @pytest.mark.canva\n    @pytest.mark.name('[test_title_mgt_func_5_14] Undo Rotation > Resize MGT to small')\n    def test_title_mgt_func_5_14(self):\n    '''\n        1. Zoom out to 67%\n        2. Click undo button to set rotation = 0\n        3. Check rotation value =0\n        4. Resize MGT to small\n        5. Check if preview changed correctly after resize\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_13\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Initial] Reset zoom to 67%'):\n            # Click [Zoom out] twice : 67%\n            for _ in range(2):\n                title_designer_page.click_viewer_zoom_menu('67%')\n                \n        # [L165] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Resize\n        # with uuid(\"1ca3cc38-c3b0-4e76-a6dd-d29e2d813324\") as case:\n\n        with step('[Action] Click undo button to set rotation = 0'):\n            # Click [Undo] button > Rotation = 0\n            title_designer_page.click_undo_btn()\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check rotation value =0'):\n            check_rotation_value = title_designer_page.mgt.get_rotation_value()\n            if check_rotation_value != '0.00':\n                assert False, f\"Rotation value is not correct after undo! Expected: 0.00, Actual: {check_rotation_value}\"\n\n        with step('[Action] Resize MGT to small'):\n            mgt_default_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            # Resize\n            title_designer_page.adjust_title_on_canvas.resize_to_small(x=25, y=30)\n\n        with step('[Verify] Check if preview changed correctly after resize'):\n            mgt_resize_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            if main_page.compare(mgt_default_preview, mgt_resize_preview):\n                assert False, \"MGT is not resized correctly! Similarity should < 0.95\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_15",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "canva"
        ],
        "marked_name": "[test_title_mgt_func_5_15] Move MGT to right",
        "description": [
            "1. Select to other track",
            "2. Move MGT to right",
            "3. Check if preview changed correctly after move"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.canva\n    @pytest.mark.name('[test_title_mgt_func_5_15] Move MGT to right')\n    def test_title_mgt_func_5_15(self):\n    '''\n        1. Select to other track\n        2. Move MGT to right\n        3. Check if preview changed correctly after move\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_14\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L167] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Move\n        # with uuid(\"8a0620c0-7a8a-48c6-945d-640efcf63cbf\") as case:\n\n        with step('[Action] Select to other track'):\n            # Scroll up\n            title_designer_page.drag_object_vertical_slider(0)\n\n            # Switch to other track\n            title_designer_page.mgt.select_title_track('がぎぐげご さしすせ')\n\n        with step('[Action] Move MGT to right'):\n            before_move_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            # Move right\n            title_designer_page.adjust_title_on_canvas.drag_move_MGT_to_right(drag_x=55)\n\n        with step('[Verify] Check if preview changed correctly after move'):\n            mgt_move_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)\n            if main_page.compare(before_move_preview, mgt_move_preview, similarity=0.96):\n                assert False, \"MGT is not moved correctly! Similarity should < 0.96\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_16",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "canva"
        ],
        "marked_name": "[test_title_mgt_func_5_16] Rotate MGT clockwise on canva",
        "description": [
            "1. Rotate MGT clockwise on canva",
            "2. Check if preview changed correctly after rotate"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.canva\n    @pytest.mark.name('[test_title_mgt_func_5_16] Rotate MGT clockwise on canva')\n    def test_title_mgt_func_5_16(self):\n    '''\n        1. Rotate MGT clockwise on canva\n        2. Check if preview changed correctly after rotate\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_15\"\n        self.ensure_dependency(dependency_test)\n\n        # [L166] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Rotate\n\n        # with uuid(\"ffe8e1ca-1579-4072-a267-44c543fc7f43\") as case:\n            # Max window (VDE224621-0024)\n            # title_designer_page.click_maximize_btn()\n        with step('[Action] Rotate MGT clockwise on canva'):\n            before_rotate_preview = main_page.snapshot(locator=L.title_designer.main_window)\n            # Rotate\n            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise('120')\n        \n        with step('[Verify] Check if preview changed correctly after rotate'):\n            after_rotate_preview = main_page.snapshot(locator=L.title_designer.main_window)\n\n            if main_page.compare(before_rotate_preview, after_rotate_preview):\n                assert False, \"MGT is not rotated correctly! Similarity should < 0.95\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_17",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "play_video"
        ],
        "marked_name": "[test_title_mgt_func_5_17] Play the video > Check if preview changed correctly after play",
        "description": [
            "1. Play the video",
            "2. Check if preview changed correctly after play"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_mgt_func_5_17] Play the video > Check if preview changed correctly after play')\n    def test_title_mgt_func_5_17(self):\n    '''\n        1. Play the video\n        2. Check if preview changed correctly after play\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_16\"\n        self.ensure_dependency(dependency_test)\n\n        # [L168] 3.3 Title Designer (motion graphics title) > Preview in designer\n        # with uuid(\"eaaca4e6-220a-4e9f-bf56-15612cc92425\") as case:\n        with step('[Action] Play the video'):\n            # Play then stop\n            title_designer_page.mgt.click_preview_operation('Play')\n        \n        with step('[Verify] Check if preview changed correctly after play'):\n            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)\n            if not check_preview_update:\n                assert False, \"Preview is not updated after play in 2 secs!\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_18",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "play_video"
        ],
        "marked_name": "[test_title_mgt_func_5_18] Stop the video",
        "description": [
            "1. Stop the video",
            "2. Check back to 00:00 after stop video"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_mgt_func_5_18] Stop the video')\n    def test_title_mgt_func_5_18(self):\n    '''\n        1. Stop the video\n        2. Check back to 00:00 after stop video\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Stop the video'):\n            title_designer_page.mgt.click_preview_operation('Stop')\n            time.sleep(DELAY_TIME)\n        \n        with step('[Verify] Check back to 00:00 after stop video'):\n            current_timecode = title_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Current timecode is not correct after stop video! Expected: 00:00:00:00, Actual: {current_timecode}\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_19",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt"
        ],
        "marked_name": "[test_title_mgt_func_5_19] Check preview at 08:16 (from test_title_mgt_func_5_7~18)",
        "description": [
            "1. Set timecode to 00:00:08:16",
            "2. Check if preview changed correctly after set timecode as GT"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.name('[test_title_mgt_func_5_19] Check preview at 08:16 (from test_title_mgt_func_5_7~18)')\n    def test_title_mgt_func_5_19(self):\n    '''\n        1. Set timecode to 00:00:08:16\n        2. Check if preview changed correctly after set timecode as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_18\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set timecode to 00:00:08:16'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_08_16')\n\n        with step('[Verify] Check if preview changed correctly after set timecode as GT'):\n\n            current_timecode_preview = main_page.snapshot(locator=L.title_designer.area.frame_preview, file_name=Auto_Ground_Truth_Folder + 'L168.png')\n\n            if not main_page.compare(Ground_Truth_Folder + 'L168.png', current_timecode_preview):\n                assert False, \"Preview is not changed correctly as GT (L168.png) !\"\n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_20",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "timecode",
            "save_template"
        ],
        "marked_name": "[test_title_mgt_func_5_20] Check preview at 08:16 (from test_title_mgt_func_5_7~18)",
        "description": [
            "1. Set timecode to 00:00:08:16",
            "2. Check if preview changed correctly after set timecode as GT"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.timecode\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_title_mgt_func_5_20] Check preview at 08:16 (from test_title_mgt_func_5_7~18)')\n    def test_title_mgt_func_5_20(self):\n    '''\n        1. Set timecode to 00:00:08:16\n        2. Check if preview changed correctly after set timecode as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_19\"\n        self.ensure_dependency(dependency_test)\n\n        # [L169] 3.3 Title Designer (motion graphics title) > Save / Save as template\n        # with uuid(\"c95ee09b-deb2-48b5-a606-e08332a79148\") as case:\n\n        with step('[Action] Save template'):\n            # Save template\n            main_page.click(L.title_designer.btn_save_as)\n            title_designer_page.click_custom_name_ok('BFT_MGT_Save')\n            # Click [OK]\n            title_designer_page.click_ok()\n\n        with step('[Action] Apply the saved template'):\n            main_page.select_library_icon_view_media('BFT_MGT_Save')\n            main_page.double_click()\n            time.sleep(DELAY_TIME * 2)\n            title_designer_page.mgt.click_warning_msg_ok()\n\n        with step('[Verify] Check if preview changed correctly after apply the saved template as GT'):\n            # Set timecode :\n            title_designer_page.set_timecode('00_00_08_16')\n            time.sleep(DELAY_TIME*2)\n\n            # # Set zoom menu to 67%\n            # title_designer_page.mgt.click_zoom_in()\n            # time.sleep(DELAY_TIME)\n\n            saved_preview = main_page.snapshot(locator=L.title_designer.area.frame_preview,  file_name=Auto_Ground_Truth_Folder + 'L169.png')\n            check_save_result = main_page.compare(Ground_Truth_Folder + 'L168.png', saved_preview, similarity=0.98)\n            assert check_save_result, \"Preview is not changed correctly as GT (L168.png) !\""
    },
    {
        "name": "test_title_mgt_func_5_21",
        "tags": [
            "title_mgt_func",
            "title_designer",
            "mgt",
            "timeline",
            "save_project"
        ],
        "marked_name": "[test_title_mgt_func_5_21] Add saved template to timeline",
        "description": [
            "1. Add saved template to timeline",
            "2. Check if preview changed correctly after set timecode as GT"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.title_designer\n    @pytest.mark.mgt\n    @pytest.mark.timeline\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_title_mgt_func_5_21] Add saved template to timeline')\n    def test_title_mgt_func_5_21(self):\n    '''\n        1. Add saved template to timeline\n        2. Check if preview changed correctly after set timecode as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_mgt_func_5_20\"\n        self.ensure_dependency(dependency_test)\n\n        # [L170] 3.3 Title Designer (motion graphics title) > Add saved\n        # with uuid(\"6f207683-e25a-43e9-96d0-dde73bc9db9b\") as case:\n\n        with step('[Action] Add saved template to timeline'):\n            # Click [OK]\n            title_designer_page.click_ok()\n            # select timeline track 2\n            main_page.timeline_select_track(2)\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_09_00')\n            # Drag BFT_title_Save to timeline track 2\n            main_page.drag_media_to_timeline_playhead_position('BFT_MGT_Save', track_no=2)\n\n        with step('[Verify] Check if preview changed correctly after set timecode as GT'):\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_07_19')\n            time.sleep(DELAY_TIME)\n\n            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L170.png')\n            check_current_title = main_page.compare(Ground_Truth_Folder + 'L170.png', timeline_preview, similarity=0.85)\n            if not check_current_title:\n                assert False, \"Preview is not changed correctly as GT (L170.png) !\"\n\n        with step('[Action] Save project'):\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_title_mgt_func_5_21',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n            \n        assert True"
    },
    {
        "name": "test_title_mgt_func_5_z",
        "tags": [
            "title_mgt_func"
        ],
        "marked_name": "[test_title_mgt_func_5_z] Close AP due to the section is completed",
        "description": [
            "1. Open project and close AP (Show in recent project)",
            "2. Reopen APP and open project from recent project"
        ],
        "full_code": "@pytest.mark.title_mgt_func\n    @pytest.mark.name('[test_title_mgt_func_5_z] Close AP due to the section is completed')\n    def test_title_mgt_func_5_z(self):\n    '''\n        1. Open project and close AP (Show in recent project)\n        2. Reopen APP and open project from recent project\n        '''\nwith step('[Action] Open project and close AP (Show in recent project)'):\n            main_page.start_app()\n            project_name = 'Packed_Project/test_title_search_func_6_1_from_test_title_mgt_func_5_21.pdk'\n            save_name = 'Extracted_Folder/test_title_search_func_6_1'\n            self.open_packed_project(project_name, save_name)\n            main_page.close_app()\n\n        with step('[Action] Reopen APP and open project from recent project'):\n            # launch APP\n            main_page.launch_app()\n            # [L39] 1.3 New Launcher > Project area > Recent Project > Single Click\n            # with uuid(\"18c53c7b-5889-45ea-bac4-c84392ec1ea1\") as case:\n            # Select 1st recently\n            main_page.click(L.base.launcher_window.img_recently_icon)\n\n        with step('[Verify] Check if project is opened correctly'):\n                time.sleep(DELAY_TIME*3) # wait for project loaded\n                # Verify Step:\n                if not main_page.exist(L.base.main_caption):\n                    assert False, 'Cannot find locator main_caption / Not find project name locator'\n                elif main_page.exist(L.base.main_caption).AXValue == 'test_title_search_func_6_1_from_test_title_mgt_func_5_21':\n                    assert True"
    },
    {
        "name": "test_title_search_func_6_2",
        "tags": [
            "title_search_func",
            "title_room",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_title_search_func_6_2] Search library with keyword in title room",
        "description": [
            "1. Enter Title Room with all content category",
            "2. Search library with keyword [winter] and check if [winter wonderland] is found",
            "3. Click cancel search and search again with keyword [Ice Skates] and check if [Ice Skates] is found",
            "4. Click cancel search and search again with keyword [Colorful 01] and check if [Colorful 01] is found"
        ],
        "full_code": "@pytest.mark.title_search_func\n    @pytest.mark.title_room\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_title_search_func_6_2] Search library with keyword in title room')\n    def test_title_search_func_6_2(self):\n    '''\n        1. Enter Title Room with all content category\n        2. Search library with keyword [winter] and check if [winter wonderland] is found\n        3. Click cancel search and search again with keyword [Ice Skates] and check if [Ice Skates] is found\n        4. Click cancel search and search again with keyword [Colorful 01] and check if [Colorful 01] is found\n\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_search_func_6_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Enter Title Room with all content category'):\n            # [L208] 2.3 Title Room > Input some keyword\n            # enter Title room\n            main_page.enter_room(1)\n            # switch to all content category\n            media_room_page.select_specific_category('All Content')\n\n        with step('[Action] Search library with keyword [winter]'):\n            # with uuid(\"1a6f7ebb-0cba-423d-b0f0-a915e606484a\") as case:\n            # Select template (search library: Winter Sticker 01)\n            media_room_page.search_library('winter')\n\n        with step('[Verify] Check if search result is correct [winter wonderland]'):\n            # verify step\n            if not main_page.select_library_icon_view_media('Winter Wonderland'):\n                assert False, \"Cannot find [Winter Wonderland] in search result!\"\n\n        with step('[Action] Click cancel search and search again with keyword [Ice Skates]'):\n            # Click cancel search\n            media_room_page.search_library_click_cancel()\n\n            # Select template (search library: Ice Skates)\n            media_room_page.search_library('Ice Skates')\n\n        with step('[Verify] Check if search result is correct [Ice Skates]'):\n            if not main_page.select_library_icon_view_media('Ice Skates'):\n                assert False, \"Cannot find [Ice Skates] in search result!\"\n        \n        with step('[Action] Click cancel search and search again with keyword [Colorful 01]'):\n            # Click cancel search\n            media_room_page.search_library_click_cancel()\n            # Select template (search library: Colorful 01 )\n            media_room_page.search_library('Colorful 01')\n\n        with step('[Verify] Check if search result is correct [Colorful 01]'):\n            if not main_page.select_library_icon_view_media('Colorful 01'):\n                assert False, \"Cannot find [Colorful 01] in search result!\"\n        assert True"
    },
    {
        "name": "test_title_search_func_6_3",
        "tags": [
            "title_search_func",
            "title_room",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_title_search_func_6_3] Search library with should not found anything keyword in title room",
        "description": [
            "1. Click cancel search and search again with keyword [.] and check if nothing found"
        ],
        "full_code": "@pytest.mark.title_search_func\n    @pytest.mark.title_room\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_title_search_func_6_3] Search library with should not found anything keyword in title room')\n    def test_title_search_func_6_3(self):\n    '''\n        1. Click cancel search and search again with keyword [.] and check if nothing found\n\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_search_func_6_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L209] 2.3 Title Room > Input . character\n        # with uuid(\"4c4db52c-5f66-4ced-b560-b6749ec7da64\") as case:\n\n        with step('[Action] Click cancel search and search again with keyword [.]'):\n            # Click cancel search\n            media_room_page.search_library_click_cancel()\n\n            media_room_page.search_library('.')\n\n        with step('[Verify] Check if search result is correct (Should not find any result)'):\n            # verify result:\n            assert main_page.is_exist(L.media_room.txt_no_results_for_dot), \"Found some result with keyword [.]! Should not find any result!\""
    },
    {
        "name": "test_title_search_func_6_4",
        "tags": [
            "title_search_func",
            "title_room",
            "search_library"
        ],
        "marked_name": "[test_title_search_func_6_4] Check history search in Title Room",
        "description": [
            "1. Enter [Search the library] textbox and show history",
            "2. Check show correct search history"
        ],
        "full_code": "@pytest.mark.title_search_func\n    @pytest.mark.title_room\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_title_search_func_6_4] Check history search in Title Room')\n    def test_title_search_func_6_4(self):\n    '''\n        1. Enter [Search the library] textbox and show history\n        2. Check show correct search history\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_search_func_6_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L211] 2.3 Title Room > check all search keyword\n        # with uuid(\"de131070-6075-4176-84d2-0f4c0c641f6a\") as case:\n\n        with step('[Action] Enter [Search the library] textbox and show history'):\n            # Enter Plain Text category\n            media_room_page.select_LibraryRoom_category('Plain Text')\n\n            # get search filed size / position\n            search_object = main_page.exist(L.media_room.input_search)\n\n            # click search filed\n            main_page.click(L.media_room.input_search)\n            time.sleep(DELAY_TIME * 1.5)\n        \n        with step('[Verify] Check show correct search history'):\n            with step('[Action] Check snapshot region (Region: From import button to My Favorites)'):\n                w, h = search_object.AXSize\n                x, y = search_object.AXPosition\n\n                # snapshot region (Region: From import button to My Favorites)\n                new_x = x\n                new_y = y\n                new_w = w + 5\n                new_h = h * 12\n            all_search_result = main_page.screenshot(file_name=Auto_Ground_Truth_Folder + 'L211_all_search.png', w=new_w, x=new_x, y=new_y, h=new_h)\n            assert main_page.compare(Ground_Truth_Folder + 'L211_all_search.png', all_search_result), \"Search history is not correct as GT (L211_all_search.png)!\""
    },
    {
        "name": "test_title_search_func_6_5",
        "tags": [
            "title_search_func",
            "title_room",
            "open_project"
        ],
        "marked_name": "[test_title_search_func_6_5] Check hint not show in Media room due to import project content in Library",
        "description": [
            "1. Enter Media room",
            "2. Check should NOT show any hint due to import project content in Library"
        ],
        "full_code": "@pytest.mark.title_search_func\n    @pytest.mark.title_room\n    @pytest.mark.open_project\n    @pytest.mark.name('[test_title_search_func_6_5] Check hint not show in Media room due to import project content in Library')\n    def test_title_search_func_6_5(self):\n    '''\n        1. Enter Media room\n        2. Check should NOT show any hint due to import project content in Library\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_title_search_func_6_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L100] 2.1 Media Room > New One Boarding > On Boarding 1 > [Case 2] open one project\n        # with uuid(\"fd97c083-8de8-4d12-b7a9-2ddf7caf9e0d\") as case:\n            # Verify step: should NOT show any hint due to import project's content in Library\n        with step('[Action] Enter Media room'):\n            # enter Media room\n            main_page.enter_room(0)\n\n        with step('[Verify] Should NOT show any hint due to import project content in library'):\n            assert main_page.is_not_exist(L.media_room.string_use_sample_media), \"Show hints in Media room! Should NOT show any hint due to import project content in Library\""
    },
    {
        "name": "test_title_search_func_6_z",
        "tags": [
            "title_search_func"
        ],
        "marked_name": "[test_title_search_func_6_z] Close AP due to the section is completed",
        "description": [
            "1. Open AP and open saved project",
            "2. Select timeline track 3 and set timecode to (09:00)",
            "3. Open PiP designer",
            "4. Search > Select template [Mood 09]",
            "5. Add to timeline",
            "6. Check if template is added to timeline"
        ],
        "full_code": "@pytest.mark.title_search_func\n    @pytest.mark.name('[test_title_search_func_6_z] Close AP due to the section is completed')\n    def test_title_search_func_6_z(self):\n    '''\n        1. Open AP and open saved project\n        2. Select timeline track 3 and set timecode to (09:00)\n        3. Open PiP designer\n        4. Search > Select template [Mood 09]\n        5. Add to timeline\n        6. Check if template is added to timeline\n        '''\nwith step('[Action] Open AP and open saved project'):\n            main_page.start_app()\n            time.sleep(DELAY_TIME)\n\n            project_name = 'Packed_Project/test_pip_designer_func_7_1_from_test_title_mgt_func_5_21.pdk'\n            save_name = 'Extracted_Folder/test_pip_designer_func_7_1'\n            self.open_packed_project(project_name, save_name)\n\n        with step('[Action] Select timeline track 3 and set timecode to (09:00)'):\n            # select timeline track 3\n            main_page.timeline_select_track(3)\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_09_00')\n\n        # [L374] 3.3 Pip Designer (Dialog_09) > Open PiP designer\n        # with uuid(\"4ddeabc0-9f40-4621-bd9a-118beeef450e\") as case:\n        with step('[Action] Open PiP designer'):\n            # enter PiP room\n            main_page.enter_room(4)\n            \n        with step('[Action] Search > Select template [Mood 09]'):\n            # Select template (21.6.5219 : search then select Mood Sticker 09)\n            media_room_page.search_library('Mood 09')\n            main_page.select_library_icon_view_media('Mood 09')\n            # Download IAD template\n            time.sleep(DELAY_TIME * 4)\n\n        with step('[Action] Add to timeline'):\n            main_page.right_click()\n            main_page.select_right_click_menu('Add to Timeline')\n\n        with step('[Action] Set template duration to 10 sec'):\n            main_page.tips_area_click_set_length_of_selected_clip('00_00_10_00')\n\n        with step('[Verify] Check if template is added to timeline'):\n            # On timeline track 2 : Select Dialog_09 > double click to enter pip designer\n            timeline_operation_page.select_timeline_media(track_index=4, clip_index=1)\n            main_page.double_click()\n            check_title = pip_designer_page.get_title()\n            assert check_title == 'Mood 09', f\"Template is not added to timeline! Expected: Mood 09, Actual: {check_title}\""
    },
    {
        "name": "test_pip_designer_func_7_2",
        "tags": [
            "pip_designer_func",
            "pip_designer"
        ],
        "marked_name": "[test_pip_designer_func_7_2] Switch to Advance Mode and Express Mode",
        "description": [
            "1. Check default mode is Express Mode",
            "2. Switch to Advance Mode and check if switch correctly",
            "3. Switch to Express Mode and check if switch correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.name('[test_pip_designer_func_7_2] Switch to Advance Mode and Express Mode')\n    def test_pip_designer_func_7_2(self):\n    '''\n        1. Check default mode is Express Mode\n        2. Switch to Advance Mode and check if switch correctly\n        3. Switch to Express Mode and check if switch correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L375] 3.3 Pip Designer > Switch to [Advance] mode or [Express] Mode\n        # with uuid(\"ef3ed38d-1e2a-483d-a25e-f59b89c4fa5f\") as case:\n\n        with step('[Verify] Check default mode is Express Mode'):\n            get_mode = pip_designer_page.express_mode.get_current_mode()\n            if get_mode != 'Express Mode':\n                assert False, f\"Default mode is not Express Mode! Expected: Express Mode, Actual: {get_mode}\"\n\n        with step('[Action] Switch to [Advance] mode'):\n            pip_designer_page.switch_mode('Advanced')\n\n        with step('[Verify] Check switch to [Advance] mode'):\n            animation_elem = main_page.exist(L.pip_designer.tab_animation)\n            if animation_elem == None:\n                assert False, \"Cannot switch to [Advance] mode!\"\n        \n        with step('[Action] Switch to [Express] mode'):\n            pip_designer_page.switch_mode('Express')\n\n        with step('[Verify] Check switch to [Express] mode'):\n            get_mode = pip_designer_page.express_mode.get_current_mode()\n            if get_mode != 'Express Mode':\n                assert False, f\"Cannot switch to [Express] mode! Expected: Express Mode, Actual: {get_mode}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_3",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_3] Check default value of Opacity",
        "description": [
            "1. Unfold Object Settings",
            "2. Check default value of Opacity"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_3] Check default value of Opacity')\n    def test_pip_designer_func_7_3(self):\n    '''\n        1. Unfold Object Settings\n        2. Check default value of Opacity\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L376] 3.3 Pip Designer > Set in [Properties] > Object Setting - Opacity\n        # with uuid(\"6d387c5c-3982-4b6e-ab94-a79ee7b4cbd0\") as case:\n        with step('[Action] Unfold Object Settings'):\n            # Switch to Express Mode\n            pip_designer_page.switch_mode('Express')\n            # Unfold Object Settings\n            pip_designer_page.express_mode.unfold_properties_object_setting_tab()\n\n        with step('[Verify] Check default value of Opacity'):\n            get_opacity_default = pip_designer_page.express_mode.get_object_setting_opacity_value()\n\n            assert get_opacity_default == '100%', f\"Default value of Opacity is not correct! Expected: 100%, Actual: {get_opacity_default}\""
    },
    {
        "name": "test_pip_designer_func_7_4",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_4] Adjust Opacity value by arrow",
        "description": [
            "1. Adjust Opacity value by arrow",
            "2. Check if Opacity value is changed correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_4] Adjust Opacity value by arrow')\n    def test_pip_designer_func_7_4(self):\n    '''\n        1. Adjust Opacity value by arrow\n        2. Check if Opacity value is changed correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_3\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Adjust Opacity value by arrow'):\n            # Click arrow button to 76%\n            pip_designer_page.express_mode.click_object_setting_opacity_arrow_btn(1,25)\n            pip_designer_page.express_mode.click_object_setting_opacity_arrow_btn(0, 1)\n\n        with step('[Verify] Check if Opacity value is changed correctly'):\n            check_opacity = pip_designer_page.express_mode.get_object_setting_opacity_value()\n            assert check_opacity == '76%', f\"Opacity value is not changed correctly! Expected: 76%, Actual: {check_opacity}. Action: 100>75>76\""
    },
    {
        "name": "test_pip_designer_func_7_5",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "keyframe",
            "timecode",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_5] Add 2 Position Keyframes > Switch to previous keyframe",
        "description": [
            "1. Switch to Advance Mode",
            "2. Add Position (0.5, 0.5) keyframe at (00:00)",
            "3. Add Scale (0.803, 0.68) keyframe at (04:12)",
            "4. Switch to previous keyframe and check if switch to (00:00) keyframe correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_5] Add 2 Position Keyframes > Switch to previous keyframe')\n    def test_pip_designer_func_7_5(self):\n    '''\n        1. Switch to Advance Mode\n        2. Add Position (0.5, 0.5) keyframe at (00:00)\n        3. Add Scale (0.803, 0.68) keyframe at (04:12)\n        4. Switch to previous keyframe and check if switch to (00:00) keyframe correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L381] 3.3 Pip Designer > Object Setting > Able to add position/scale/opacity/Rotation keyframe with correct value\n        # with uuid(\"91625334-9a98-4452-8055-5a199526738f\") as case:\n\n        with step('[Action] Switch to Advance Mode'):\n            pip_designer_page.switch_mode('Advanced')\n\n        with step('[Action] Add Position (0.5, 0.5) keyframe at (00:00)'):\n            # Add position keyframe: 0s Position: (0.5, 0.5)\n            pip_designer_page.add_remove_position_current_keyframe()\n\n        with step('[Action] Add Position (0.803, 0.68) keyframe at (04:12)'):\n            # Set (04:12), Position: (0.803, 0.68)\n            pip_designer_page.set_timecode('00_00_04_12')\n            pip_designer_page.input_x_position_value('0.803')\n            pip_designer_page.input_y_position_value('0.68')\n\n        with step('[Action] Switch to previous keyframe'):\n            # Click previous keyframe\n            pip_designer_page.tap_position_previous_keyframe()\n\n        with step('[Verify] Check if switch to (00:00) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            assert get_timecode == '00:00:00:00', f\"Cannot switch to (00:00) keyframe correctly! Expected: 00:00:00:00, Actual: {get_timecode}\""
    },
    {
        "name": "test_pip_designer_func_7_6",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_6] Switch to next keyframe > Check timecode/ x position/ y position",
        "description": [
            "1. Switch to next keyframe",
            "2. Check if switch to (04:12) keyframe correctly",
            "3. Check if x position is 0.803",
            "4. Check if y position is 0.68"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_6] Switch to next keyframe > Check timecode/ x position/ y position')\n    def test_pip_designer_func_7_6(self):\n    '''\n        1. Switch to next keyframe\n        2. Check if switch to (04:12) keyframe correctly\n        3. Check if x position is 0.803\n        4. Check if y position is 0.68\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            pip_designer_page.tap_position_next_keyframe()\n\n        with step('[Verify] Check if switch to (04:12) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            if get_timecode != '00:00:04:12':\n                assert False, f\"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}\"\n\n        with step('[Verify] Check if x position is 0.803'):\n            get_x_value = pip_designer_page.get_x_position_value()\n            if get_x_value != '0.803':\n                assert False, f\"X position is not 0.803! Expected: 0.803, Actual: {get_x_value}\"\n\n        with step('[Verify] Check if y position is 0.68'):\n            get_y_value = pip_designer_page.get_y_position_value()\n            if get_y_value != '0.680':\n                assert False, f\"Y position is not 0.68! Expected: 0.68, Actual: {get_y_value}\"\n\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_7",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_7] Delete 2nd Position Keyframe > Switch to previous keyframe",
        "description": [
            "1. Set Position (0.350, 0.761) keyframe at (07:15)",
            "2. Click previous keyframe and check if switch to (04:12) keyframe correctly",
            "3. Remove 2nd Position keyframe (only exist 1st, last keyframe)",
            "4. Click next keyframe > previous keyframe and check if switch to (00:00) keyframe correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_7] Delete 2nd Position Keyframe > Switch to previous keyframe')\n    def test_pip_designer_func_7_7(self):\n    '''\n        1. Set Position (0.350, 0.761) keyframe at (07:15)\n        2. Click previous keyframe and check if switch to (04:12) keyframe correctly\n        3. Remove 2nd Position keyframe (only exist 1st, last keyframe)\n        4. Click next keyframe > previous keyframe and check if switch to (00:00) keyframe correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_6\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Set Position (0.350, 0.761) keyframe at (07:15)'):\n            pip_designer_page.set_timecode('00_00_07_15')\n            pip_designer_page.input_x_position_value('0.350')\n            pip_designer_page.input_y_position_value('0.761')\n\n        with step('[Action] Click previous keyframe'):\n            # Click previous keyframe\n            pip_designer_page.tap_position_previous_keyframe()\n\n        with step('[Verify] Check if switch to (04:12) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            if get_timecode != '00:00:04:12':\n                assert False, f\"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}\"\n\n        with step('[Action] Delect position keyframe at (04:12)'):\n            # Remove 2nd Position keyframe (only exist 1st, last keyframe)\n            pip_designer_page.add_remove_position_current_keyframe()\n\n        with step('[Action] Click next keyframe > previous keyframe'):\n            # Click next keyframe\n            pip_designer_page.tap_position_next_keyframe()\n            # Click previous keyframe\n            pip_designer_page.tap_position_previous_keyframe()\n\n        with step('[Verify] Check if switch to (00:00) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            if get_timecode != '00:00:00:00':\n                assert False, f\"Cannot switch to (00:00) keyframe correctly! Expected: 00:00:00:00, Actual: {get_timecode}\"\n\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_8",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_8] Add 2 scale keyframes > Switch to previous keyframe",
        "description": [
            "1. Set Scale width (1.733) keyframe at (04:12)",
            "2. Set Scale height (2.857) keyframe at (07:15) w/o Maintain Aspect Ratio",
            "3. Switch to previous keyframe and check if switch to (04:12) keyframe correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_8] Add 2 scale keyframes > Switch to previous keyframe')\n    def test_pip_designer_func_7_8(self):\n    '''\n        1. Set Scale width (1.733) keyframe at (04:12)\n        2. Set Scale height (2.857) keyframe at (07:15) w/o Maintain Aspect Ratio\n        3. Switch to previous keyframe and check if switch to (04:12) keyframe correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Scale width (1.733) keyframe at (04:12)'):\n            # Set Scale : 1st keyframe\n            pip_designer_page.set_timecode('00_00_04_12')\n            pip_designer_page.drag_scale_width_slider('1.733')\n            pip_designer_page.add_remove_scale_current_keyframe()\n            \n        with step('[Action] Set Scale height (2.857) keyframe at (07:15) w/o Maintain Aspect Ratio'):\n            # Set (07:15)\n            pip_designer_page.set_timecode('00_00_07_15')\n            pip_designer_page.click_scale_maintain_aspect_ratio(bCheck=0)\n            # Set Scale : 2nd keyframe\n            pip_designer_page.input_scale_height_value('2.857')\n\n        with step('[Action] Switch to previous keyframe'):\n            # Click previous keyframe\n            pip_designer_page.tap_scale_previous_keyframe()\n\n        with step('[Verify] Check if switch to (04:12) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            assert get_timecode == '00:00:04:12', f\"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}\""
    },
    {
        "name": "test_pip_designer_func_7_9",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_9] Switch to next keyframe > Check timecode/ height scale/ width scale",
        "description": [
            "1. Switch to next keyframe",
            "2. Check if switch to (07:15) keyframe correctly",
            "3. Check if height scale is 2.857",
            "4. Check if width scale is 1.733"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_9] Switch to next keyframe > Check timecode/ height scale/ width scale')\n    def test_pip_designer_func_7_9(self):\n    '''\n        1. Switch to next keyframe\n        2. Check if switch to (07:15) keyframe correctly\n        3. Check if height scale is 2.857\n        4. Check if width scale is 1.733\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            pip_designer_page.tap_scale_next_keyframe()\n\n        with step('[Verify] Check if switch to (07:15) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            if get_timecode != '00:00:07:15':\n                assert False, f\"Cannot switch to (07:15) keyframe correctly! Expected: 07:15, Actual: {get_timecode}\"\n\n        with step('[Verify] Check if height scale is 2.857'):\n            get_height_value = pip_designer_page.get_scale_height_value()\n            if get_height_value != '2.857':\n                assert False, f\"Height scale is not 2.857! Expected: 2.857, Actual: {get_height_value}\"\n\n        with step('[Verify] Check if width scale is 1.733'):\n            get_width_value = pip_designer_page.get_scale_width_value()\n            if get_width_value != '1.733':\n                assert False, f\"Width scale is not 1.733! Expected: 1.733, Actual: {get_width_value}\"\n\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_10",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_10] Set 2 Rotation Keyframes > Switch to next keyframe",
        "description": [
            "1. Set Rotation (0) keyframe at (04:12)",
            "2. Adjust UI to show Rotation keyframe track",
            "3. Set Rotation (270) keyframe at (03:10)",
            "4. Switch to next keyframe",
            "5. Check if switch to (07:15) keyframe correctly",
            "6. Check if degree is 0"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_10] Set 2 Rotation Keyframes > Switch to next keyframe')\n    def test_pip_designer_func_7_10(self):\n    '''\n        1. Set Rotation (0) keyframe at (04:12)\n        2. Adjust UI to show Rotation keyframe track\n        3. Set Rotation (270) keyframe at (03:10)\n        4. Switch to next keyframe\n        5. Check if switch to (07:15) keyframe correctly\n        6. Check if degree is 0\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_9\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Rotation (0) keyframe at (07:15)'):\n\n            # drag scroll bar\n            pip_designer_page.drag_properties_scroll_bar(0.72)\n            # Set Rotation : 1st keyframe on (04:12)  0 degree\n            pip_designer_page.add_remove_rotation_current_keyframe()\n\n        with step('[Action] Adjust UI to show Rotation keyframe track'):\n            # drag simple timeline to larger (Can see Rotation keyframe track)\n            pip_designer_page.drag_simple_timeline_track_to_lager()\n\n            # Click max button\n            pip_designer_page.click_maximize_btn()\n            # drag properties scroll bar\n            pip_designer_page.drag_properties_scroll_bar(0)\n\n        with step('[Action] Set Rotation (270) keyframe at (03:10)'):\n            # Set Rotation : 2nd keyframe (03:10) 270 degree\n            pip_designer_page.set_timecode('00_00_03_10')\n            pip_designer_page.add_remove_rotation_track_current_keyframe()\n            pip_designer_page.input_rotation_degree_value(270)\n\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            pip_designer_page.tap_rotation_next_keyframe()\n\n        with step('[Verify] Check if switch to (07:15) keyframe correctly'):\n            get_timecode = pip_designer_page.get_timecode()\n            if get_timecode != '00:00:07:15':\n                assert False, f\"Cannot switch to (07:15) keyframe correctly! Expected: 07:15, Actual: {get_timecode}\"\n\n        with step('[Verify] Check if degree is 0'):\n\n           # Check degree\n            current_degree = pip_designer_page.exist(L.pip_designer.object_setting.rotation.degree_value)\n            assert current_degree.AXValue == '0', f\"Degree is not 0! Expected: 0, Actual: {current_degree.AXValue}\""
    },
    {
        "name": "test_pip_designer_func_7_11",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_11] Add 3 Opacity Keyframes > Switch to previous keyframe",
        "description": [
            "1. Set Opacity (100) keyframe at (00:20)",
            "2. Set Opacity (100) keyframe at (01:20)",
            "3. Set Opacity (99) keyframe at (03:10)",
            "4. Swtich to previous keyframe",
            "5. Check if switch to (01:20) keyframe correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_11] Add 3 Opacity Keyframes > Switch to previous keyframe')\n    def test_pip_designer_func_7_11(self):\n    '''\n        1. Set Opacity (100) keyframe at (00:20)\n        2. Set Opacity (100) keyframe at (01:20)\n        3. Set Opacity (99) keyframe at (03:10)\n        4. Swtich to previous keyframe\n        5. Check if switch to (01:20) keyframe correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L385] 3.3 Pip Designer > Adjust keyframe > Add\n        # with uuid(\"9e576f88-8a62-47ff-bc6a-58f75116b112\") as case:\n\n        with step('[Action] Set Opcity (100) keyframe at (00:20)'):\n            # Set Opacity : 1st keyframe (00:20)\n            pip_designer_page.set_timecode('00_00_00_20')\n            pip_designer_page.add_remove_opacity_track_current_keyframe()\n\n        with step('[Action] Set Opcity (100) keyframe at (01:20)'):\n            # Set Opacity : 2nd keyframe (01:20)\n            pip_designer_page.set_timecode('00_00_01_20')\n            pip_designer_page.add_remove_opacity_track_current_keyframe()\n\n        with step('[Action] Set Opcity (99) keyframe at (03:10)'):\n            # Set Opacity : 3rd keyframe (03:10)\n            pip_designer_page.set_timecode('00_00_03_10')\n            pip_designer_page.add_remove_opacity_track_current_keyframe()\n            # Set Opacity to 99% on 3rd keyframe\n            pip_designer_page.express_mode.drag_object_setting_opacity_slider('99')\n\n        with step('[Action] Swtich to previous keyframe'):\n            pip_designer_page.tap_opacity_track_previous_keyframe()\n            \n        with step('[Verify] Check if switch to (01:20) keyframe correctly'):\n            # Verify step:\n            check_timecode = pip_designer_page.get_timecode()\n            assert check_timecode == '00:00:01:20', f\"Cannot switch to (01:20) keyframe correctly! Expected: 01:20, Actual: {check_timecode}\""
    },
    {
        "name": "test_pip_designer_func_7_12",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_12] Switch to next keyframe > Check timecode/ Opacity",
        "description": [
            "1. Set Opacity (25) keyframe at (01:20) and switch to next keyframe",
            "2. Check if switch to (03:10) keyframe correctly",
            "3. Check if Opacity is 99"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_12] Switch to next keyframe > Check timecode/ Opacity')\n    def test_pip_designer_func_7_12(self):\n    '''\n        1. Set Opacity (25) keyframe at (01:20) and switch to next keyframe\n        2. Check if switch to (03:10) keyframe correctly\n        3. Check if Opacity is 99\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_11\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Opacity to 25 and switch to next keyframe'):\n            pip_designer_page.express_mode.drag_object_setting_opacity_slider('25')\n            pip_designer_page.tap_opacity_track_next_keyframe()\n            \n        with step('[Verify] Check if switch to (03:10) keyframe correctly'):\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:03:10':\n                assert False, f\"Cannot switch to (03:10) keyframe correctly! Expected: 03:10, Actual: {check_timecode}\"\n\n        with step('[Verify] Check if Opacity is 99%'):\n            check_opacity = pip_designer_page.express_mode.get_object_setting_opacity_value()\n            if not check_opacity == '99%':\n                assert False, f\"Opacity is not 99%! Expected: 99%, Actual: {check_opacity}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_13",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_13] Switch to (00:00) and check if preview is correct as GT",
        "description": [
            "1. Switch to (00:00) and check if preview is correct as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_13] Switch to (00:00) and check if preview is correct as GT')\n    def test_pip_designer_func_7_13(self):\n    '''\n        1. Switch to (00:00) and check if preview is correct as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L387] 3.3 Pip Designer > Adjust keyframe > Switch keyframe\n        # with uuid(\"fb1acb9f-1c3a-4f23-b1c6-389d9d42d3d5\") as case:\n\n        with step('[Verify] Check if switch to (00:00) keyframe correctly'):\n            pip_designer_page.set_timecode('00_00_00_00')\n            time.sleep(DELAY_TIME*0.2)\n\n            check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L185.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L185.png', check_preview)\n            assert compare_result, \"Preview is not correct as GT (L185.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_14",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_14] Reset all Position keyframe",
        "description": [
            "1. Reset all Position keyframe",
            "2. Check if all Position keyframe is removed (No Next/ Previous keyframe)"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_14] Reset all Position keyframe')\n    def test_pip_designer_func_7_14(self):\n    '''\n        1. Reset all Position keyframe\n        2. Check if all Position keyframe is removed (No Next/ Previous keyframe)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_13\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reset Position keyframe'):\n            # Reset all Position keyframe\n            pip_designer_page.reset_position_keyframe()\n            main_page.click(L.main.confirm_dialog.btn_yes)\n\n        with step('[Verify] Check if all Position keyframe is removed'):\n            # click next keyframe\n            pip_designer_page.tap_position_next_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Position keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n            # click previous keyframe\n            pip_designer_page.tap_position_previous_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Position keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_15",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_15] Reset all Scale keyframe",
        "description": [
            "1. Reset all Scale keyframe",
            "2. Check if all Scale keyframe is removed (No Next/ Previous keyframe)"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_15] Reset all Scale keyframe')\n    def test_pip_designer_func_7_15(self):\n    '''\n        1. Reset all Scale keyframe\n        2. Check if all Scale keyframe is removed (No Next/ Previous keyframe)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_14\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reset all Scale keyframe'):\n            # Reset all Scale keyframe\n            pip_designer_page.reset_scale_keyframe()\n            time.sleep(DELAY_TIME*2)\n            main_page.click(L.main.confirm_dialog.btn_yes)\n        \n        with step('[Verify] Check if all Scale keyframe is removed'):\n            # click next keyframe\n            pip_designer_page.tap_scale_track_next_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Scale keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n            # click previous keyframe\n            pip_designer_page.tap_scale_track_previous_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Scale keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_16",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_16] Reset all Opacity keyframe",
        "description": [
            "1. Reset all Opacity keyframe",
            "2. Check if all Opacity keyframe is removed (No Next/ Previous keyframe)"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_16] Reset all Opacity keyframe')\n    def test_pip_designer_func_7_16(self):\n    '''\n        1. Reset all Opacity keyframe\n        2. Check if all Opacity keyframe is removed (No Next/ Previous keyframe)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_15\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reset all Opacity keyframe'):\n            # Reset all Opacity keyframe\n            pip_designer_page.reset_position_opacity_keyframe()\n            main_page.click(L.main.confirm_dialog.btn_yes)\n        with step('[Verify] Check if all Opacity keyframe is removed'):\n            # click next keyframe\n            pip_designer_page.tap_opacity_track_next_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Opacity keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n            # click previous keyframe\n            pip_designer_page.tap_opacity_track_previous_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Opacity keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_17",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting"
        ],
        "marked_name": "[test_pip_designer_func_7_17] Reset all Rotation keyframe",
        "description": [
            "1. Reset all Rotation keyframe",
            "2. Check if all Rotation keyframe is removed (No Next/ Previous keyframe)"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.name('[test_pip_designer_func_7_17] Reset all Rotation keyframe')\n    def test_pip_designer_func_7_17(self):\n    '''\n        1. Reset all Rotation keyframe\n        2. Check if all Rotation keyframe is removed (No Next/ Previous keyframe)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_16\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Reset all Rotation keyframe'):\n            # Reset all Rotation keyframe\n            pip_designer_page.reset_rotation_keyframe()\n            main_page.click(L.main.confirm_dialog.btn_yes)\n\n        with step('[Verify] Check if all Rotation keyframe is removed'):\n            # click next keyframe\n            pip_designer_page.tap_rotation_track_next_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Rotation keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n            # click previous keyframe\n            pip_designer_page.tap_rotation_track_previous_keyframe()\n            check_timecode = pip_designer_page.get_timecode()\n            if not check_timecode == '00:00:00:00':\n                assert False, f\"Cannot remove all Rotation keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_18",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "keyframe",
            "properties",
            "object_setting",
            "ease_in_out"
        ],
        "marked_name": "[test_pip_designer_func_7_18] Add Ease in/out on keyframe",
        "description": [
            "1. Unfold Object Settings",
            "2. Add 1st keyframe at (00:00) for ease in/ out",
            "3. Add 2nd position keyframe at (05:04) for ease",
            "4. Add 3rd position keyframe at (10:00) for ease",
            "5. Add Ease in on 2nd position keyframe",
            "6. Add Ease out on 2nd position keyframe"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.keyframe\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.ease_in_out\n    @pytest.mark.name('[test_pip_designer_func_7_18] Add Ease in/out on keyframe')\n    def test_pip_designer_func_7_18(self):\n    '''\n        1. Unfold Object Settings\n        2. Add 1st keyframe at (00:00) for ease in/ out\n        3. Add 2nd position keyframe at (05:04) for ease\n        4. Add 3rd position keyframe at (10:00) for ease\n        5. Add Ease in on 2nd position keyframe\n        6. Add Ease out on 2nd position keyframe\n        '''\n# Ensure the dependency test is run and passed\n        self.test_pip_designer_func_7_1()\n\n        with step('[Action] Unfold Object Settings'):\n            # Switch to Advanced Mode\n            pip_designer_page.switch_mode('Advanced')\n            # Unfold Object Settings\n            pip_designer_page.express_mode.unfold_properties_object_setting_tab()\n\n        \n        with step('[Action] Add 1st keyframe at (00:00) for ease in/ out'):\n            # Set Scale  width / height to 0.378\n            pip_designer_page.click_scale_maintain_aspect_ratio(bCheck=1)\n            pip_designer_page.drag_scale_width_slider('0.378')\n\n            # Set Position : 0s (0.919, 0.164)\n            pip_designer_page.input_x_position_value('0.919')\n            pip_designer_page.input_y_position_value('0.164')\n\n            # [L382] 3.3 Pip Designer > Object Settings > Able to set Ease in/out setting\n            # with uuid(\"1a408d6c-fdf1-4e46-9856-e3caaa0bcc65\") as case:\n                # Add position 1st keyframe\n            pip_designer_page.add_remove_position_track_current_keyframe()\n\n        with step('[Verify] Check if position/ timecode is correct for 1st keyframe'):\n            # Check position (x/y) in timecode (00:00)\n            current_timecode = pip_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not 00:00:00:00! Expected: 00:00:00:00, Actual: {current_timecode}\"\n            check_x_position = pip_designer_page.get_x_position_value()\n            if check_x_position != '0.919':\n                assert False, f\"X position is not 0.919! Expected: 0.919, Actual: {check_x_position}\"\n            check_y_position = pip_designer_page.get_y_position_value()\n            if check_y_position != '0.164':\n                assert False, f\"Y position is not 0.164! Expected: 0.164, Actual: {check_y_position}\"\n\n        with step('[Action] Add 2nd position keyframe at (05:04) for ease in/ out'):\n            pip_designer_page.set_timecode('00_00_05_04')\n            pip_designer_page.input_x_position_value('0.106')\n        \n        with step('[Verify] Check if position/ timecode is correct for 2nd keyframe'):\n            # Check position (x/y) in timecode (05:04)\n            current_timecode = pip_designer_page.get_timecode()\n            if current_timecode != '00:00:05:04':\n                assert False, f\"Timecode is not 00:00:05:04! Expected: 00:00:05:04, Actual: {current_timecode}\"\n            check_x_position = pip_designer_page.get_x_position_value()\n            if check_x_position != '0.106':\n                assert False, f\"X position is not 0.106! Expected: 0.106, Actual: {check_x_position}\"\n            check_y_position = pip_designer_page.get_y_position_value()\n            if check_y_position != '0.164':\n                assert False, f\"Y position is not 0.164! Expected: 0.164, Actual: {check_y_position}\"\n\n        with step('[Action] Add 3rd position keyframe at (10:00) for ease in/ out'):\n            pip_designer_page.set_timecode('00_00_10_00')\n            pip_designer_page.input_x_position_value('0.894')\n            pip_designer_page.input_y_position_value('0.836')\n\n        with step('[Verify] Check if position/ timecode is correct for 3rd keyframe'):\n            # Check position (x/y) in timecode (10:00)\n            current_timecode = pip_designer_page.get_timecode()\n            if current_timecode != '00:00:10:00':\n                assert False, f\"Timecode is not 00:00:10:00! Expected: 00:00:10:00, Actual: {current_timecode}\"\n            check_x_position = pip_designer_page.get_x_position_value()\n            if check_x_position != '0.894':\n                assert False, f\"X position is not 0.894! Expected: 0.894, Actual: {check_x_position}\"\n            check_y_position = pip_designer_page.get_y_position_value()\n            if check_y_position != '0.836':\n                assert False, f\"Y position is not 0.836! Expected: 0.836, Actual: {check_y_position}\"\n\n        with step('[Action] Add Ease in on second position keyframe'):\n            # switch to previous keyframe\n            pip_designer_page.tap_position_previous_keyframe()\n            # Enable Ease in and Ease out on keyframe\n            pip_designer_page.click_position_ease_in_checkbox(1)\n            pip_designer_page.input_position_ease_in_value('0.88')\n\n        with step('[Verify] Check if Ease in setting is correct'):\n            # Verify Step\n            pip_designer_page.click_specific_keyframe(1)\n            check_menu_ease_in_status = pip_designer_page.simple_timeline.right_click_menu.get_ease_in_status()\n            if not check_menu_ease_in_status:\n                assert False, \"Cannot set Ease in on keyframe correctly!\"\n\n        with step('[Action] Add Ease out on second position keyframe'):\n            pip_designer_page.click_position_ease_out_checkbox(1)\n            pip_designer_page.input_position_ease_out_value('0.97')\n\n        with step('[Verify] Check if Ease out setting is correct'):\n            pip_designer_page.click_specific_keyframe(1)\n            check_menu_ease_out_status = pip_designer_page.simple_timeline.right_click_menu.get_ease_out_status()\n            if not check_menu_ease_out_status:\n                assert False, \"Cannot set Ease out on keyframe correctly!\"\n        assert True\n\n        # # [L386] 3.3 Pip Designer > Adjust keyframe > Remove\n        # with uuid(\"8249bb39-3372-4174-9cf8-813a881f9816\") as case:\n        #     # Remove Position keyframe: 1st , 2nd\n        #     for x in range(2):\n        #         # Click previous keyframe\n        #         pip_designer_page.tap_position_track_previous_keyframe()\n        #         # Remove keyframe\n        #         pip_designer_page.add_remove_position_current_keyframe()\n\n        #     # Remove Position keyframe: 3rd\n        #     pip_designer_page.tap_position_next_keyframe()\n        #     pip_designer_page.add_remove_position_current_keyframe()\n\n        #     # Verify Step:\n        #     # Click previous keyframe\n        #     pip_designer_page.tap_position_track_previous_keyframe()\n\n        #     check_timecode = pip_designer_page.get_timecode()\n        #     logger(check_timecode)\n        #     if check_timecode == '00:00:10:00':\n        #         remove_keyframe_ok = True\n        #     else:\n        #         remove_keyframe_ok = False\n\n        #     case.result = remove_keyframe_ok"
    },
    {
        "name": "test_pip_designer_func_7_19",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "motion",
            "path"
        ],
        "marked_name": "[test_pip_designer_func_7_19] Apply Path Template",
        "description": [
            "1. Set path template",
            "2. Check if path template is set correctly as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.motion\n    @pytest.mark.path\n    @pytest.mark.name('[test_pip_designer_func_7_19] Apply Path Template')\n    def test_pip_designer_func_7_19(self):\n    '''\n        1. Set path template\n        2. Check if path template is set correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L400] 3.3 Pip Designer > Set [Motion] > Select Path\n        # with uuid(\"39370a35-82b8-44e5-a531-5560b5062ef0\") as case:\n        # with step('[Action] Set opacity to 100'):\n        #     # Set opacity = 100\n        #     pip_designer_page.express_mode.drag_object_setting_opacity_slider('100')\n\n        with step('[Action] Set path template'):\n            # Switch to motion > Unfold path menu\n            pip_designer_page.advanced.switch_to_motion()\n            pip_designer_page.advanced.unfold_path_menu()\n            # Select path template\n            pip_designer_page.path.select_template(index=3)\n            # You have not saved the changes ... Do you want to save the changes now? Click [No]\n            main_page.exist_click(L.title_designer.backdrop.warning.btn_no)\n\n        with step('[Verify] Check if path template is set correctly as GT'):\n            # Verify Step\n            pip_designer_page.set_timecode('00_00_04_00')\n            time.sleep(DELAY_TIME)\n            check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L188.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L188.png', check_preview, similarity=0.85)\n\n            assert compare_result, \"Path template is not set correctly as GT(L188.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_20",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "object_setting",
            "canva"
        ],
        "marked_name": "[test_pip_designer_func_7_20] Resize Object on Canvas",
        "description": [
            "1. Switch to properties",
            "2. Set Rotation (0)",
            "3. Resize on Canvas : To larger",
            "4. Check if resize on canvas is correct by checking scale size"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.canva\n    @pytest.mark.name('[test_pip_designer_func_7_20] Resize Object on Canvas')\n    def test_pip_designer_func_7_20(self):\n    '''\n        1. Switch to properties\n        2. Set Rotation (0)\n        3. Resize on Canvas : To larger\n        4. Check if resize on canvas is correct by checking scale size\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to properties'):\n            # fold path menu\n            pip_designer_page.advanced.unfold_path_menu(0)\n            # Switch to properties\n            pip_designer_page.advanced.switch_to_properties()\n\n        # [L388] 3.3 Pip Designer > Manual adjust on canvas\n        # with uuid(\"8a6515af-cdf1-4c1b-ac78-ac44dca720ca\") as case:\n\n        with step('[Action] Set Rotation (0)'):\n            # Set rotation to 0\n            pip_designer_page.input_rotation_degree_value(0)\n\n        with step('[Action] Resize on Canvas : To larger'):\n            # Resize on Canvas : To larger\n            pip_designer_page.resize_on_canvas(drag_x=75, drag_y=60)\n\n        with step('[Verify] Check if resize on canvas is correct by checking scale size'):\n            # Verify Step: check scale size\n            width_text_field = main_page.exist(L.pip_designer.object_setting.scale.width_value)\n            assert float(width_text_field.AXValue)>0.378, f\"Cannot resize on canvas correctly! Expected: > 0.378, Actual: {width_text_field.AXValue}\""
    },
    {
        "name": "test_pip_designer_func_7_21",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "object_setting",
            "canva"
        ],
        "marked_name": "[test_pip_designer_func_7_21] Move Object to Left on Canvas",
        "description": [
            "1. Move object to left on Canvas",
            "2. Check if move object to left on canvas is correct"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.object_setting\n    @pytest.mark.canva\n    @pytest.mark.name('[test_pip_designer_func_7_21] Move Object to Left on Canvas')\n    def test_pip_designer_func_7_21(self):\n    '''\n        1. Move object to left on Canvas\n        2. Check if move object to left on canvas is correct\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_20\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Move object to left on Canvas'):\n            # Move object to left on Canvas\n            pip_designer_page.move_to_left_on_canvas(drag_x=40)\n\n        with step('[Verify] Check if move object to left on canvas is correct'):\n            # Verify Step: check position x value\n            current_x_value = pip_designer_page.get_x_position_value()\n            #if (current_x_value == '0.292') or (current_x_value == '0.285') or (current_x_value == '0.284'):\n            assert float(current_x_value)>0.25, f\"Cannot move object to left on canvas correctly! Expected: >0.25, Actual: {current_x_value}\""
    },
    {
        "name": "test_pip_designer_func_7_22",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "flip"
        ],
        "marked_name": "[test_pip_designer_func_7_22] Flip Horizontally and Vertically",
        "description": [
            "1. Set Flip Horizontally and check preview",
            "2. Set Flip Vertically and check preview",
            "3. Check if Flip Horizontally and Vertically is correct as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.flip\n    @pytest.mark.name('[test_pip_designer_func_7_22] Flip Horizontally and Vertically')\n    def test_pip_designer_func_7_22(self):\n    '''\n        1. Set Flip Horizontally and check preview\n        2. Set Flip Vertically and check preview\n        3. Check if Flip Horizontally and Vertically is correct as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_21\"\n        self.ensure_dependency(dependency_test)\n\n        # [L383] 3.3 Pip Designer > Set in [Properties] > Flip\n        # with uuid(\"a249d010-4d02-499a-9309-c57675e8b5a9\") as case:\n\n        with step('[Action] Set Flip Horizontally'):\n            before_flip_horizontally = main_page.snapshot(locator=L.pip_designer.preview)\n            pip_designer_page.apply_flip_horizontally()\n        \n        with step('[Verify] Check if preview changed correctly after apply Flip Horizontally'):\n            after_flip_horizontally = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_flip_horizontally, after_flip_horizontally, similarity=0.98):\n                assert False, \"Preview is not changed correctly after apply Flip Horizontally!\"\n\n        with step('[Action] Set Flip Vertically'):\n            pip_designer_page.apply_flip_vertically()\n        \n        with step('[Verify] Check if preview changed correctly after apply Flip Vertically'):\n            after_flip_vertically = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(after_flip_horizontally, after_flip_vertically, similarity=0.98):\n                assert False, \"Preview is not changed correctly after apply Flip Vertically!\"\n\n        with step('[Verify] Check if Flip Horizontally and Vertically is correct as GT'):\n            pip_designer_page.set_timecode('00_00_02_10')\n            timeline_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                                  file_name=Auto_Ground_Truth_Folder + 'L181.png')\n            check_current_result = main_page.compare(Ground_Truth_Folder + 'L181.png', timeline_preview,\n                                                     similarity=0.9)\n            assert check_current_result, \"Flip Horizontally and Vertically is not correct as GT(L181.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_22",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "motion"
        ],
        "marked_name": "[test_pip_designer_func_7_22] Set only show selected track on motion",
        "description": [
            "1. Switch to motion",
            "2. Set [Only show selected track]",
            "3. Check if [Only show selected track] box value is correct",
            "4. Check if [Only show selected track] is correct as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.motion\n    @pytest.mark.name('[test_pip_designer_func_7_22] Set only show selected track on motion')\n    def test_pip_designer_func_7_22(self):\n    '''\n        1. Switch to motion\n        2. Set [Only show selected track]\n        3. Check if [Only show selected track] box value is correct\n        4. Check if [Only show selected track] is correct as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_21\"\n        self.ensure_dependency(dependency_test)\n\n        # [L384] 3.3 Pip Designer > Only show the selected track in preview\n        # with uuid(\"888b424f-1eab-496e-9288-6fda16cf3b57\") as case:\n\n        with step('[Action] Switch to motion'):\n            # Fold Object Settings\n            pip_designer_page.express_mode.unfold_properties_object_setting_tab(unfold=0)\n            # Switch to motion\n            pip_designer_page.advanced.switch_to_motion()\n\n        with step('[Action] Set [Only show selected track]'):\n            # Tick [Only show selected track]\n            main_page.click(L.pip_designer.show_the_selected_track)\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check if [Only show selected track] box value is correct'):\n            # Verify Step\n            check_checkbox = pip_designer_page.get_selected_track_checkbox_status()\n            if check_checkbox != 'Tick':\n                assert False, \"Cannot set [Only show selected track] correctly!\"\n\n        with step('[Verify] Check if [Only show selected track] is correct as GT'):\n            pip_designer_page.set_timecode('00_00_05_25')\n            check_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L182.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L182.png', check_preview)\n            if not compare_result:\n                assert False, \"Only show selected track is not correct as GT(L182.png)!\"\n\n        with step('[Initial] Un-Tick [Only show selected track]'):\n            # Un-Tick [Only show selected track]\n            main_page.click(L.pip_designer.show_the_selected_track)\n\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_23",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "motion",
            "motion_blur"
        ],
        "marked_name": "[test_pip_designer_func_7_23] Apply Motion Blur -- Length and Density",
        "description": [
            "1. Set Motion Blur",
            "2. Set Blur length = 1.88 and check if Blur length is set correctly",
            "3. Set Blur density = 28 and check if Blur density is set correctly",
            "4. Check if Motion Blur is correct as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.motion\n    @pytest.mark.motion_blur\n    @pytest.mark.name('[test_pip_designer_func_7_23] Apply Motion Blur -- Length and Density')\n    def test_pip_designer_func_7_23(self):\n    '''\n        1. Set Motion Blur\n        2. Set Blur length = 1.88 and check if Blur length is set correctly\n        3. Set Blur density = 28 and check if Blur density is set correctly\n        4. Check if Motion Blur is correct as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_22\"\n        self.ensure_dependency(dependency_test)\n\n        # [L401] 3.3 Pip Designer > Set [Motion Blur]\n        # with uuid(\"6ab4ebf9-4369-4944-bc0e-93eded165757\") as case:\n\n        with step('[Action] Set Motion Blur'):\n            # Unfold Motion Blur\n            pip_designer_page.advanced.unfold_motion_blur_menu()\n            # Set checkbox of Motion Blur\n            pip_designer_page.motion_blur.set_checkbox(tick=1)\n\n        with step('[Action] Set Blur length = 1.88'):\n            # Set Blur length = 1.88\n            pip_designer_page.motion_blur.length.set_value(1.88)\n\n        with step('[Verify] Check if Blur length is set correctly'):\n            # Verify Step\n            get_length = pip_designer_page.motion_blur.length.get_value()\n            if get_length != '1.88':\n                assert False, f\"Blur length is not 1.88! Expected: 1.88, Actual: {get_length}\"\n\n        with step('[Action] Set Blur density = 28'):\n            # Set Blur density = 28\n            pip_designer_page.motion_blur.density.adjust_slider(28)\n\n        with step('[Verify] Check if Blur density is set correctly'):\n            get_density = pip_designer_page.motion_blur.density.get_value()\n            if get_density != '28':\n                assert False, f\"Blur density is not 28! Expected: 28, Actual: {get_density}\"\n\n\n        with step('[Verify] Check if Motion Blur is correct as GT'):\n            pip_designer_page.set_timecode('00_00_02_10')\n            check_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L181.png')\n\n            # Compare preview is changed when apply motion blur\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L181.png', check_preview, similarity=0.98)\n            assert compare_result, \"Motion Blur is not correct as GT(L181.png)!\"\n\n            # case.result = (not compare_result) and check_length and check_density"
    },
    {
        "name": "test_pip_designer_func_7_24",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "border"
        ],
        "marked_name": "[test_pip_designer_func_7_24] Check Default Border/ Set Border size by arrow",
        "description": [
            "1. Apply Border",
            "2. Check if Default size is 3",
            "3. Set Border size = 7 by arrow button",
            "4. Check if Border size chagned by UI"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.border\n    @pytest.mark.name('[test_pip_designer_func_7_24] Check Default Border/ Set Border size by arrow')\n    def test_pip_designer_func_7_24(self):\n    '''\n        1. Apply Border\n        2. Check if Default size is 3\n        3. Set Border size = 7 by arrow button\n        4. Check if Border size chagned by UI\n        '''\n# Ensure the dependency test is run and passed\n        self.test_pip_designer_func_7_1()\n        # [L378] 3.3 Pip Designer > Set in [Properties] > Border\n        # with uuid(\"fb425a56-1501-4a70-a285-f9398d894f8a\") as case:\n\n        with step('[Action] Apply Border'):\n            # switch to advanced mode\n            pip_designer_page.switch_mode('Advanced')\n            # Switch to properties\n            pip_designer_page.advanced.switch_to_properties()\n            # Fold Object Settings\n            pip_designer_page.express_mode.unfold_properties_object_setting_tab(unfold=0)\n            # Apply border\n            pip_designer_page.apply_border()\n        \n        with step('[Verify] Check if Default size is 3'):\n            # Check Default size\n            current_value = pip_designer_page.express_mode.get_border_size_value()\n            if current_value != '3':\n                assert False, f\"Default size is not 3! Expected: 3, Actual: {current_value}\"\n\n        with step('[Action] Set Border size = 7 by arrow button'):\n            before_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            # Set Border size = 7\n            pip_designer_page.express_mode.click_border_size_arrow_btn(0,4)\n\n        with step('[Verify] Check if Border size chagned by UI'):\n            border_size_changed = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_preview, border_size_changed, similarity=0.999):\n                assert False, \"Border size is not changed by UI!\"\n\n        with step('[Verify] Check if Border size is set correctly'):\n            current_value = pip_designer_page.express_mode.get_border_size_value()\n            assert current_value == '7', f\"Border size is not 7 after modified by arrow! Expected: 7, Actual: {current_value}\""
    },
    {
        "name": "test_pip_designer_func_7_25",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "border",
            "blur"
        ],
        "marked_name": "[test_pip_designer_func_7_25] Apply Border -- Blur",
        "description": [
            "1. Set Border -- Blur value = 3",
            "2. Check if Border -- blur value is set correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.border\n    @pytest.mark.blur\n    @pytest.mark.name('[test_pip_designer_func_7_25] Apply Border -- Blur')\n    def test_pip_designer_func_7_25(self):\n    '''\n        1. Set Border -- Blur value = 3\n        2. Check if Border -- blur value is set correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_24\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Border -- Blur value = 3'):\n            # Set Blur = 3\n            pip_designer_page.express_mode.input_border_blur_value('3')\n\n        with step('[Verify] Check if Border -- blur value is set correctly'):\n            current_value = pip_designer_page.express_mode.get_border_blur_value()\n            assert current_value == '3', f'Border blur value is not 3! Expected: 3, Actual: {current_value}'"
    },
    {
        "name": "test_pip_designer_func_7_26",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "border",
            "opacity"
        ],
        "marked_name": "[test_pip_designer_func_7_26] Apply Border -- Opacity",
        "description": [
            "1. Set Border -- Opacity = 96%",
            "2. Check if Border -- opacity value is set correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.border\n    @pytest.mark.opacity\n    @pytest.mark.name('[test_pip_designer_func_7_26] Apply Border -- Opacity')\n    def test_pip_designer_func_7_26(self):\n    '''\n        1. Set Border -- Opacity = 96%\n        2. Check if Border -- opacity value is set correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_25\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Apply Border -- Opacity = 96%'):\n            # Set opacity = 96%\n            pip_designer_page.express_mode.drag_border_opacity_slider('96')\n\n        with step('[Verify] Check if Border -- opacity value is set correctly'):\n            current_value = pip_designer_page.express_mode.get_border_opacity_value()\n            assert current_value == '96%', f'Border opacity value is not 96%! Expected: 96%, Actual: {current_value}'"
    },
    {
        "name": "test_pip_designer_func_7_27",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "border",
            "color"
        ],
        "marked_name": "[test_pip_designer_func_7_27] Apply Border -- Color as 0F2E12",
        "description": [
            "1. Apply Border -- Color as 0F2E12",
            "2. Check if Border -- color is set correctly"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.border\n    @pytest.mark.color\n    @pytest.mark.name('[test_pip_designer_func_7_27] Apply Border -- Color as 0F2E12')\n    def test_pip_designer_func_7_27(self):\n    '''\n        1. Apply Border -- Color as 0F2E12\n        2. Check if Border -- color is set correctly\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_26\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Set Border -- Color as 0F2E12'):\n            before_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            # Set color\n            pip_designer_page.express_mode.set_border_uniform_color('0F2E12')\n\n        with step('[Verify] Check if Border -- color is set correctly'):\n            applied_color = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_preview, applied_color, similarity=0.999):\n                assert False, \"Border color is not changed correctly!\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_28",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "shadow",
            "distance"
        ],
        "marked_name": "[test_pip_designer_func_7_28] Set Shadow -- Distance",
        "description": [
            "1. Enter Shadow menu",
            "2. Set Shadow -- Distance = 37.1",
            "3. Check if preview changed after adjust shadow distance"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.shadow\n    @pytest.mark.distance\n    @pytest.mark.name('[test_pip_designer_func_7_28] Set Shadow -- Distance')\n    def test_pip_designer_func_7_28(self):\n    '''\n        1. Enter Shadow menu\n        2. Set Shadow -- Distance = 37.1\n        3. Check if preview changed after adjust shadow distance\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_27\"\n        self.ensure_dependency(dependency_test)\n\n        # [L379] 3.3 Pip Designer > Set in [Properties] > Shadow\n        # with uuid(\"bad37a4f-6327-42ed-8214-4e245fdaa0a2\") as case:\n        with step('[Action] Enter Shadow menu'):\n            # Fold border menu\n            pip_designer_page.express_mode.unfold_properties_border_tab(0)\n            # Unfold shadow menu\n            pip_designer_page.express_mode.unfold_properties_shadow_tab(1)\n            # Enable Shadow\n            pip_designer_page.apply_shadow()\n\n        with step('[Action] Set Shadow -- Distance = 37.1'):\n            before_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            # Set distance = 37.1\n            pip_designer_page.express_mode.input_shadow_distance_value('37.1')\n\n        with step('[Verify] Check if preview changed after adjust shadow distance'):\n            adjusted_distance = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_preview, adjusted_distance, similarity=0.98):\n                assert False, \"Shadow distance is not changed correctly!\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_29",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "properties",
            "shadow",
            "color"
        ],
        "marked_name": "[test_pip_designer_func_7_29] Apply Shadow -- Color",
        "description": [
            "1. Set Shadow -- Color = B7AFE3",
            "2. Check if preview changed after apply shadow color",
            "3. Check if preview changed correctly as GT (test_pip_designer_func_7_28~29)"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.shadow\n    @pytest.mark.color\n    @pytest.mark.name('[test_pip_designer_func_7_29] Apply Shadow -- Color')\n    def test_pip_designer_func_7_29(self):\n    '''\n        1. Set Shadow -- Color = B7AFE3\n        2. Check if preview changed after apply shadow color\n        3. Check if preview changed correctly as GT (test_pip_designer_func_7_28~29)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_28\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Shadow -- Color = B7AFE3'):\n            before_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            # Set color\n            pip_designer_page.express_mode.set_shadow_select_color('B7AFE3')\n\n        with step('[Verify] Check if preview changed after apply shadow color'):\n            adjusted_color = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_preview, adjusted_color, similarity=0.998):\n                assert False, \"Shadow color is not changed correctly!\"\n\n        with step('[Verify] Check if preview changed correctly as GT (test_pip_designer_func_7_28~29)'):\n            check_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L189.png')\n\n            # Compare preview is changed when apply Shadow\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L189.png', check_preview)\n            assert compare_result, \"Shadow color is not correct as GT(L189.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_30",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "properties",
            "fades",
            "fade_in_out"
        ],
        "marked_name": "[test_pip_designer_func_7_30] Fades -- Fade-in",
        "description": [
            "1. Enter Properties Fades menu",
            "2. Set Fade-in",
            "3. Check if preview changed after apply fade-in"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.properties\n    @pytest.mark.fades\n    @pytest.mark.fade_in_out\n    @pytest.mark.name('[test_pip_designer_func_7_30] Fades -- Fade-in')\n    def test_pip_designer_func_7_30(self):\n    '''\n        1. Enter Properties Fades menu\n        2. Set Fade-in\n        3. Check if preview changed after apply fade-in\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_29\"\n        self.ensure_dependency(dependency_test)\n\n        # [L380] 3.3 Pip Designer > Set in [Properties] > Fade\n        # with uuid(\"50370c50-3035-42d5-bab2-34a04165c2e2\") as case:\n\n        with step('[Action] Enter Properties Fades menu'):\n            # Fold shadow menu\n            pip_designer_page.express_mode.unfold_properties_shadow_tab(0)\n            # Unfold fades menu\n            pip_designer_page.express_mode.unfold_properties_fades_tab(type=1, unfold=1)\n            # Apply faddes\n            pip_designer_page.apply_fades()\n\n        with step('[Action] Set Fade-in'):\n\n            # Set timecode (00:00:00:24)\n            pip_designer_page.set_timecode('00_00_00_24')\n            time.sleep(DELAY_TIME)\n            no_fade_in_preview = main_page.snapshot(locator=L.pip_designer.preview)\n\n            # Apply fade-in and fade-out\n            pip_designer_page.apply_enable_fade_in()\n\n        with step('[Verify] Check if preview changed after apply fade-in'):\n            has_fade_in_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(no_fade_in_preview, has_fade_in_preview, similarity=0.99):\n                assert False, \"Fade-in is not changed correctly!\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_31",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "properties",
            "fades",
            "fade_in_out"
        ],
        "marked_name": "[test_pip_designer_func_7_31] Fades -- Fade-out",
        "description": [
            "1. Set Fade-out",
            "2. Check if preview changed after apply fade-out"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.properties\n    @pytest.mark.fades\n    @pytest.mark.fade_in_out\n    @pytest.mark.name('[test_pip_designer_func_7_31] Fades -- Fade-out')\n    def test_pip_designer_func_7_31(self):\n    '''\n        1. Set Fade-out\n        2. Check if preview changed after apply fade-out\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_30\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Fade-out'):\n            # Set timecode (00:00:08:23)\n            pip_designer_page.set_timecode('00_00_08_23')\n            no_fade_out_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            pip_designer_page.apply_enable_fade_out()\n\n        with step('[Verify] Check if preview changed after apply fade-out'):\n            has_fade_out_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(no_fade_out_preview, has_fade_out_preview, similarity=0.99):\n                assert False, \"Fade-out is not changed correctly!\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_32",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "properties",
            "chroma_key",
            "color"
        ],
        "marked_name": "[test_pip_designer_func_7_32] Set Chroma Key -- Color",
        "description": [
            "1. Enter Properties Chroma Key menu",
            "2. Click dropper button",
            "3. Select one color",
            "4. Check if preview changed after apply chroma key",
            "5. Check if preview changed correctly as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.properties\n    @pytest.mark.chroma_key\n    @pytest.mark.color\n    @pytest.mark.name('[test_pip_designer_func_7_32] Set Chroma Key -- Color')\n    def test_pip_designer_func_7_32(self):\n    '''\n        1. Enter Properties Chroma Key menu\n        2. Click dropper button\n        3. Select one color\n        4. Check if preview changed after apply chroma key\n        5. Check if preview changed correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_31\"\n        self.ensure_dependency(dependency_test)\n\n        # [L377] 3.3 Pip Designer > Set in [Properties] > Chroma Key\n        # with uuid(\"3b57839e-be4f-45b4-9cf6-e11bf494a44b\") as case:\n        with step('[Action] Enter Properties Chroma Key menu'):\n            # Fold fades menu\n            pip_designer_page.express_mode.unfold_properties_fades_tab(type=1, unfold=0)\n            # Unfold chroma key menu\n            # pip_designer_page.express_mode.unfold_properties_chroma_key_tab(unfold=1)\n            # Apply Chroma key\n            pip_designer_page.apply_chromakey()\n            \n        with step('[Action] Click dropper button'):\n            # Set timecode (00:00:04:00)\n            pip_designer_page.set_timecode('00_00_04_00')\n            before_preview = main_page.snapshot(locator=L.pip_designer.preview)\n            # Click dropper button\n            main_page.click(L.pip_designer.chromakey.btn_dropper)\n\n        with step('[Action] Select one color'):\n            # Select one color\n            pip_object = main_page.exist(L.pip_designer.preview)\n            org_pos = pip_object.AXPosition\n            size_w, size_h = pip_object.AXSize\n\n            des_pos = (org_pos[0] + size_w * 0.5, org_pos[1] + size_h * 0.35)\n            main_page.mouse.click(*des_pos)\n\n        with step('[Verify] Check if preview changed after apply chroma key'):\n            applied_chromakey = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(before_preview, applied_chromakey, similarity=0.99):\n                assert False, \"Chroma key is not changed correctly!\"\n\n        with step('[Verify] Check if preview changed correctly as GT'):\n            check_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L175.png')\n            # Compare preview after apply chromakey\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L175.png', check_preview, similarity=0.8)\n            assert compare_result, \"Chroma key is not correct as GT(L175.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_33",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "animation",
            "in_out_animation"
        ],
        "marked_name": "[test_pip_designer_func_7_33] Apply In Animation",
        "description": [
            "1. Enter In Animation Menu",
            "2. Apply in animation",
            "3. Check if preview changed after apply in animation as GT"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.animation\n    @pytest.mark.in_out_animation\n    @pytest.mark.name('[test_pip_designer_func_7_33] Apply In Animation')\n    def test_pip_designer_func_7_33(self):\n    '''\n        1. Enter In Animation Menu\n        2. Apply in animation\n        3. Check if preview changed after apply in animation as GT\n        '''\nself.test_pip_designer_func_7_1()\n\n        # [L389] 3.3 Pip Designer > Set Animation\n        # with uuid(\"34f35e0f-aff7-46bc-8624-81866440a7f8\") as case:\n        with step('[Action] Enter In Animation Menu'):\n            # switch to advanced mode\n            pip_designer_page.switch_mode('Advanced')\n            pip_designer_page.advanced.switch_to_animation()\n            pip_designer_page.advanced.unfold_in_animation_menu(1)\n\n        with step('[Action] Apply in animation'):\n            # Apply (Brush Transition 02) animation\n            #pip_designer_page.in_animation.select_effect('Glitch')\n            pip_designer_page.in_animation.select_template(10)\n\n        with step('[Verify] Check if preview changed after apply in animation as GT'):\n            # Set timecode (00:00:01:09)\n            pip_designer_page.set_timecode('00_00_01_09')\n            time.sleep(DELAY_TIME * 3)\n            check_preview = main_page.snapshot(locator=L.pip_designer.preview,\n                                               file_name=Auto_Ground_Truth_Folder + 'L187.png')\n\n            # Compare preview after apply chromakey\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L187.png', check_preview, similarity=0.9)\n            assert compare_result, \"In animation is not correct as GT(L187.png)! Similary should>0.9\""
    },
    {
        "name": "test_pip_designer_func_7_34",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_pip_designer_func_7_34] Play Video",
        "description": [
            "1. Switch to Express mode",
            "2. Press Space key to play video",
            "3. Check if preview changed correctly after play"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_pip_designer_func_7_34] Play Video')\n    def test_pip_designer_func_7_34(self):\n    '''\n        1. Switch to Express mode\n        2. Press Space key to play video\n        3. Check if preview changed correctly after play\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_33\"\n        self.ensure_dependency(dependency_test)\n\n        # [L402] 3.3 Pip Designer > Preview in Designer\n        # with uuid(\"55666272-8ab9-4b7f-a6b1-dfbf0c6322ad\") as case:\n        with step('[Action] Switch to Express mode'):\n            pip_designer_page.advanced.unfold_in_animation_menu(0)\n            # Switch\n            pip_designer_page.switch_mode('Express')\n\n        with step('[Action] Press Space key to play video'):\n            pip_designer_page.set_timecode('00_00_00_00')\n            main_page.press_space_key()\n\n        with step('[Verify] Check if preview changed correctly after play'):\n            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)\n            if not check_preview_update:\n                assert False, \"Preview is not updated after play in 2 secs!\"\n        assert True"
    },
    {
        "name": "test_pip_designer_func_7_35",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_pip_designer_func_7_35] Stop Video",
        "description": [
            "1. Click [Stop] button to stop video"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_pip_designer_func_7_35] Stop Video')\n    def test_pip_designer_func_7_35(self):\n    '''\n        1. Click [Stop] button to stop video\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_34\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Stop] button to stop video'):\n            pip_designer_page.click_preview_operation('Stop')\n\n        with step('[Verify] Check if switch to (00:00)'):\n            current_timecode = pip_designer_page.get_timecode()\n            assert current_timecode == '00:00:00:00', f\"Cannot stop video correctly! Expected: 00:00:00:00, Actual: {current_timecode}\"\n\n        \n            # # Set timecode (00:00:08:05)\n            # pip_designer_page.set_timecode('00_00_08_05')\n            # time.sleep(DELAY_TIME * 3)\n            # check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,\n            #                                    file_name=Auto_Ground_Truth_Folder + 'L190.png')\n\n            # # Compare preview\n            # compare_result = main_page.compare(Ground_Truth_Folder + 'L190.png', check_preview, similarity=0.9)\n            # logger(compare_result)\n\n            # # Click max button / Leave full mode\n            # pip_designer_page.click_maximize_btn()\n\n            # case.result = compare_result"
    },
    {
        "name": "test_pip_designer_func_7_36",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "cyberlink_cloud",
            "dz"
        ],
        "marked_name": "[test_pip_designer_func_7_36] Share to Cloud",
        "description": [
            "1. Click [Share] button to upload template online"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.dz\n    @pytest.mark.name('[test_pip_designer_func_7_36] Share to Cloud')\n    def test_pip_designer_func_7_36(self):\n    '''\n        1. Click [Share] button to upload template online\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_35\"\n        self.ensure_dependency(dependency_test)\n\n        # [L403] 3.4 Pip Designer > [Share] template online\n        # with uuid(\"fbce1533-d0d5-4ca9-9aed-2f0e4ade18c4\") as case:\n            # Click [Share] > Upload to \"Cyberlink Cloud and DZ\"\n            # Verify DZ link\n        \n        with step('[Action] Click [Share] button to upload template online'):\n            check_upload = pip_designer_page.share_to_cloud(name='dialog09_chroma', tags='123', collection='test', description='Apply chroma key', verify_dz_link=1)\n            assert check_upload, \"Cannot upload template online!\""
    },
    {
        "name": "test_pip_designer_func_7_37",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "cyberlink_cloud",
            "dz",
            "save_template"
        ],
        "marked_name": "[test_pip_designer_func_7_37] Download Content from CL/DZ",
        "description": [
            "1. Click [Save as] button to save template",
            "2. Leave pip designer",
            "3. Download Content from CL/DZ",
            "4. Delete downloaded content and close window"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.dz\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_pip_designer_func_7_37] Download Content from CL/DZ')\n    def test_pip_designer_func_7_37(self):\n    '''\n        1. Click [Save as] button to save template\n        2. Leave pip designer\n        3. Download Content from CL/DZ\n        4. Delete downloaded content and close window\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_36\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Save as] button to save template'):\n            # Click [Save as] > Save custom name to close PiP designer\n            main_page.click(L.pip_designer.save_as_button)\n            time.sleep(DELAY_TIME)\n            pip_designer_page.input_template_name_and_click_ok('BFT_Pip_Custom')\n            time.sleep(DELAY_TIME)\n\n        with step('[Action] Leave pip designer'):\n            pip_designer_page.click_ok()\n\n        with step('[Action] Download Content from CL/DZ'):\n            # Click download content form CL/DZ\n            pip_room_page.click_DownloadContent_from_DZCL()\n\n            # Already enter \"Download PiP Objects\" > Open My Cyberlink Cloud\n            # Select template name \"dialog09_chroma\"\n            check_CL_content = download_from_cl_dz_page.select_template('dialog09_chroma')\n        \n        with step('[Initial] Delete downloaded content and close window'):\n            time.sleep(DELAY_TIME)\n            download_from_cl_dz_page.tap_delete_button()\n            # Close \"Download PiP Objects\" window\n            # download_from_cl_dz_page.tap_close_button()\n            main_page.press_esc_key()\n\n        assert check_CL_content, \"Cannot download content from CL/DZ!\""
    },
    {
        "name": "test_pip_designer_func_7_38",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "save_template"
        ],
        "marked_name": "[test_pip_designer_func_7_38] Select saved template and check preview",
        "description": [
            "1. Select saved template and check preview"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_pip_designer_func_7_38] Select saved template and check preview')\n    def test_pip_designer_func_7_38(self):\n    '''\n        1. Select saved template and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_37\"\n        self.ensure_dependency(dependency_test)\n\n        # [L404] 3.4 Pip Designer > Save template\n        # with uuid(\"4b3b937e-ce77-4946-8c43-cb1eaaf4a264\") as case:\n        with step('[Action] Select saved template'):\n            # Select custom template: BFT_PiP_Custom\n            main_page.select_library_icon_view_media('BFT_Pip_Custom')\n            time.sleep(DELAY_TIME * 5)\n            # Check preview update\n            check_result = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=3)\n            assert check_result, \"Cannot select saved template correctly!\""
    },
    {
        "name": "test_pip_designer_func_7_39",
        "tags": [
            "pip_designer_func",
            "pip_designer",
            "save_template",
            "timecode",
            "timeline"
        ],
        "marked_name": "[test_pip_designer_func_7_39] Add saved template to timeline",
        "description": [
            "1. Add saved template to timeline",
            "2. Check preview at (02:06) is as GT",
            "3. Save project"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.pip_designer\n    @pytest.mark.save_template\n    @pytest.mark.timecode\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_pip_designer_func_7_39] Add saved template to timeline')\n    def test_pip_designer_func_7_39(self):\n    '''\n        1. Add saved template to timeline\n        2. Check preview at (02:06) is as GT\n        3. Save project\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_pip_designer_func_7_38\"\n        self.ensure_dependency(dependency_test)\n\n        # [L405] 3.4 Pip Designer > Add saved pip template to timeline\n        # with uuid(\"b63cc42d-7ae7-49e8-9584-36d0afb9af10\") as case:\n\n        with step('[Action] Add saved template to track 3'):\n            # select timeline track 3\n            main_page.timeline_select_track(3)\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_19_00')\n            # Drag BFT_Pip_Custom to timeline track 3\n            main_page.drag_media_to_timeline_playhead_position('BFT_Pip_Custom', track_no=3)\n\n        with step('[Verify] Check preview at (02:06) is as GT'):\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_02_06')\n            time.sleep(DELAY_TIME * 2)\n\n            timeline_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L193.png')\n            check_current_dialog09 = main_page.compare(Ground_Truth_Folder + 'L193.png', timeline_preview, similarity=0.9)\n\n        with step('[Initial] Save Project'):\n        # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_pip_designer_func_7_38',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n            \n        assert check_current_dialog09, \"Cannot add saved template to timeline correctly as GT (L193.png)!\""
    },
    {
        "name": "test_pip_designer_func_7_z",
        "tags": [
            "pip_designer_func"
        ],
        "marked_name": "[test_pip_designer_func_7_z] Close AP due to the section is completed",
        "description": [
            "1. Open AP and open saved project",
            "2. Enter PiP room",
            "3. Search [Shape 010] and open shape designer",
            "4. Check if Shape Designer (Shape 10) is opened"
        ],
        "full_code": "@pytest.mark.pip_designer_func\n    @pytest.mark.name('[test_pip_designer_func_7_z] Close AP due to the section is completed')\n    def test_pip_designer_func_7_z(self):\n    '''\n        1. Open AP and open saved project\n        2. Enter PiP room\n        3. Search [Shape 010] and open shape designer\n        4. Check if Shape Designer (Shape 10) is opened\n        '''\nwith step('[Action] Open AP and open saved project'):\n            main_page.start_app()\n            time.sleep(DELAY_TIME)\n\n            project_name = 'Packed_Project/test_shape_designer_func_8_1_from_test_pip_designer_func_7_38.pdk'\n            save_name = 'Extracted_Folder/test_shape_designer_func_8_1'\n            self.open_packed_project(project_name, save_name)\n\n        # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)\n        with step('[Action] Set default Title duration to 10'):\n            main_page.click_set_user_preferences()\n            preferences_page.switch_to_editing()\n            preferences_page.editing.durations_title_set_value('10.0')\n            preferences_page.click_ok()\n\n        # [L428] 3.5 Shape Designer (Shape 10) > Open Shape designer\n        # with uuid(\"d31e8163-f315-43f3-bf3b-1ef15d347554\") as case:\n        with step('[Action] Enter pip room'):\n            # enter PiP room\n            main_page.enter_room(4)\n\n        with step('[Action] Search [Shape 010] and open shape designer'):\n            # Input search Shape 010\n            main_page.exist_click(L.media_room.input_search)\n            main_page.keyboard.send('Shape 010')\n            main_page.press_enter_key()\n            time.sleep(DELAY_TIME)\n            main_page.select_library_icon_view_media('Shape 010')\n            main_page.double_click()\n\n        with step('[Verify] Check if Shape Designer (Shape 10) is opened'):\n            check_title = shape_designer_page.get_title()\n            assert check_title == 'Shape 010', f\"Cannot open Shape Designer (Shape 10) correctly! Expected: Shape 010, Actual: {check_title}\""
    },
    {
        "name": "test_shape_designer_func_8_2",
        "tags": [
            "shape_designer_func",
            "shape_designer"
        ],
        "marked_name": "[test_shape_designer_func_8_2] Input text: Happy Hour",
        "description": [
            "1. Input text: Happy Hour",
            "2. Check if text is input correctly as GT"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.name('[test_shape_designer_func_8_2] Input text: Happy Hour')\n    def test_shape_designer_func_8_2(self):\n    '''\n        1. Input text: Happy Hour\n        2. Check if text is input correctly as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L429] 3.5 Shape Designer (Shape 10) > Input text\n        # with uuid(\"649e782e-02f5-4d11-98f8-43c305c69daa\") as case:\n        with step('[Action] Input text: Happy Hour'):\n            shape_designer_page.click_center_on_Canvas()\n            shape_designer_page.edit_title_on_Canvas('Happy Hour')\n\n        with step('[Verify] Check if text is input correctly as GT'):\n            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_object_shape, file_name=Auto_Ground_Truth_Folder + 'L196.png')\n\n            # Compare preview after select Shape 10 & input text : Happy Hour\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L196.png', Auto_Ground_Truth_Folder + 'L196.png')\n            assert compare_result, \"Cannot input text correctly as GT (L196.png)! Similary should>0.95\""
    },
    {
        "name": "test_shape_designer_func_8_3",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_type"
        ],
        "marked_name": "[test_shape_designer_func_8_3] Apply Linear Shape (8 and 4)",
        "description": [
            "1. Apply Shape 8 and check preview",
            "2. Apply Shape 4 and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_type\n    @pytest.mark.name('[test_shape_designer_func_8_3] Apply Linear Shape (8 and 4)')\n    def test_shape_designer_func_8_3(self):\n    '''\n        1. Apply Shape 8 and check preview\n        2. Apply Shape 4 and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L431] 3.5 Shape Designer (Shape 10) > Properties tab > Shape Type (Linear shape)\n        # with uuid(\"281801de-64bc-4c6c-8c47-ab1dd7f8e0fa\") as case:\n        with step('[Action] Enter shape type'):\n            shape_designer_page.unselect_title_on_Canvas()\n            # Unfold Shape Type\n            shape_designer_page.properties.unfold_shape_type(set_unfold=1)\n            # Drag scroll bar of (shape type) to 0\n            shape_designer_page.properties.shape_type.drag_scroll_bar('0')\n\n        with step('[Action] Apply shape 8'):\n            check_preview_25 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Apply shape 8\n            shape_designer_page.properties.shape_type.apply_type(8)\n        \n        with step('[Verify] Check preview after apply shape 8'):\n            # Verify Step\n            check_preview_08 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(check_preview_25, check_preview_08):\n                assert False, \"Shape 8 is not applied correctly! Similary should<0.95\"\n            \n        with step('[Action] Apply shape 4'):\n            # Apply shape 4\n            shape_designer_page.properties.shape_type.apply_type(4)\n\n        with step('[Verify] Check preview after apply shape 4'):\n            # Verify Step\n            # If preview (Linear 08 -> Linear 04) is not changed, it's known bug (VDE224706-0064)\n            check_preview_04 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            compare_result_w_04 = main_page.compare(check_preview_08, check_preview_04, similarity=0.999)\n            if compare_result_w_04:\n                assert False, \"Shape 4 is not applied correctly! Similary should<0.999\"\n\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_4",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_type"
        ],
        "marked_name": "[test_shape_designer_func_8_4] Apply General Shape (10 and 14 and 19)",
        "description": [
            "1. Leave Shape Designer and re-enter",
            "2. Apply General Shape (10) and check preview",
            "3. Apply General Shape (14) and check preview",
            "4. Apply General Shape (19) and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_type\n    @pytest.mark.name('[test_shape_designer_func_8_4] Apply General Shape (10 and 14 and 19)')\n    def test_shape_designer_func_8_4(self):\n    '''\n        1. Leave Shape Designer and re-enter\n        2. Apply General Shape (10) and check preview\n        3. Apply General Shape (14) and check preview\n        4. Apply General Shape (19) and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_3\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L430] 3.5 Shape Designer (Shape 10) > Properties tab > Shape Type (General shape)\n        # with uuid(\"1c24089b-4989-459e-b2aa-105da9c3cf1e\") as case:\n\n        with step('[Action] Leave Shape Designer and re-enter'):\n            # Leave Shape Designer\n            shape_designer_page.click_cancel(option=1)\n            # Search [Shape 010] and open shape designer\n            main_page.select_library_icon_view_media('Shape 010')\n            main_page.double_click()\n            # Edit text: Happy Hour\n            shape_designer_page.click_center_on_Canvas()\n            shape_designer_page.edit_title_on_Canvas('Happy Hour')\n\n        with step('[Action] Apply General Shape (10)'):\n            # Drag scroll bar of (shape type) to 0.314\n            # shape_designer_page.properties.shape_type.drag_scroll_bar('0')\n            # time.sleep(DELAY_TIME)\n            # shape_designer_page.properties.shape_type.apply_type(10)\n            shape_designer_page.properties.shape_type.drag_scroll_bar('0.14')\n            # time.sleep(DELAY_TIME * 2)\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            shape_designer_page.properties.shape_type.apply_type(10)\n        \n        with step('[Verify] Check preview after apply shape 10'):\n            check_preview_10 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_preview_10, similarity=0.98):\n                assert False, \"Shape 10 is not applied correctly! Similary should<0.98\"\n\n        with step('[Action] Apply General Shape (14)'):\n            # Apply shape 14\n            # shape_designer_page.properties.shape_type.apply_type(14)\n            shape_designer_page.properties.shape_type.drag_scroll_bar('0.34')\n            # Apply shape 14\n            shape_designer_page.properties.shape_type.apply_type(14)\n            # time.sleep(DELAY_TIME)\n        with step('[Verify] Check preview after apply shape 14'):\n            check_preview_14 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(check_preview_10, check_preview_14, similarity=0.98):\n                assert False, \"Shape 14 is not applied correctly! Similary should<0.98\"\n\n        with step('[Action] Apply General Shape (19)'):\n            # Apply shape 19\n            shape_designer_page.properties.shape_type.apply_type(19)\n            # time.sleep(DELAY_TIME)\n        with step('[Verify] Check preview after apply shape 19'):\n            check_preview_19 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Compare preview after select Shape 19 vs Shape 14\n            if main_page.compare(check_preview_19, check_preview_14):\n                assert False, \"Shape 19 is not applied correctly! Similary should<0.95\"\n            assert True"
    },
    {
        "name": "test_shape_designer_func_8_5",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_preset"
        ],
        "marked_name": "[test_shape_designer_func_8_5] Apply Preset 4",
        "description": [
            "1. Enter Preset",
            "2. Apply preset 4",
            "3. Check preview after apply preset 4",
            "4. Compare preview after select Preset 4 as GT"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_preset\n    @pytest.mark.name('[test_shape_designer_func_8_5] Apply Preset 4')\n    def test_shape_designer_func_8_5(self):\n    '''\n        1. Enter Preset\n        2. Apply preset 4\n        3. Check preview after apply preset 4\n        4. Compare preview after select Preset 4 as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_4\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L432] 3.5 Shape Designer (Shape 10) > Properties tab > Preset\n        # with uuid(\"53bde9e0-8ccd-4155-995c-50815b552ddd\") as case:\n\n        with step('[Action] Enter Preset'):\n            # Fold Shape Type\n            shape_designer_page.properties.unfold_shape_type(set_unfold=0)\n            # Unfold Preset Type\n            shape_designer_page.properties.unfold_shape_preset(set_unfold=1)\n\n        with step('[Action] Apply preset 4'):\n            check_preset_2 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Apply preset 4\n            shape_designer_page.properties.shape_preset.apply_preset(4)\n\n        with step('[Verify] Check preview after apply preset 4'):\n            check_preset_4 = main_page.snapshot(locator=L.shape_designer.canvas_split_view,\n                                                file_name=Auto_Ground_Truth_Folder + 'L199.png')\n            # Compare preview after apply preset 4\n            should_different = main_page.compare(check_preset_2, check_preset_4, similarity=0.97)\n            if should_different:\n                assert False, \"Preset 4 is not applied correctly! Similary should<0.97\"\n\n        with step('[Verify] Compare preview after select Preset 4 as GT'):\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L199.png', check_preset_4)\n            if not compare_result:\n                assert False, \"Preset 4 is not correct as GT(L199.png)! Similary should>0.95\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_6",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_fill"
        ],
        "marked_name": "[test_shape_designer_func_8_6] Set [Gradient Begin color] in [Shape Fill] tab",
        "description": [
            "1. Enter [Shape Fill] tab",
            "2. Set Gradient Begin and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_designer_func_8_6] Set [Gradient Begin color] in [Shape Fill] tab')\n    def test_shape_designer_func_8_6(self):\n    '''\n        1. Enter [Shape Fill] tab\n        2. Set Gradient Begin and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L433] 3.5 Shape Designer (Shape 10) > Properties tab > Fill\n        # with uuid(\"0925be85-d8bc-4a20-bd47-80b7c2f3ba35\") as case:\n\n        with step('[Action] Enter Fill tab'):\n            # Fold Preset Type\n            shape_designer_page.properties.unfold_shape_preset(set_unfold=0)\n            # Unfold Fill Type\n            shape_designer_page.properties.unfold_shape_fill(set_unfold=1)\n\n        with step('[Action] Set Gradient Begin'):\n            before_fill = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set Gradient begin : 362A45\n            shape_designer_page.properties.shape_fill.set_gradient_begin('E31E35')\n\n        with step('[Verify] Check preview changed after apply Gradient Begin'):\n            applied_gradient_begin = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_fill, applied_gradient_begin, similarity=0.98):\n                assert False, \"Gradient Begin is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_7",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_fill"
        ],
        "marked_name": "[test_shape_designer_func_8_7] Set [Gradient End color] in [Shape Fill] tab",
        "description": [
            "1. Set Gradient End and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_designer_func_8_7] Set [Gradient End color] in [Shape Fill] tab')\n    def test_shape_designer_func_8_7(self):\n    '''\n        1. Set Gradient End and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Gradient End'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set Gradient end : 91F3C1\n            shape_designer_page.properties.shape_fill.set_gradient_end('91F3C1')\n\n        with step('[Verify] Check preview changed after apply Gradient End'):\n            applied_gradient_end = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, applied_gradient_end, similarity=0.98):\n                assert False, \"Gradient End is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_8",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_fill"
        ],
        "marked_name": "[test_shape_designer_func_8_8] Set [Blur Value] in [Shape Fill] tab",
        "description": [
            "1. Set Blur value and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_designer_func_8_8] Set [Blur Value] in [Shape Fill] tab')\n    def test_shape_designer_func_8_8(self):\n    '''\n        1. Set Blur value and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_7\"\n        self.ensure_dependency(dependency_test)\n        \n        with step('[Action] Set Blur value'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set blur : 5\n            shape_designer_page.properties.shape_fill.blur.set_value(5)\n\n        with step('[Verify] Check Blur value ==5'):\n            # Get blur value\n            check_blur = shape_designer_page.properties.shape_fill.blur.get_value()\n            if check_blur != '5':\n                assert False, f\"Blur value is not correct! Expected: 5, Actual: {check_blur}\"\n\n        with step('[Verify] Check preview changed after apply Blur'):\n            applied_blur = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, applied_blur, similarity=0.999):\n                assert False, \"Blur is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_9",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_fill"
        ],
        "marked_name": "[test_shape_designer_func_8_9] Set [Opacity] in [Shape Fill] tab",
        "description": [
            "1. Set Opacity value and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_designer_func_8_9] Set [Opacity] in [Shape Fill] tab')\n    def test_shape_designer_func_8_9(self):\n    '''\n        1. Set Opacity value and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Opacity value'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set opacity : 94%\n            shape_designer_page.properties.shape_fill.opacity.click_arrow(1, 6)\n\n        with step('[Verify] Check Opacity value ==94%'):\n            # Get opacity value\n            check_opacity = shape_designer_page.properties.shape_fill.opacity.get_value()\n            if check_opacity != '94%':\n                assert False, f\"Opacity value is not correct! Expected: 94%, Actual: {check_opacity}\"\n\n        with step('[Verify] Check preview changed after apply Opacity'):\n            applied_opacity = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, applied_opacity, similarity=0.999):\n                assert False, \"Opacity is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_10",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_fill"
        ],
        "marked_name": "[test_shape_designer_func_8_10] Check Previe from test_shape_designer_func_8_7~10",
        "description": [
            "1. Compare preview after select Shape 14 as GT (L199.png)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_designer_func_8_10] Check Previe from test_shape_designer_func_8_7~10')\n    def test_shape_designer_func_8_10(self):\n    '''\n        1. Compare preview after select Shape 14 as GT (L199.png)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_9\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Compare preview after select Shape 14 as GT'):\n            # Check shape preview\n            check_fill = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            compare_different = main_page.compare(Auto_Ground_Truth_Folder + 'L199.png', check_fill, similarity=0.96)\n            if not compare_different:\n                assert False, \"Fill is not correct as GT(L199.png)! Similary should>0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_11",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_outline"
        ],
        "marked_name": "[test_shape_designer_func_8_11] Set [Size] in [Shape Outline] tab",
        "description": [
            "1. Enter [Shape Outline] tab and Maximize window",
            "2. Set Size to (2) and check preview/ size value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_outline\n    @pytest.mark.name('[test_shape_designer_func_8_11] Set [Size] in [Shape Outline] tab')\n    def test_shape_designer_func_8_11(self):\n    '''\n        1. Enter [Shape Outline] tab and Maximize window\n        2. Set Size to (2) and check preview/ size value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L434] 3.5 Shape Designer (Shape 10) > Properties tab > Outline\n        # with uuid(\"81e6ab89-f81c-4ec3-926f-6611abe5cef2\") as case:\n        with step('[Action] Enter [Shape Outline] tab and Maximize window'):\n            # Fold Fill Type\n            shape_designer_page.properties.unfold_shape_fill(set_unfold=0)\n            # Unfold Outline\n            shape_designer_page.properties.unfold_shape_outline(set_unfold=1)\n            # maximize\n            shape_designer_page.click_restore_btn()\n            time.sleep(DELAY_TIME*1.5)\n            # Set checkbox\n            shape_designer_page.properties.shape_outline.apply_checkbox()\n\n\n\n        with step('[Action] Set Size to (2)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set size\n            shape_designer_page.properties.shape_outline.size.set_value(2)\n        \n        with step('[Verify] Check Size value'):\n            # Get size value\n            check_size = shape_designer_page.properties.shape_outline.size.get_value()\n            if check_size != '2':\n                assert False, f\"Size value is not correct! Expected: 2, Actual: {check_size}\"\n\n        with step('[Verify] Check preview after apply Size'):\n            check_outline_size = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_outline_size, similarity=0.999):\n                assert False, \"Size is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_12",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_outline"
        ],
        "marked_name": "[test_shape_designer_func_8_12] Set [Line Type] in [Shape Outline] tab",
        "description": [
            "1. Set Line Type to the 3rd type and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_outline\n    @pytest.mark.name('[test_shape_designer_func_8_12] Set [Line Type] in [Shape Outline] tab')\n    def test_shape_designer_func_8_12(self):\n    '''\n        1. Set Line Type to the 3rd type and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_11\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Line Type to the 3rd type'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set 3rd type\n            shape_designer_page.properties.shape_outline.set_line_type(3)\n        with step('[Verify] Check preview after apply Line Type'):\n            check_outline_line_type = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_outline_line_type, similarity=0.999):\n                assert False, \"Line Type is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_13",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_outline"
        ],
        "marked_name": "[test_shape_designer_func_8_13] Set [Blur] in [Shape Outline] tab",
        "description": [
            "1. Set Blur and check preview/ blur value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_outline\n    @pytest.mark.name('[test_shape_designer_func_8_13] Set [Blur] in [Shape Outline] tab')\n    def test_shape_designer_func_8_13(self):\n    '''\n        1. Set Blur and check preview/ blur value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Blur to 11 by slider'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set blur\n            shape_designer_page.properties.shape_outline.blur.set_slider(11)\n        \n        with step('[Verify] Check blur value'):\n            # Get blur value\n            check_blur = shape_designer_page.properties.shape_outline.blur.get_value()\n            if check_blur != '11':\n                assert False, f\"Blur value is not correct! Expected: 11, Actual: {check_blur}\"\n\n        with step('[Verify] Check preview after apply Blur'):\n            check_outline_blur = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_outline_blur, similarity=0.999):\n                assert False, \"Blur is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_14",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_outline"
        ],
        "marked_name": "[test_shape_designer_func_8_14] Set [Color] in [Shape Outline] tab",
        "description": [
            "1. Set Color to (F3C4DE) and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_outline\n    @pytest.mark.name('[test_shape_designer_func_8_14] Set [Color] in [Shape Outline] tab')\n    def test_shape_designer_func_8_14(self):\n    '''\n        1. Set Color to (F3C4DE) and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_13\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Color to (F3C4DE)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set color\n            shape_designer_page.properties.shape_outline.set_uniform_color('F3C4DE')\n        with step('[Verify] Check preview after apply Color'):\n            check_outline_color = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_outline_color, similarity=0.98):\n                assert False, \"Color is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_15",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_outline"
        ],
        "marked_name": "[test_shape_designer_func_8_15] Check preview from test_shape_designer_func_8_11~14",
        "description": [
            "1. Check preview from test_shape_designer_func_8_11~14"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_outline\n    @pytest.mark.name('[test_shape_designer_func_8_15] Check preview from test_shape_designer_func_8_11~14')\n    def test_shape_designer_func_8_15(self):\n    '''\n        1. Check preview from test_shape_designer_func_8_11~14\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_14\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n            # Click center\n            shape_designer_page.click_center_on_Canvas()\n            time.sleep(DELAY_TIME)\n\n            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_object_shape,\n                                               file_name=Auto_Ground_Truth_Folder + 'L201.png')\n\n            # Compare preview\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L201.png', check_preview, similarity=0.9)\n            assert compare_result, \"Preview is not correct as GT(L201.png)! Similary should>0.9\""
    },
    {
        "name": "test_shape_designer_func_8_16",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_16] Set [Apply Shadow to] in [Shadow] tab",
        "description": [
            "1. Enter Shadow tab",
            "2. Set Apply Shadow to (Outline Only) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_16] Set [Apply Shadow to] in [Shadow] tab')\n    def test_shape_designer_func_8_16(self):\n    '''\n        1. Enter Shadow tab\n        2. Set Apply Shadow to (Outline Only) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_15\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L435] 3.5 Shape Designer (Shape 10) > Properties tab > Shadow\n        # with uuid(\"f9c22e54-7e9d-4341-ac36-496bf86861d1\") as case:\n\n        with step('[Action] Enter Shadow tab'):\n            # Fold Outline\n            shape_designer_page.properties.unfold_shape_outline(set_unfold=0)\n            # Unfold Shadow\n            shape_designer_page.properties.unfold_shadow(set_unfold=1)\n            # Set checkbox\n            shape_designer_page.properties.shadow.apply_checkbox(1)\n\n        with step('[Action] Switch to apply [Outline Only]'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set apply shadow to (Outline Only)\n            shape_designer_page.properties.shadow.set_apply_shadow_to(2)\n\n        with step('[Verify] Check [Apply Shadow to] == [Outline Only]'):\n            check_shadow_to_result = shape_designer_page.properties.shadow.get_apply_shadow_to()\n            if check_shadow_to_result != 'Outline Only':\n                assert False, f\"Apply Shadow to is not correct! Expected: Outline Only, Actual: {check_shadow_to_result}\"\n\n        with step('[Verify] Check preview after apply Shadow'):\n            applied_shadow_to_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, applied_shadow_to_preview, similarity=0.99):\n                assert False, \"Shadow is not changed correctly! Similary should<0.99\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_17",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_17] Set [Distance] in [Shadow] tab",
        "description": [
            "1. Set [Distance] to (35.6) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_17] Set [Distance] in [Shadow] tab')\n    def test_shape_designer_func_8_17(self):\n    '''\n        1. Set [Distance] to (35.6) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_16\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Distance] to (35.6)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set distance \n            shape_designer_page.properties.shadow.distance.set_value(35.6)\n\n        with step('[Verify] Check [Distance] value'):\n            # Get distance value\n            check_distance = shape_designer_page.properties.shadow.distance.get_value()\n            if check_distance != '35.6':\n                assert False, f\"Distance value is not correct! Expected: 35.6, Actual: {check_distance}\"\n\n        with step('[Verify] Check preview after apply [Distance]'):\n            check_distance_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_distance_preview, similarity=0.999):\n                assert False, \"Distance is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_18",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_18] Set [Opacity] in [Shadow] tab",
        "description": [
            "1. Set [Opacity] to (88%) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_18] Set [Opacity] in [Shadow] tab')\n    def test_shape_designer_func_8_18(self):\n    '''\n        1. Set [Opacity] to (88%) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Opacity] to (88%)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set opacity\n            shape_designer_page.properties.shadow.opacity.set_slider(88)\n\n        with step('[Verify] Check [Opacity] value'):\n            # Get opacity value\n            check_opacity = shape_designer_page.properties.shadow.opacity.get_value()\n            if check_opacity != '88%':\n                assert False, f\"Opacity value is not correct! Expected: 88%, Actual: {check_opacity}\"\n        \n        # The change is too small (0.9999994), skip compare process\n        # with step('[Verify] Check preview after apply [Opacity]'): \n        #     check_opacity_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n        #     if main_page.compare(before_preview, check_opacity_preview, similarity=0.98):\n        #         assert False, \"Opacity is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_19",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_19] Set [Blur] in [Shadow] tab",
        "description": [
            "1. Set [Blur] to (11) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_19] Set [Blur] in [Shadow] tab')\n    def test_shape_designer_func_8_19(self):\n    '''\n        1. Set [Blur] to (11) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_18\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Blur] to (11)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set Blur\n            shape_designer_page.properties.shadow.blur.set_value(11)\n\n        with step('[Verify] Check [Blur] value'):\n            # Get blur value\n            check_blur = shape_designer_page.properties.shadow.blur.get_value()\n            if check_blur != '11':\n                assert False, f\"Blur value is not correct! Expected: 11, Actual: {check_blur}\"\n        \n        # The change is too small (0.99994), skip compare process\n        # with step('[Verify] Check preview after apply [Blur]'):\n        #     check_blur_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n        #     if main_page.compare(before_preview, check_blur_preview, similarity=0.98):\n        #         assert False, \"Blur is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_20",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_20] Set [Fill Shadow] in [Shadow] tab",
        "description": [
            "1. Set [Fill Shadow] to (On) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_20] Set [Fill Shadow] in [Shadow] tab')\n    def test_shape_designer_func_8_20(self):\n    '''\n        1. Set [Fill Shadow] to (On) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Fill Shadow] to (On)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set Fill shadow\n            shape_designer_page.properties.shadow.fill_shadow.apply_checkbox(1)\n\n        with step('[Verify] Check [Fill Shadow] value'):\n            # Get Fill shadow value\n            check_fill_shadow = shape_designer_page.properties.shadow.fill_shadow.get_checkbox()\n            if check_fill_shadow != True:\n                assert False, f\"Fill Shadow value is not correct! Expected: True, Actual: {check_fill_shadow}\"\n        \n        with step('[Verify] Check preview after apply [Fill Shadow]'):\n            check_fill_shadow_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_fill_shadow_preview, similarity=0.999):\n                assert False, \"Fill Shadow is not changed correctly! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_21",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_21] Set [Direction] in [Shadow] tab",
        "description": [
            "1. Set [Direction] to (17) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_21] Set [Direction] in [Shadow] tab')\n    def test_shape_designer_func_8_21(self):\n    '''\n        1. Set [Direction] to (17) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Direction] to (17)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set direction\n            shape_designer_page.properties.shadow.direction.set_value(17)\n\n        with step('[Verify] Check [Direction] value'):\n            # Get direction value\n            check_direction = shape_designer_page.properties.shadow.direction.get_value()\n            if check_direction != '17':\n                assert False, f\"Direction value is not correct! Expected: 17, Actual: {check_direction}\"\n\n        with step('[Verify] Check preview after apply [Direction]'):\n            check_direction_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_direction_preview, similarity=0.995):\n                assert False, \"Direction is not changed correctly! Similary should<0.995\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_22",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_shadow"
        ],
        "marked_name": "[test_shape_designer_func_8_22] Check preview from test_shape_designer_func_8_16~21",
        "description": [
            "1. Check preview from test_shape_designer_func_8_16~21"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_shadow\n    @pytest.mark.name('[test_shape_designer_func_8_22] Check preview from test_shape_designer_func_8_16~21')\n    def test_shape_designer_func_8_22(self):\n    '''\n        1. Check preview from test_shape_designer_func_8_16~21\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_21\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n\n            # Compare preview\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L201.png', check_preview, similarity=0.98)\n            if not compare_result:\n                assert False, \"Preview is not correct as GT(L201.png)! Similary should>0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_23",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_title"
        ],
        "marked_name": "[test_shape_designer_func_8_23] Set [Font Type] in [Title] tab",
        "description": [
            "1. Enter Title tab",
            "2. Set [Font Type] to (PT Sans Bold) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_title\n    @pytest.mark.name('[test_shape_designer_func_8_23] Set [Font Type] in [Title] tab')\n    def test_shape_designer_func_8_23(self):\n    '''\n        1. Enter Title tab\n        2. Set [Font Type] to (PT Sans Bold) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_22\"\n        self.ensure_dependency(dependency_test)\n\n        # [L436] 3.5 Shape Designer (Shape 10) > Properties tab > Title\n        # with uuid(\"a148b797-eb2a-4bc8-89e3-ff4f648c6b05\") as case:\n\n        with step('[Action] Enter Title tab'):\n            # Fold Shadow\n            shape_designer_page.properties.unfold_shadow(set_unfold=0)\n            # Unfold Title\n            shape_designer_page.properties.unfold_title(set_unfold=1)\n\n        with step('[Action] Set font type (PT Sans Bold)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set font type: PT Sans Bold\n            shape_designer_page.properties.title.set_font_type('PT Sans Bold')\n\n        with step('[Verify] Check Font type value'):\n            # Get font type value\n            check_font_type = shape_designer_page.properties.title.get_font_type()\n            if check_font_type != 'PT Sans Bold':\n                assert False, f\"Font type value is not correct! Expected: PT Sans Bold, Actual: {check_font_type}\"\n        \n        with step('[Verify] Check preview after apply Font type'):\n            check_font_type_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_font_type_preview, similarity=0.98):\n                assert False, \"Font type is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_24",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_title"
        ],
        "marked_name": "[test_shape_designer_func_8_24] Set [Size] in [Title] tab",
        "description": [
            "1. Set [Size] to (21) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_title\n    @pytest.mark.name('[test_shape_designer_func_8_24] Set [Size] in [Title] tab')\n    def test_shape_designer_func_8_24(self):\n    '''\n        1. Set [Size] to (21) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_23\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Size] to (21)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set size = 21\n            shape_designer_page.properties.title.set_font_size(21)\n\n        with step('[Verify] Check [Size] value'):\n            # Get size value\n            check_size = shape_designer_page.properties.title.get_font_size()\n            if check_size != '21':\n                assert False, f\"Size value is not correct! Expected: 21, Actual: {check_size}\"\n        \n        with step('[Verify] Check preview after apply [Size]'):\n            check_size_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_size_preview, similarity=0.98):\n                assert False, \"Size is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_25",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_title"
        ],
        "marked_name": "[test_shape_designer_func_8_25] Set [Color] in [Title] tab",
        "description": [
            "1. Set [Color] to (B5FFFF) and check value/ preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_title\n    @pytest.mark.name('[test_shape_designer_func_8_25] Set [Color] in [Title] tab')\n    def test_shape_designer_func_8_25(self):\n    '''\n        1. Set [Color] to (B5FFFF) and check value/ preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_24\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Color] to (B5FFFF)'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            # Set font color\n            shape_designer_page.properties.title.set_font_color('B5FFFF')\n\n        with step('[Verify] Check preview after apply [Color]'):\n            check_color_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_color_preview, similarity=0.98):\n                assert False, \"Color is not changed correctly! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_26",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "properties",
            "shape_title"
        ],
        "marked_name": "[test_shape_designer_func_8_26] Check preview from test_shape_designer_func_8_23~25",
        "description": [
            "1. Check preview from test_shape_designer_func_8_23~25"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_title\n    @pytest.mark.name('[test_shape_designer_func_8_26] Check preview from test_shape_designer_func_8_23~25')\n    def test_shape_designer_func_8_26(self):\n    '''\n        1. Check preview from test_shape_designer_func_8_23~25\n        '''\n# # Ensure the dependency test is run and passed\n        # dependency_test = \"test_shape_designer_func_8_25\"\n        # self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n        \n            # Compare preview\n            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view, file_name=Auto_Ground_Truth_Folder + 'L203.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L203.png', check_preview, similarity=0.9)\n            assert compare_result, \"Preview is not correct as GT(L203.png)! Similary should>0.9\""
    },
    {
        "name": "test_shape_designer_func_8_27",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "canva"
        ],
        "marked_name": "[test_shape_designer_func_8_27] Manual adjust object to larger on canvas",
        "description": [
            "1. Initial till [Properties] tab with [Title] fold",
            "2. Manual adjust object to larger on canvas",
            "3. Check preview after manual adjust as GT"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.canva\n    @pytest.mark.name('[test_shape_designer_func_8_27] Manual adjust object to larger on canvas')\n    def test_shape_designer_func_8_27(self):\n    '''\n        1. Initial till [Properties] tab with [Title] fold\n        2. Manual adjust object to larger on canvas\n        3. Check preview after manual adjust as GT\n        '''\nwith step('[Initial] Till [Properties] tab with [Title] fold'):\n            # Ensure the dependency test is run and passed\n            self.test_shape_designer_func_8_1()\n            # Fold Title\n            shape_designer_page.properties.unfold_title(set_unfold=0)\n\n        # [L441] 3.5 Shape Designer (Shape 10) > Manual adjust on canvas\n        # with uuid(\"47acdd2c-75cb-48c9-bce2-64a188a62cb4\") as case:\n\n        with step('[Action] Manual adjust object to larger on canvas'):\n            shape_designer_page.adjust_object_on_Canvas_resize_to_large()\n\n        with step('[Verify] Check preview after manual adjust as GT'):\n            # Verify : Preview is changed\n            check_resize = main_page.snapshot(locator=L.shape_designer.canvas_split_view,\n                                               file_name=Auto_Ground_Truth_Folder + 'L204.png')\n            compare_resize_result = main_page.compare(Ground_Truth_Folder + 'L204.png', check_resize)\n            assert compare_resize_result, \"Preview is not correct as GT(L204.png)! Similary should>0.95\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_28",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "canva",
            "keyframe"
        ],
        "marked_name": "[test_shape_designer_func_8_28] Move Object to left on canvas",
        "description": [
            "1. Move object to left on canvas and check preview"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.canva\n    @pytest.mark.keyframe\n    @pytest.mark.name('[test_shape_designer_func_8_28] Move Object to left on canvas')\n    def test_shape_designer_func_8_28(self):\n    '''\n        1. Move object to left on canvas and check preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_27\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Initial] Undo large step in previous test'):\n            shape_designer_page.click_undo()\n\n        with step('[Action] Move object to left on canvas'):\n            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            shape_designer_page.adjust_object_on_Canvas_move_to_left()\n\n        with step('[Verify] Check preview after move object to left'):\n            # Verify : Preview is changed\n            check_move_left = main_page.snapshot(locator=L.shape_designer.canvas_split_view)\n            if main_page.compare(before_preview, check_move_left, similarity=0.999):\n                assert False, \"Move left is not correct! Similary should<0.999\"\n\n        with step('[Verify] Check position x value'):\n            with step('[Action] Switch to Keyframe tab'):\n                # Switch Keyframe menu\n                shape_designer_page.click_keyframe_tab()\n\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.359':\n                assert False, f\"Position x value is not correct! Expected: 0.359, Actual: {current_x}\"\n\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_29",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_29] Set 1st Position keyframe at (00:00)",
        "description": [
            "1. Set 1st Position keyframe at (00:00) and check value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_29] Set 1st Position keyframe at (00:00)')\n    def test_shape_designer_func_8_29(self):\n    '''\n        1. Set 1st Position keyframe at (00:00) and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_28\"\n        self.ensure_dependency(dependency_test)\n\n        # [L438] 3.5 Shape Designer (Shape 10) > Keyframe tab > Adjust keyframe\n        # with uuid(\"c70a3ee9-2263-4772-a7d7-d4f859315ec0\") as case:\n\n        with step('[Action] Set 1st Position keyframe at (00:00)'):\n            # Set position = (0.199, 0.297)\n            shape_designer_page.keyframe.object_settings.position.x.set_value(0.199)\n            shape_designer_page.keyframe.object_settings.position.y.set_value(0.297)\n\n            # Set position 1st keyframe on 0s\n            shape_designer_page.keyframe.object_settings.position.keyframe.click_add_remove()\n\n        with step('[Verify] Check x value after set 1st Position keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.199':\n                assert False, f\"Position x value is not correct! Expected: 0.199, Actual: {current_x}\"\n\n        with step('[Verify] Check y value after set 1st Position keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.297':\n                assert False, f\"Position y value is not correct! Expected: 0.297, Actual: {current_y}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_30",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_30] Set 2nd Position keyframe at (05:25)",
        "description": [
            "1. Set 2nd Position keyframe at (05:25) and check value",
            "2. Switch to previous keyframe and check timecode"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_30] Set 2nd Position keyframe at (05:25)')\n    def test_shape_designer_func_8_30(self):\n    '''\n        1. Set 2nd Position keyframe at (05:25) and check value\n        2. Switch to previous keyframe and check timecode\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_29\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 2nd Position keyframe at (05:25)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_05_25')\n\n            # Set position = (0.276, 0.621) w/ 2nd keyframe\n            shape_designer_page.keyframe.object_settings.position.x.set_value(0.276)\n            shape_designer_page.keyframe.object_settings.position.y.set_value(0.621)\n\n        with step('[Verify] Check x value after set 2nd Position keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.276':\n                assert False, f\"Position x value is not correct! Expected: 0.276, Actual: {current_x}\"\n\n        with step('[Verify] Check y value after set 2nd Position keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.621':\n                assert False, f\"Position y value is not correct! Expected: 0.621, Actual: {current_y}\"\n\n        with step('[Action] Switch to previous keyframe'):\n            # Click previous keyframe\n            shape_designer_page.simple_timeline.position.click_previous_keyframe()\n\n        with step('[Verify] Check timecode after switch to previous keyframe (00:00)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}\"\n\n        with step('[Verify] Check x value after switch to previous keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.199':\n                assert False, f\"Position x value is not correct! Expected: 0.199, Actual: {current_x}\"\n        \n        with step('[Verify] Check y value after switch to previous keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.297':\n                assert False, f\"Position y value is not correct! Expected: 0.297, Actual: {current_y}\"\n\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_31",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_31] Set 3rd Position keyframe at (03:10)",
        "description": [
            "1. Set 3rd Position keyframe at (03:10) and check value",
            "2. Switch to next keyframe and check timecode"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_31] Set 3rd Position keyframe at (03:10)')\n    def test_shape_designer_func_8_31(self):\n    '''\n        1. Set 3rd Position keyframe at (03:10) and check value\n        2. Switch to next keyframe and check timecode\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_30\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 3rd Position keyframe at (03:10)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_03_10')\n\n            # Set position = (0.783, 0.440) w/ 3rd keyframe\n            shape_designer_page.keyframe.object_settings.position.x.set_value(0.783)\n            shape_designer_page.keyframe.object_settings.position.y.set_value(0.440)\n\n        with step('[Verify] Check x value after set 3rd Position keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.783':\n                assert False, f\"Position x value is not correct! Expected: 0.783, Actual: {current_x}\"\n\n        with step('[Verify] Check y value after set 3rd Position keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.440':\n                assert False, f\"Position y value is not correct! Expected: 0.440, Actual: {current_y}\"\n\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            shape_designer_page.simple_timeline.position.click_next_keyframe()\n        \n        with step('[Verify] Check timecode after switch to next keyframe (05:25)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:05:25':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}\"\n\n        with step('[Verify] Check x value after switch to next keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.276':\n                assert False, f\"Position x value is not correct! Expected: 0.276, Actual: {current_x}\"\n        \n        with step('[Verify] Check y value after switch to next keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.621':\n                assert False, f\"Position y value is not correct! Expected: 0.621, Actual: {current_y}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_32",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_32] Set 1st Scale keyframe at (05:25)",
        "description": [
            "1. Set 1st Scale keyframe at (05:25) and check value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_32] Set 1st Scale keyframe at (05:25)')\n    def test_shape_designer_func_8_32(self):\n    '''\n        1. Set 1st Scale keyframe at (05:25) and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_31\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 1st Scale keyframe at (05:25)'):\n            # Set scale 1st keyframe\n            shape_designer_page.keyframe.object_settings.scale.keyframe.click_add_remove()\n\n        with step('[Verify] Check scale width value after set 1st Scale keyframe'):\n            # Verify scale value\n            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()\n            if current_w != '0.351':\n                assert False, f\"Scale W value is not correct! Expected: 0.351, Actual: {current_w}\"\n\n        with step('[Verify] Check scale height value after set 1st Scale keyframe'):\n            # Verify scale value\n            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()\n            if current_h != '0.500':\n                assert False, f\"Scale H value is not correct! Expected: 0.500, Actual: {current_h}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_33",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_33] Set 4th position keyframe at (08:10)",
        "description": [
            "1. Set 4th position keyframe at (08:10)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_33] Set 4th position keyframe at (08:10)')\n    def test_shape_designer_func_8_33(self):\n    '''\n        1. Set 4th position keyframe at (08:10)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_32\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 4th position keyframe at (08:10)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_08_10')\n            # Set position = (0.676, 0.304) w/ 4th keyframe\n            shape_designer_page.keyframe.object_settings.position.x.set_value(0.676)\n            shape_designer_page.keyframe.object_settings.position.y.set_value(0.304)\n\n        with step('[Verify] Check x value after set 4th Position keyframe'):\n            # Verify position x value\n            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()\n            if current_x != '0.676':\n                assert False, f\"Position x value is not correct! Expected: 0.676, Actual: {current_x}\"\n\n        with step('[Verify] Check y value after set 4th Position keyframe'):\n            # Verify position y value\n            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()\n            if current_y != '0.304':\n                assert False, f\"Position y value is not correct! Expected: 0.304, Actual: {current_y}\""
    },
    {
        "name": "test_shape_designer_func_8_34",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_34] Set 2nd Scale keyframe at (08:10)",
        "description": [
            "1. Set 2nd Scale keyframe at (08:10)",
            "2. Switch to previous keyframe and check timecode (05:25)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_34] Set 2nd Scale keyframe at (08:10)')\n    def test_shape_designer_func_8_34(self):\n    '''\n        1. Set 2nd Scale keyframe at (08:10)\n        2. Switch to previous keyframe and check timecode (05:25)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_33\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Set 2nd Scale keyframe at (08:10)'):\n            # Set scale W = 0.672, H = 0.748 w/ 2nd keyframe\n            shape_designer_page.keyframe.object_settings.scale.w.set_value(0.672)\n            shape_designer_page.keyframe.object_settings.scale.h.set_value(0.748)\n\n        with step('[Verify] Check scale width value after set 2nd Scale keyframe'):\n            # Verify scale value\n            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()\n            if current_w != '0.672':\n                assert False, f\"Scale W value is not correct! Expected: 0.672, Actual: {current_w}\"\n        \n        with step('[Verify] Check scale height value after set 2nd Scale keyframe'):\n            # Verify scale value\n            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()\n            if current_h != '0.748':\n                assert False, f\"Scale H value is not correct! Expected: 0.748, Actual: {current_h}\"\n\n        with step('[Action] Switch to previous keyframe'):\n            # Click previous keyframe\n            shape_designer_page.simple_timeline.scale.click_previous_keyframe()\n        \n        with step('[Verify] Check timecode after switch to previous keyframe (05:25)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:05:25':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}\"\n\n        with step('[Verify] Check scale width value after switch to previous keyframe'):\n            # Verify scale value\n            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()\n            if current_w != '0.351':\n                assert False, f\"Scale W value is not correct! Expected: 0.351, Actual: {current_w}\"\n        \n        with step('[Verify] Check scale height value after switch to previous keyframe'):\n            # Verify scale value\n            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()\n            if current_h != '0.500':\n                assert False, f\"Scale H value is not correct! Expected: 0.500, Actual: {current_h}\"\n\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_35",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_35] Set 1st Rotation keyframe at (08:10)",
        "description": [
            "1. Set 1st Rotation keyframe at (08:10)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_35] Set 1st Rotation keyframe at (08:10)')\n    def test_shape_designer_func_8_35(self):\n    '''\n        1. Set 1st Rotation keyframe at (08:10)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_34\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 1st Rotation keyframe at (08:10)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_08_10')\n            # Set Rotation 1st keyframe on 8s 10 frame\n            shape_designer_page.keyframe.object_settings.rotation.keyframe.click_add_remove()\n\n            # Drag simple timeline scroll bar to 1\n            #shape_designer_page.simple_timeline.drag_scroll_bar(1)\n        with step('[Verify] Check Rotation value after set 1st Rotation keyframe'):\n            # Verify Rotation value\n            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()\n            if current_rotation != '0.00':\n                assert False, f\"Rotation value is not correct! Expected: 0, Actual: {current_rotation}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_36",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_36] Set 2nd Rotation keyframe at (05:25)",
        "description": [
            "1. Set 2nd Rotation keyframe at (05:25)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_36] Set 2nd Rotation keyframe at (05:25)')\n    def test_shape_designer_func_8_36(self):\n    '''\n        1. Set 2nd Rotation keyframe at (05:25)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_35\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 2nd Rotation keyframe at (05:25)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_05_25')\n            time.sleep(DELAY_TIME*0.5)\n            shape_designer_page.simple_timeline.drag_scroll_bar(0.99)\n\n            # Set Rotation 2nd keyframe on (05:25)\n            shape_designer_page.keyframe.object_settings.rotation.keyframe.click_add_remove()\n            time.sleep(DELAY_TIME)\n\n            # Set Rotation degree = 250\n            shape_designer_page.keyframe.object_settings.rotation.value.set_value(250)\n\n\n        with step('[Verify] Check Rotation value after set 2nd Rotation keyframe'):\n            # Verify Rotation value\n            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()\n            if current_rotation != '250':\n                assert False, f\"Rotation value is not correct! Expected: 250, Actual: {current_rotation}\"\n\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            shape_designer_page.simple_timeline.rotation.click_next_keyframe()\n        \n        with step('[Verify] Check timecode after switch to next keyframe (08:10)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:08:10':\n                assert False, f\"Timecode is not correct! Expected: 00:00:08:10, Actual: {current_timecode}\"\n        \n        with step('[Verify] Check rotation value after switch to next keyframe'):\n            # Verify Rotation value\n            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()\n            if current_rotation != '0.00':\n                assert False, f\"Rotation value is not correct! Expected: 0.00, Actual: {current_rotation}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_37",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_37] Set 1st Opacity keyframe at (08:10)",
        "description": [
            "1. Set 1st Opacity keyframe at (08:10)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_37] Set 1st Opacity keyframe at (08:10)')\n    def test_shape_designer_func_8_37(self):\n    '''\n        1. Set 1st Opacity keyframe at (08:10)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_36\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 1st Opacity keyframe at (08:10)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_08_10')\n            # Set opacity 1st keyframe\n            shape_designer_page.keyframe.object_settings.opacity.keyframe.click_add_remove()\n        \n        with step('[Verify] Check opacity value after set 1st Opacity keyframe'):\n            # Verify opacity value\n            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()\n            if current_opacity != '100%':\n                assert False, f\"Opacity value is not correct! Expected: 100%, Actual: {current_opacity}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_38",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_38] Set 2nd Opacity keyframe at (05:25)",
        "description": [
            "1. Set 2nd Opacity keyframe at (05:25)",
            "2. Switch to next keyframe and check timecode (08:10) and value (100%)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_38] Set 2nd Opacity keyframe at (05:25)')\n    def test_shape_designer_func_8_38(self):\n    '''\n        1. Set 2nd Opacity keyframe at (05:25)\n        2. Switch to next keyframe and check timecode (08:10) and value (100%)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_36\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set 2nd Opacity keyframe at (05:25)'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_05_25')\n            # Set opacity 2nd keyframe\n            shape_designer_page.keyframe.object_settings.opacity.keyframe.click_add_remove()\n            # Adjust opacity value = 50%\n            shape_designer_page.keyframe.object_settings.opacity.value.set_value(50)\n\n        with step('[Verify] Check opacity value after set 2nd Opacity keyframe'):\n            # Verify opacity value\n            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()\n            if current_opacity != '50':\n                assert False, f\"Opacity value is not correct! Expected: 50, Actual: {current_opacity}\"\n        with step('[Action] Switch to next keyframe'):\n            # Click next keyframe\n            shape_designer_page.simple_timeline.opacity.click_next_keyframe()\n        with step('[Verify] Check timecode after switch to next keyframe (08:10)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:08:10':\n                assert False, f\"Timecode is not correct! Expected: 00:00:08:10, Actual: {current_timecode}\"\n        with step('[Verify] Check opacity value after switch to next keyframe'):\n            # Verify opacity value\n            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()\n            if current_opacity != '100%':\n                assert False, f\"Opacity value is not correct! Expected: 100%, Actual: {current_opacity}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_39",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_39] Check preview as GT from test_shape_designer_func_8_29~38",
        "description": [
            "1. Check preview as GT from test_shape_designer_func_8_29~38"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_39] Check preview as GT from test_shape_designer_func_8_29~38')\n    def test_shape_designer_func_8_39(self):\n    '''\n        1. Check preview as GT from test_shape_designer_func_8_29~38\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_38\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_06_29')\n            # Compare preview\n            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L205.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L205.png', check_preview, similarity=0.88)\n            assert compare_result, \"Preview is not correct as GT(L205.png)! Similary should>0.88\""
    },
    {
        "name": "test_shape_designer_func_8_40",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_40] Set Postion Ease in at (08:10)",
        "description": [
            "1. Set Postion Ease in at (08:10) and check value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_40] Set Postion Ease in at (08:10)')\n    def test_shape_designer_func_8_40(self):\n    '''\n        1. Set Postion Ease in at (08:10) and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_39\"\n        self.ensure_dependency(dependency_test)\n\n        # [L439] 3.5 Shape Designer (Shape 10) > Keyframe tab > Adjust ease in / out\n        # with uuid(\"4eda0d6a-b0ea-4100-a22a-317fffdfb976\") as case:\n        with step('[Action] Set Postion Ease in at (08:10)'):\n            # Set timecode (08:10)\n            shape_designer_page.set_timecode('00_00_08_10')\n            # Position > Set Ease in\n            shape_designer_page.keyframe.object_settings.position.ease_in.set_checkbox()\n            time.sleep(DELAY_TIME * 2)\n            # Set Ease in value = 0.61\n            shape_designer_page.keyframe.object_settings.position.ease_in.set_value('0.61')\n\n        with step('[Verify] Check Ease in checkbox status'):\n            # Verify Ease in checkbox status\n            ease_in_status = shape_designer_page.keyframe.object_settings.position.ease_in.get_checkbox()\n            if not ease_in_status:\n                assert False, f\"Ease in checkbox is not checked! Expected: True, Actual: {ease_in_status}\"\n\n        with step('[Verify] Check Ease in value'):\n            # Verify Ease in value\n            ease_in_value = shape_designer_page.keyframe.object_settings.position.ease_in.get_value()\n            if ease_in_value != '0.61':\n                assert False, f\"Ease in value is not correct! Expected: 0.61, Actual: {ease_in_value}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_41",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_41] Set Postion Ease out at (05:25)",
        "description": [
            "1. Set Postion Ease out at (05:25) and check value"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_41] Set Postion Ease out at (05:25)')\n    def test_shape_designer_func_8_41(self):\n    '''\n        1. Set Postion Ease out at (05:25) and check value\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_40\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Postion Ease out at (05:25)'):\n            # Click previous keyframe\n            shape_designer_page.simple_timeline.position.click_previous_keyframe()\n            time.sleep(DELAY_TIME)\n            # Position > Set Ease out\n            shape_designer_page.keyframe.object_settings.position.ease_out.set_checkbox()\n            time.sleep(DELAY_TIME)\n            # Set Ease out value = 0.61\n            shape_designer_page.keyframe.object_settings.position.ease_out.set_value('0.77')\n        \n        with step('[Verify] Check Ease out checkbox status'):\n            # Verify Ease out checkbox status\n            ease_out_status = shape_designer_page.keyframe.object_settings.position.ease_out.get_checkbox()\n            if not ease_out_status:\n                assert False, f\"Ease out checkbox is not checked! Expected: True, Actual: {ease_out_status}\"\n        \n        with step('[Verify] Check Ease out value'):\n            # Verify Ease out value\n            ease_out_value = shape_designer_page.keyframe.object_settings.position.ease_out.get_value()\n            if ease_out_value != '0.77':\n                assert False, f\"Ease out value is not correct! Expected: 0.77, Actual: {ease_out_value}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_42",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_42] Check preview as GT from test_shape_designer_func_8_40~41",
        "description": [
            "1. Check preview as GT from test_shape_designer_func_8_40~41"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_42] Check preview as GT from test_shape_designer_func_8_40~41')\n    def test_shape_designer_func_8_42(self):\n    '''\n        1. Check preview as GT from test_shape_designer_func_8_40~41\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_41\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_06_29')\n            # Compare preview\n            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L206.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L206.png', check_preview, similarity=0.98)\n            assert compare_result, \"Preview is not correct as GT(L206.png)! Similary should>0.98\""
    },
    {
        "name": "test_shape_designer_func_8_43",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_43] Remove 4th position keyframe at (08:10)",
        "description": [
            "1. Remove 4th position keyframe at (08:10)",
            "2. Switch to previous Position keyframe and check timecode (05:25)",
            "3. Switch to next Position keyframe and check timecode stay at (05:25)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_43] Remove 4th position keyframe at (08:10)')\n    def test_shape_designer_func_8_43(self):\n    '''\n        1. Remove 4th position keyframe at (08:10)\n        2. Switch to previous Position keyframe and check timecode (05:25)\n        3. Switch to next Position keyframe and check timecode stay at (05:25)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_42\"\n        self.ensure_dependency(dependency_test)\n\n        # [L440] 3.5 Shape Designer (Shape 10) > Add keyframe in simple timeline\n        # with uuid(\"1df5b03f-b8c4-4da6-87be-582d3c308826\") as case:\n        with step('[Action] Remove 4th position keyframe at (08:10)'):\n            # Click next keyframe\n            shape_designer_page.simple_timeline.position.click_next_keyframe()\n            # Remove 4th position keyframe\n            shape_designer_page.simple_timeline.position.add_keyframe()\n\n        with step('[Action] Switch to previous Position keyframe'):\n            # Click previous keyframe\n            shape_designer_page.simple_timeline.position.click_previous_keyframe()\n\n        with step('[Verify] Check timecode at (05:25)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:05:25':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}\"\n\n        with step('[Action] Switch to next Position keyframe'):\n            # Click next keyframe\n            shape_designer_page.simple_timeline.position.click_next_keyframe()\n        \n        with step('[Verify] Check timecode stay at (05:25)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:05:25':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}\"\n        assert True\n\n            # # Set timecode\n            # shape_designer_page.set_timecode('00_00_05_13')\n            # # Add scale keyframe\n            # shape_designer_page.simple_timeline.scale.add_keyframe()\n            # time.sleep(DELAY_TIME * 2)\n\n            # # Set scale W = 0.982\n            # shape_designer_page.keyframe.object_settings.scale.w.set_value(0.982)\n\n            # # Set timecode\n            # shape_designer_page.set_timecode('00_00_06_29')\n            # time.sleep(DELAY_TIME * 1.5)\n\n            # # Compare preview\n            # check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,\n            #                                    file_name=Auto_Ground_Truth_Folder + 'L207.png')\n            # compare_result = main_page.compare(Ground_Truth_Folder + 'L207.png', check_preview, similarity=0.88)\n            # case.result = compare_result"
    },
    {
        "name": "test_shape_designer_func_8_44",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_shape_designer_func_8_44] Play video",
        "description": [
            "1. [Initial] Minimalize window and switch to properties tab",
            "2. Play the video",
            "3. Check if preview changed correctly after play"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_shape_designer_func_8_44] Play video')\n    def test_shape_designer_func_8_44(self):\n    '''\n        1. [Initial] Minimalize window and switch to properties tab\n        2. Play the video\n        3. Check if preview changed correctly after play\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_43\"\n        self.ensure_dependency(dependency_test)\n\n        # [L442] 3.5 Shape Designer (Shape 10) > Preview in designer\n        # with uuid(\"57fc39a2-bd36-432d-a9f1-e9e148f9816d\") as case:\n        with step('[Initial] Minimalize window and switch to properties tab'):\n            # Restore window\n            shape_designer_page.click_restore_btn()\n            # Switch to properties\n            shape_designer_page.click_properties_tab()\n\n        with step('[Action] Play the video'):\n            # Set timecode at (00:00:00:00)\n            shape_designer_page.set_timecode('00_00_00_00')\n            # Click Play\n            shape_designer_page.click_preview_operation('Play')\n\n        with step('[Verify] Check if preview changed correctly after play'):\n            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)\n            if not check_preview_update:\n                assert False, \"Preview is not updated after play in 2 secs!\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_45",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_shape_designer_func_8_45] Pause video",
        "description": [
            "1. Pause the video and check timecode is in (00:00:02:00) ~ (00:00:04:00)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_shape_designer_func_8_45] Pause video')\n    def test_shape_designer_func_8_45(self):\n    '''\n        1. Pause the video and check timecode is in (00:00:02:00) ~ (00:00:04:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_44\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Pause the video'):\n            shape_designer_page.click_preview_operation('Stop')\n            shape_designer_page.click_preview_operation('Play')\n            time.sleep(2)\n\n            # Click Pause\n            shape_designer_page.click_preview_operation('Pause')\n        with step('[Verify] Check timecode is in (00:00:02:00) ~ (00:00:04:00)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            # check timecode in range (00:00:02:00) ~ (00:00:04:00)\n            if current_timecode < '00:00:02:00' or current_timecode > '00:00:04:00':\n                assert False, f\"Timecode is not in range (00:00:02:00) ~ (00:00:04:00)! Actual: {current_timecode}\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_46",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_shape_designer_func_8_46] Stop video",
        "description": [
            "1. Stop the video and check timecode back to (00:00:00:00)"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_shape_designer_func_8_46] Stop video')\n    def test_shape_designer_func_8_46(self):\n    '''\n        1. Stop the video and check timecode back to (00:00:00:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_45\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Stop the video'):\n            # Click Stop\n            shape_designer_page.click_preview_operation('Stop')\n        \n\n        with step('[Verify] Check timecode back to (00:00:00:00)'):\n            # Verify timecode\n            current_timecode = shape_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}\"\n        assert True\n\n\n\n\n            # # Set timecode\n            # shape_designer_page.set_timecode('00_00_04_29')\n            # time.sleep(DELAY_TIME * 1.5)\n\n            # # Compare preview\n            # check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,\n            #                                    file_name=Auto_Ground_Truth_Folder + 'L209.png')\n            # compare_result = main_page.compare(Ground_Truth_Folder + 'L209.png', check_preview)\n            # case.result = compare_result"
    },
    {
        "name": "test_shape_designer_func_8_47",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "save_template"
        ],
        "marked_name": "[test_shape_designer_func_8_47] Save Template",
        "description": [
            "1. Save as Template",
            "2. Check if title changed to saved template name",
            "3. Close Shape Designer",
            "4. Check if saved template is added to library"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_shape_designer_func_8_47] Save Template')\n    def test_shape_designer_func_8_47(self):\n    '''\n        1. Save as Template\n        2. Check if title changed to saved template name\n        3. Close Shape Designer\n        4. Check if saved template is added to library\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_46\"\n        self.ensure_dependency(dependency_test)\n\n        # [L443] 3.5 Shape Designer (Shape 10) > Save as template\n        # with uuid(\"7a48ed0f-e18b-40e0-8749-82321bac9821\") as case:\n        with step('[Action] Save as template'):\n            shape_designer_page.click_save_as()\n            shape_designer_page.save_as.set_name('Custom_shape_10')\n            shape_designer_page.save_as.click_ok()\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check if title changed to saved template name'):\n            # Verify Step 1: check caption bar\n            current_title = shape_designer_page.get_title()\n            if current_title != 'Custom_shape_10':\n                assert False, f\"Title is not correct! Expected: Custom_shape_10, Actual: {current_title}\"\n\n        with step('[Action] Close Shape Designer'):\n            # Click [OK]\n            shape_designer_page.click_ok()\n\n        with step('[Verify] Check if saved template is in library'):\n            # Verify Step2:\n            custom_select_result = main_page.select_library_icon_view_media('Custom_shape_10')\n            if not custom_select_result:\n                assert False, \"Custom_shape_10 is not in library!\"\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_48",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "timeline",
            "save_template"
        ],
        "marked_name": "[test_shape_designer_func_8_48] Add saved template to timeline",
        "description": [
            "1. Add saved template to track1 timeline at (19:00)",
            "2. Check if saved template is in timeline by selected video track 1 and check title"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.timeline\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_shape_designer_func_8_48] Add saved template to timeline')\n    def test_shape_designer_func_8_48(self):\n    '''\n        1. Add saved template to track1 timeline at (19:00)\n        2. Check if saved template is in timeline by selected video track 1 and check title\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_47\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L444] 3.5 Shape Designer (Shape 10) > Add saved template to timeline\n        # with uuid(\"ae82fd12-b91f-40e1-ade5-5cca22803e7e\") as case:\n\n        with step('[Action] Add saved template to timeline'):\n            # select timeline track 1\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode('00_00_19_00')\n            main_page.select_library_icon_view_media('Custom_shape_10')\n            main_page.right_click()\n            main_page.select_right_click_menu('Add to Timeline')\n\n        with step('[Verify] Check if saved template is in timeline'):\n            # Verify Step1 : Check (Custom_shape_10) is in Video track 1\n            timeline_operation_page.select_timeline_media(track_index=0, clip_index=2)\n            main_page.double_click()\n            current_title = shape_designer_page.get_title()\n            assert current_title == 'Custom_shape_10', f\"Title is not correct! Expected: Custom_shape_10, Actual: {current_title}\"\n\n        # # Verify Step2: Play then Pause\n        # # Click Play\n        # shape_designer_page.click_preview_operation('Play')\n        # time.sleep(DELAY_TIME * 2)\n\n        # # Click Pause\n        # shape_designer_page.click_preview_operation('Pause')\n        # time.sleep(DELAY_TIME * 1.5)"
    },
    {
        "name": "test_shape_designer_func_8_49",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode",
            "play_video"
        ],
        "marked_name": "[test_shape_designer_func_8_47] Check preview from test_shape_designer_func_8_27~48",
        "description": [
            "1. Check preview from test_shape_designer_func_8_27~48"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_shape_designer_func_8_47] Check preview from test_shape_designer_func_8_27~48')\n    def test_shape_designer_func_8_49(self):\n    '''\n        1. Check preview from test_shape_designer_func_8_27~48\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_48\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check preview as GT'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_02_01')\n\n            # Compare preview\n            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L211.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L211.png', check_preview,similarity=0.9)\n            assert compare_result, \"Preview is not correct as GT(L211.png)! Similary should>0.9\"\n\n        # # [L437] 3.5 Shape Designer (Shape 10) > Only show the selected track\n        # with uuid(\"12c35c84-9c7b-4ba1-bcdb-7510d1dc1555\") as case:\n        #     # Click Stop\n        #     shape_designer_page.click_preview_operation('Stop')\n        #     time.sleep(DELAY_TIME)\n\n        #     # Check checkbox default status\n        #     elem_checkbox = main_page.exist(L.shape_designer.show_the_selected_track)\n        #     default_value = elem_checkbox.AXValue\n        #     if default_value == 0:\n        #         default_status = True\n        #     else:\n        #         default_status = False\n        #     logger(default_status)"
    },
    {
        "name": "test_shape_designer_func_8_50",
        "tags": [
            "shape_designer_func",
            "shape_designer",
            "timecode"
        ],
        "marked_name": "[test_shape_designer_func_8_50] Only show the selected track",
        "description": [
            "1. Only show the selected track"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.shape_designer\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_designer_func_8_50] Only show the selected track')\n    def test_shape_designer_func_8_50(self):\n    '''\n        1. Only show the selected track\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_shape_designer_func_8_48\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set only show the selected track'):\n            # Set only show the selected track\n            main_page.click(L.shape_designer.show_the_selected_track)\n\n        with step('[Verify] Check preview as GT'):\n            # Set timecode\n            shape_designer_page.set_timecode('00_00_02_01')\n\n            # Compare preview\n            check_preview_204 = main_page.snapshot(locator=L.shape_designer.designer_window)\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L211.png', check_preview_204)\n            if not compare_result:\n                assert False, \"Preview is the same as GT(L211.png)! Similary should>0.95\"\n\n        with step('[Initial] Save project'):\n            shape_designer_page.click_cancel()\n\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_shape_designer_func_8_50',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        assert True"
    },
    {
        "name": "test_shape_designer_func_8_z",
        "tags": [
            "shape_designer_func"
        ],
        "marked_name": "[test_shape_designer_func_8_z] Close AP due to the section is completed",
        "description": [
            "1. Open AP and open saved project",
            "2. Enter Particle room",
            "3. Search and select Halloween",
            "4. Drag Halloween to timeline track 2",
            "5. Open Particle Designer from tips",
            "6. Check Particle Designer title"
        ],
        "full_code": "@pytest.mark.shape_designer_func\n    @pytest.mark.name('[test_shape_designer_func_8_z] Close AP due to the section is completed')\n    def test_shape_designer_func_8_z(self):\n    '''\n        1. Open AP and open saved project\n        2. Enter Particle room\n        3. Search and select Halloween\n        4. Drag Halloween to timeline track 2\n        5. Open Particle Designer from tips\n        6. Check Particle Designer title\n        '''\nwith step('[Action] Open AP and open saved project'):\n            main_page.start_app()\n            time.sleep(DELAY_TIME)\n\n            project_name = 'Packed_Project/test_particle_designer_func_9_1_from_test_shape_designer_func_8_50.pdk'\n            save_name = 'Extracted_Folder/test_particle_designer_func_9_1'\n            self.open_packed_project(project_name, save_name)\n\n        # [L213] 3.6 Particle Designer (Should support opacity) > Open Particle designer\n        # with uuid(\"51d8dc04-c9dc-4f8e-b7e2-bfb9e802e19b\") as case:\n        with step('[Action] Enter particle room'):\n            # enter Particle room\n            main_page.enter_room(5)\n\n        with step('[Action] Search and select Halloween 05'):\n            particle_room_page.search_Particle_room_library('Halloween')\n\n            main_page.select_library_icon_view_media('Halloween 05')\n            time.sleep(DELAY_TIME*7) # wait for downloading conponent\n\n        with step('[Action] Drag Halloween to timeline track 2'):\n            # Drag BFT_title_Save to timeline track 2\n            main_page.drag_media_to_timeline_playhead_position('Halloween 05', track_no=2)\n\n        with step('[Action] Open Particle Designer from tips'):\n            # Click tips area [Designer] button\n            main_page.tips_area_click_designer(2)\n\n        with step('[Verify] Check Particle Designer title'):\n            check_title = particle_designer_page.get_particle_designer_title()\n            assert check_title == 'Halloween 05', f\"Title is not correct! Expected: Halloween 05, Actual: {check_title}\""
    },
    {
        "name": "test_particle_designer_func_9_2",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_2] Check Default [Emit] value == 100000",
        "description": [
            "1. Check Default [Emit] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_2] Check Default [Emit] value == 100000')\n    def test_particle_designer_func_9_2(self):\n    '''\n        1. Check Default [Emit] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L214] 3.6 Particle Designer (Should support opacity) > modify parameter\n        # with uuid(\"56edc685-fdb3-4aa5-9fbb-36060e6a5223\") as case:\n\n        with step('[Action] Get Default value of Emit'):\n            # Get default Emit / Max / Life / Size / Speed / Opacity  value\n            default_emit_value = particle_designer_page.express_mode.get_Emit_value()\n        with step('[Verify] Check Default value of Emit == 100000'):\n            assert default_emit_value == 100000, f\"Default Emit value is not correct! Expected: 100000, Actual: {default_emit_value}\""
    },
    {
        "name": "test_particle_designer_func_9_3",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_3] Check Default [Max] value == 100000",
        "description": [
            "1. Check Default [Max] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_3] Check Default [Max] value == 100000')\n    def test_particle_designer_func_9_3(self):\n    '''\n        1. Check Default [Max] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Get Default value of Max'):\n            default_max_value = particle_designer_page.express_mode.get_Max_value()\n        with step('[Verify] Check Default value of Max == 100000'):\n            assert default_max_value == 100000, f\"Default Max value is not correct! Expected: 100000, Actual: {default_max_value}\""
    },
    {
        "name": "test_particle_designer_func_9_4",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_4] Check Default [Life] value == 100000",
        "description": [
            "1. Check Default [Life] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_4] Check Default [Life] value == 100000')\n    def test_particle_designer_func_9_4(self):\n    '''\n        1. Check Default [Life] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Get Default value of Life'):\n            default_life_value = particle_designer_page.express_mode.get_Life_value()\n        with step('[Verify] Check Default value of Life == 100000'):\n            assert default_life_value == 100000, f\"Default Life value is not correct! Expected: 100000, Actual: {default_life_value}\""
    },
    {
        "name": "test_particle_designer_func_9_5",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_5] Check Default [Size] value == 100000",
        "description": [
            "1. Check Default [Size] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_5] Check Default [Size] value == 100000')\n    def test_particle_designer_func_9_5(self):\n    '''\n        1. Check Default [Size] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Get Default value of Size'):\n            default_size_value = particle_designer_page.express_mode.get_Size_value()\n        with step('[Verify] Check Default value of Size == 100000'):\n            assert default_size_value == 100000, f\"Default Size value is not correct! Expected: 100000, Actual: {default_size_value}\""
    },
    {
        "name": "test_particle_designer_func_9_6",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_6] Check Default [Speed] value == 100000",
        "description": [
            "1. Check Default [Speed] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_6] Check Default [Speed] value == 100000')\n    def test_particle_designer_func_9_6(self):\n    '''\n        1. Check Default [Speed] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Get Default value of Speed'):\n            default_speed_value = particle_designer_page.express_mode.get_Speed_value()\n        with step('[Verify] Check Default value of Speed == 100000'):\n            assert default_speed_value == 100000, f\"Default Speed value is not correct! Expected: 100000, Actual: {default_speed_value}\""
    },
    {
        "name": "test_particle_designer_func_9_7",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_7] Check Default [Opacity] value == 100000",
        "description": [
            "1. Check Default [Opacity] value == 100000"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_7] Check Default [Opacity] value == 100000')\n    def test_particle_designer_func_9_7(self):\n    '''\n        1. Check Default [Opacity] value == 100000\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Get Default value of Opacity'):\n            default_opacity_value = particle_designer_page.express_mode.get_Opacity_value()\n        with step('[Verify] Check Default value of Opacity == 100000'):\n            assert default_opacity_value == 100000, f\"Default Opacity value is not correct! Expected: 100000, Actual: {default_opacity_value}\""
    },
    {
        "name": "test_particle_designer_func_9_8",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_8] Change [Emit] value by slider",
        "description": [
            "1. Apply Emit (10407) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_8] Change [Emit] value by slider')\n    def test_particle_designer_func_9_8(self):\n    '''\n        1. Apply Emit (10407) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Emit (10407) by slider'):\n            before_emit_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Emit_slider(10407)\n\n        with step('[Verify] Check Emit value == 10407'):\n            check_emit_value = particle_designer_page.express_mode.get_Emit_value()\n            if check_emit_value != 10407:\n                assert False, f\"Emit value is not correct! Expected: 10407, Actual: {check_emit_value}\"\n        \n        with step('[Verify] Check preview is changed'):\n            after_emit_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_emit_preview, after_emit_preview, similarity=0.98):\n                assert False, \"Preview is not changed after set Emit value! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_9",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_9] Change [Max] value by slider",
        "description": [
            "1. Apply [Max] (170621) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_9] Change [Max] value by slider')\n    def test_particle_designer_func_9_9(self):\n    '''\n        1. Apply [Max] (170621) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Max (170621) by slider'):\n            before_max_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Max_slider(170621)\n        with step('[Verify] Check Max value == 170621'):\n            check_max_value = particle_designer_page.express_mode.get_Max_value()\n            if check_max_value != 170621:\n                assert False, f\"Max value is not correct! Expected: 170621, Actual: {check_max_value}\"\n        with step('[Verify] Check preview is changed'):\n            after_max_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_max_preview, after_max_preview, similarity=0.999):\n                assert False, \"Preview is not changed after set Max value! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_10",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_10] Change [Life] value by slider",
        "description": [
            "1. Apply [Life] (200000) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_10] Change [Life] value by slider')\n    def test_particle_designer_func_9_10(self):\n    '''\n        1. Apply [Life] (200000) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Life (200000) by slider'):\n            before_life_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Life_slider(200000)\n        \n        with step('[Verify] Check Life value == 200000'):\n            check_life_value = particle_designer_page.express_mode.get_Life_value()\n            if check_life_value != 200000:\n                assert False, f\"Life value is not correct! Expected: 200000, Actual: {check_life_value}\"\n        \n        with step('[Verify] Check preview is changed'):\n            after_life_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_life_preview, after_life_preview, similarity=0.999):\n                assert False, \"Preview is not changed after set Life value! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_11",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_11] Change [Size] value by slider",
        "description": [
            "1. Apply [Size] (171940) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_11] Change [Size] value by slider')\n    def test_particle_designer_func_9_11(self):\n    '''\n        1. Apply [Size] (171940) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Size (171940) by slider'):\n            before_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Size_slider(171940)\n\n        with step('[Verify] Check Size value == 171940'):\n            check_size_value = particle_designer_page.express_mode.get_Size_value()\n            if check_size_value != 171940:\n                assert False, f\"Size value is not correct! Expected: 171940, Actual: {check_size_value}\"\n        \n        with step('[Verify] Check preview is changed'):\n            after_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_size_preview, after_size_preview, similarity=0.98):\n                assert False, \"Preview is not changed after set Size value! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_12",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_12] Change [Size] value by [Plus] button",
        "description": [
            "1. Apply [Size] (178940) by [Plus] button",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_12] Change [Size] value by [Plus] button')\n    def test_particle_designer_func_9_12(self):\n    '''\n        1. Apply [Size] (178940) by [Plus] button\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Size (178940) by [Plus] button'):\n            before_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.click_Size_plus_btn(7)\n\n        with step('[Verify] Check Size value == 178940'):\n            check_size_value = particle_designer_page.express_mode.get_Size_value()\n            if check_size_value != 178940:\n                assert False, f\"Size value is not correct! Expected: 178940, Actual: {check_size_value}\"\n            \n        with step('[Verify] Check preview is changed'):\n            after_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_size_preview, after_size_preview, similarity=0.999):\n                assert False, \"Preview is not changed after set Size value! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_13",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_13] Change [Speed] value by slider",
        "description": [
            "1. Apply [Speed] (126610) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_13] Change [Speed] value by slider')\n    def test_particle_designer_func_9_13(self):\n    '''\n        1. Apply [Speed] (126610) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Speed (126610) by slider'):\n            before_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Speed_slider(126610)\n        \n        with step('[Verify] Check Speed value == 126610'):\n            check_speed_value = particle_designer_page.express_mode.get_Speed_value()\n            if check_speed_value != 126610:\n                assert False, f\"Speed value is not correct! Expected: 126610, Actual: {check_speed_value}\"\n        \n        with step('[Verify] Check preview is changed'):\n            after_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_speed_preview, after_speed_preview, similarity=0.98):\n                assert False, \"Preview is not changed after set Speed value! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_14",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_14] Change [Speed] value by [Minus] button",
        "description": [
            "1. Apply [Speed] (121610) by [Minus] button",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_14] Change [Speed] value by [Minus] button')\n    def test_particle_designer_func_9_14(self):\n    '''\n        1. Apply [Speed] (121610) by [Minus] button\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Speed (121610) by [Minus] button'):\n            before_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.click_Speed_minus_btn(5)\n        \n        with step('[Verify] Check Speed value == 121610'):\n            check_speed_value = particle_designer_page.express_mode.get_Speed_value()\n            if check_speed_value != 121610:\n                assert False, f\"Speed value is not correct! Expected: 121610, Actual: {check_speed_value}\"\n\n        with step('[Verify] Check preview is changed'):\n            after_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_speed_preview, after_speed_preview, similarity=0.999):\n                assert False, \"Preview is not changed after set Speed value! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_15",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_15] Change [Opacity] value by slider",
        "description": [
            "1. Apply [Opacity] (194574) by Slider",
            "2. Check value and preview"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_15] Change [Opacity] value by slider')\n    def test_particle_designer_func_9_15(self):\n    '''\n        1. Apply [Opacity] (194574) by Slider\n        2. Check value and preview\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Opacity (194574) by slider'):\n            before_opacity_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            particle_designer_page.express_mode.drag_Opacity_slider(194574)\n        \n        with step('[Verify] Check Opacity value == 194574'):\n            check_opacity_value = particle_designer_page.express_mode.get_Opacity_value()\n            if check_opacity_value != 194574:\n                assert False, f\"Opacity value is not correct! Expected: 194574, Actual: {check_opacity_value}\"\n\n        with step('[Verify] Check preview is changed'):\n            after_opacity_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            if main_page.compare(before_opacity_preview, after_opacity_preview, similarity=0.999):\n                assert False, \"Preview is not changed after set Opacity value! Similary should<0.999\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_16",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_particle_designer_func_9_16] Check Preview from test_particle_designer_func_9_8~15",
        "description": [
            "1. Check Preview from test_particle_designer_func_9_8~15"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_particle_designer_func_9_16] Check Preview from test_particle_designer_func_9_8~15')\n    def test_particle_designer_func_9_16(self):\n    '''\n        1. Check Preview from test_particle_designer_func_9_8~15\n        '''\n# If the result from test_particle_designer_func_9_8~15 is True, else the test will be failed\n        dependency_test_list = [\"test_particle_designer_func_9_8\", \"test_particle_designer_func_9_9\", \"test_particle_designer_func_9_10\", \"test_particle_designer_func_9_11\", \"test_particle_designer_func_9_12\", \"test_particle_designer_func_9_13\", \"test_particle_designer_func_9_14\", \"test_particle_designer_func_9_15\"]\n        for dependency_test in dependency_test_list:\n            if not self.ensure_dependency(dependency_test, run_dependency=False):\n                assert False, f\"Dependency test {dependency_test} is failed! Please check the result first!\"\n\n            # drag scroll bar to 1\n            #particle_designer_page.drag_properties_scroll_bar(1)\n\n        with step('[Verify] Check preview as GT'):\n            # Set timecode = 00:00:04:09\n            particle_designer_page.set_timecode('00_00_04_09')\n\n            # Verify Step;\n            check_preview = main_page.snapshot(locator=L.particle_designer.designer_window,\n                                               file_name=Auto_Ground_Truth_Folder + 'L214.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L214.png', check_preview)\n\n            assert compare_result, \"Preview is not correct as GT(L214.png)! Similary should>0.95\""
    },
    {
        "name": "test_particle_designer_func_9_17",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "play_video"
        ],
        "marked_name": "[test_particle_designer_func_9_17] Play preview by [Next Frame] button",
        "description": [
            "1. Play preview by [Next Frame] button"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_particle_designer_func_9_17] Play preview by [Next Frame] button')\n    def test_particle_designer_func_9_17(self):\n    '''\n        1. Play preview by [Next Frame] button\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test_list = [\"test_particle_designer_func_9_8\", \"test_particle_designer_func_9_9\", \"test_particle_designer_func_9_10\", \"test_particle_designer_func_9_11\", \"test_particle_designer_func_9_12\", \"test_particle_designer_func_9_13\", \"test_particle_designer_func_9_14\", \"test_particle_designer_func_9_15\"]\n        for dependency_test in dependency_test_list:\n            self.ensure_dependency(dependency_test)\n\n        # [L215] 3.6 Particle Designer (Should support opacity) > preview in designer\n        # with uuid(\"3bc57b03-6b38-45a7-b7d4-83db0bb56922\") as case:\n            # Seek next frame to 00:00:04:18\n        with step('[Action] Reach (04:18) by click [Next_Frame] button'):\n            for _ in range(9):\n                particle_designer_page.click_preview_operation('Next_Frame')\n                time.sleep(DELAY_TIME*0.5)\n\n        with step('[Verify] Check timecode is (04:18)'):\n            check_timecode = particle_designer_page.get_timecode()\n            if check_timecode != '00:00:04:18':\n                assert False, f\"Timecode is not correct! Expected: 00:00:04:18, Actual: {check_timecode}\"\n\n        with step('[Verify] Check preview as GT'):\n            # Verify Step;\n            check_preview = main_page.snapshot(locator=L.particle_designer.designer_window)\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L214.png', check_preview)\n            if compare_result:\n                assert False, \"Preview is the same as GT(L214.png at 04:09)! Similary should<0.95\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_18",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "save_template",
            "dz",
            "cyberlink_cloud"
        ],
        "marked_name": "[test_particle_designer_func_9_18] Save and share template to cloud",
        "description": [
            "1. Save and share template to cloud",
            "2. Check if title changed to saved name"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.save_template\n    @pytest.mark.dz\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.name('[test_particle_designer_func_9_18] Save and share template to cloud')\n    def test_particle_designer_func_9_18(self):\n    '''\n        1. Save and share template to cloud\n        2. Check if title changed to saved name\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = 'test_particle_designer_func_9_17'\n        self.ensure_dependency(dependency_test)\n\n        # [L216] 3.6 Particle Designer (Should support opacity) > [Share] template online\n        # with uuid(\"6030bf73-af59-4bef-ba28-051b275491ec\") as case:\n\n        with step('[Action] Save and share template to cloud'):\n            check_upload = particle_designer_page.share_to_cloud(name='Halloween_design', tags='123', collection='test', description='white color', verify_dz_link=1)\n            if not check_upload:\n                assert False, \"Cannot upload template to cloud! Please check the result first!\"\n\n        with step('[Verify] Check if title changed to saved name'):\n            # Verify step: check title\n            check_title = particle_designer_page.get_particle_designer_title()\n\n            if check_title != 'Halloween_design':\n                assert False, f\"Title is not correct! Expected: Halloween_design, Actual: {check_title}\"\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_19",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "save_template",
            "dz",
            "cyberlink_cloud"
        ],
        "marked_name": "[test_particle_designer_func_9_19] Download content form CL/DZ",
        "description": [
            "1. Save the template to Local as BFT_Halloween_custom",
            "2. Download content form CL/DZ"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.save_template\n    @pytest.mark.dz\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.name('[test_particle_designer_func_9_19] Download content form CL/DZ')\n    def test_particle_designer_func_9_19(self):\n    '''\n        1. Save the template to Local as BFT_Halloween_custom\n        2. Download content form CL/DZ\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_18\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Save template'):\n            # ---------------------------------\n            # Click [Save as] > Save custom name then close Particle designer\n            particle_designer_page.save_as_name('BFT_Halloween_custom')\n            time.sleep(DELAY_TIME)\n            particle_designer_page.save_as_ok()\n            particle_designer_page.click_OK()\n\n        with step('[Action] Download content form CL/DZ'):\n            # Click download content form CL/DZ\n            particle_room_page.click_DownloadContent_from_DZCloud()\n            \n            # Already enter \"Download Particle Objects\" > Open My Cyberlink Cloud\n            # Select template name \"dialog09_chroma\"\n            check_CL_content = download_from_cl_dz_page.select_template('Halloween_design')\n            if not check_CL_content:\n                assert False, \"Cannot find template in CL/DZ!\"\n\n        with step('[Initial] Delete saved template on dz/cloud'):\n            download_from_cl_dz_page.tap_delete_button()\n            # Close \"Download Particle Objects\" window\n            # download_from_cl_dz_page.tap_close_button()\n            main_page.press_esc_key()\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_20",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "save_template"
        ],
        "marked_name": "[test_particle_designer_func_9_20] Check preview changed after select saved custom template",
        "description": [
            "1. Check preview changed after select saved custom template"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_particle_designer_func_9_20] Check preview changed after select saved custom template')\n    def test_particle_designer_func_9_20(self):\n    '''\n        1. Check preview changed after select saved custom template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_particle_designer_func_9_19\"\n        self.ensure_dependency(dependency_test)\n\n        # [L217] 3.6 Particle Designer (Should support opacity) > Save / Save as template\n        # with uuid(\"23140e39-6b80-4d37-b572-266f1481fca1\") as case:\n\n        with step('[Action] Selct saved custom template'):\n            main_page.select_library_icon_view_media('BFT_Halloween_custom')\n\n        with step('[Verify] Check preview changed'):\n            check_different = main_page.Check_PreviewWindow_is_different(sec=4)\n            assert check_different, \"Preview is not changed after select saved custom template!\""
    },
    {
        "name": "test_particle_designer_func_9_21",
        "tags": [
            "particle_designer_func",
            "particle_designer",
            "save_template",
            "timeline",
            "timecode"
        ],
        "marked_name": "[test_particle_designer_func_9_21] Add saved custom template to timeline",
        "description": [
            "1. Add saved custom template to timeline",
            "2. Check preview as GT"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.particle_designer\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_particle_designer_func_9_21] Add saved custom template to timeline')\n    def test_particle_designer_func_9_21(self):\n    '''\n        1. Add saved custom template to timeline\n        2. Check preview as GT\n        '''\n# # Ensure the dependency test is run and passed\n        # dependency_test = \"test_particle_designer_func_9_20\"\n        # self.ensure_dependency(dependency_test)\n\n        # [L218] 3.6 Particle Designer (Should support opacity) > Add saved title template to timeline\n        # with uuid(\"5945daf9-f385-471b-aa11-4b9445c4736f\") as case:\n        with step('[Action] Add saved custom template to timeline'):\n            # select timeline track 1\n            main_page.timeline_select_track(1)\n            # Set CTI timeline to (00:00:29:00)\n            main_page.set_timeline_timecode('00_00_29_00')\n            # Add to timeline\n            main_page.select_library_icon_view_media('BFT_Halloween_custom')\n            main_page.tips_area_insert_media_to_selected_track()\n\n        with step('[Verify] Check preview as GT'):\n            main_page.set_timeline_timecode('00_00_03_02')\n            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L217.png')\n            check_timeline_particle = main_page.compare(Ground_Truth_Folder + 'L217.png', timeline_preview, similarity=0.8)\n            if not check_timeline_particle:\n                assert False, \"Preview is not correct as GT(L217.png)! Similary should>0.8\"\n\n        with step('[Action] Save project'):\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_particle_designer_func_9_21',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        assert True"
    },
    {
        "name": "test_particle_designer_func_9_z",
        "tags": [
            "particle_designer_func"
        ],
        "marked_name": "[test_particle_designer_func_9_z] Close AP due to the section is completed",
        "description": [
            "1. Open AP and open saved project",
            "2. Add Sport 02.jpg to timeline track3",
            "3. Open Mask Designer by tips area",
            "4. Check open Mask Designer window with Sport 02.jpg"
        ],
        "full_code": "@pytest.mark.particle_designer_func\n    @pytest.mark.name('[test_particle_designer_func_9_z] Close AP due to the section is completed')\n    def test_particle_designer_func_9_z(self):\n    '''\n        1. Open AP and open saved project\n        2. Add Sport 02.jpg to timeline track3\n        3. Open Mask Designer by tips area\n        4. Check open Mask Designer window with Sport 02.jpg\n        '''\nwith step('[Action] Open AP and open saved project'):\n            main_page.start_app()\n            time.sleep(DELAY_TIME)\n\n            project_name = 'Packed_Project/test_mask_designer_func_10_1_from_test_particle_designer_func_9_21.pdk'\n            save_name = 'Extracted_Folder/test_mask_designer_func_10_1'\n            self.open_packed_project(project_name, save_name)\n\n        with step('[Action] Add Sport 02.jpg to timeline track3'):\n            # select timeline track 3\n            main_page.timeline_select_track(3)\n            # Set timecode :\n            main_page.set_timeline_timecode('00_00_24_00')\n            # Drag Spor t02.jpg to timeline track3\n            main_page.drag_media_to_timeline_playhead_position('Sport 02.jpg', track_no=3)\n\n        # [L220] 3.7 Mask Designer (Sport 02.jpg) > Open Mask Designer\n        # with uuid(\"152b2168-2061-4e23-bdf0-1301392bcdee\") as case:\n        with step('[Action] Open Mask Designer by tips area'):\n            # Click Tools > select (Mask designer)\n            main_page.click(L.main.tips_area.btn_tools)\n            main_page.select_right_click_menu('Mask Designer')\n\n        with step('[Verify] Check open Mask Designer window with Sport 02.jpg'):\n            # Verify Step:\n            check_mask_window = main_page.exist(L.mask_designer.mask_designer_window)\n            if not check_mask_window:\n                assert False, \"Mask Designer window is not opened!\"\n            assert check_mask_window.AXTitle == 'Mask Designer  |  Sport 02', f\"Show incorrect title on mask designer! Expected: Mask Designer  |  Sport 02, Actual: {check_mask_window.AXTitle}\""
    },
    {
        "name": "test_mask_designer_func_10_2",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "mask_preset"
        ],
        "marked_name": "[test_mask_designer_func_10_2] Apply Mask preset",
        "description": [
            "1. Apply a random mask from index 1~7 and check preview is changed",
            "2. Apply mask 8 and check preview is changed"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.mask_preset\n    @pytest.mark.name('[test_mask_designer_func_10_2] Apply Mask preset')\n    def test_mask_designer_func_10_2(self):\n    '''\n        1. Apply a random mask from index 1~7 and check preview is changed\n        2. Apply mask 8 and check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L221] 3.7 Mask Designer (Sport 02.jpg) > Apply default mask\n        # with uuid(\"e4a71739-d5e3-4598-8f18-af2a81a6e91c\") as case:\n\n        random_idx = random.randrange(1,7) # Get random index from 1~7\n        with step(f'[Action] Apply a random mask from index 1~7, selected index: {random_idx}'):\n            mask_default_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            #check_timeline_particle = main_page.compare(Ground_Truth_Folder + 'L217.png', timeline_preview, similarity=0.93)\n            mask_designer_page.MaskDesigner_Apply_template(random_idx)\n\n        with step('[Verfiy] Check preview is changed after apply random mask'):\n            mask_x_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(mask_default_preview, mask_x_preview, similarity=0.98):\n                assert False, \"Preview is not changed after apply random mask! Similary should<0.98\"\n\n        with step('[Action] Apply mask 8'):\n            mask_designer_page.MaskDesigner_Apply_template(index=8)\n        \n        with step('[Verfiy] Check preview is changed after apply mask 8'):\n            mask_star_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(mask_x_preview, mask_star_preview, similarity=0.98):\n                assert False, \"Preview is not changed after apply mask 8! Similary should<0.98\"\n\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_3",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "mask_preset",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_3] Move mask object",
        "description": [
            "1. Move mask object to lower right on canva"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.mask_preset\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_3] Move mask object')\n    def test_mask_designer_func_10_3(self):\n    '''\n        1. Move mask object to lower right on canva\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L233] 3.7 Mask Designer (Sport 02.jpg) > Manual adjust on canvas > Move > Operation works fine.\n        # with uuid(\"1f9a1e2a-df56-4083-bb11-bfe9de94793d\") as case:\n        with step('[Action] Move mask object to lower right on canva'):\n            before_move_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # Move mask object to lower right\n            mask_designer_page.move_object_on_canvas(offset_x=30, offset_y=40)\n\n        with step('[Verify] Check preview is changed after move mask object'):\n            # Verify Step:\n            lower_right_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_move_preview, lower_right_preview, similarity=0.98):\n                assert False, \"Preview is not changed after move mask object! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_4",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "custom_mask"
        ],
        "marked_name": "[test_mask_designer_func_10_4] Create custom mask from image",
        "description": [
            "1. Undo test_mask_designer_func_10_3 action",
            "2. Create custom mask from image",
            "3. Check preview is changed as GT"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.custom_mask\n    @pytest.mark.name('[test_mask_designer_func_10_4] Create custom mask from image')\n    def test_mask_designer_func_10_4(self):\n    '''\n        1. Undo test_mask_designer_func_10_3 action\n        2. Create custom mask from image\n        3. Check preview is changed as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_3\"\n        self.ensure_dependency(dependency_test)\n        # [L222] 3.7 Mask Designer (Sport 02.jpg) > custom mask from image\n                    # click undo\n\n        # with uuid(\"f244a59e-d7c8-4da3-b94e-65caa7672ca3\") as case:\n        with step('[Initial] Undo test_mask_designer_func_10_3 action'):\n            mask_designer_page.tap_MaskDesigner_Undo_btn()\n        \n        with step('[Action] Create custom mask from image'):\n            before_custom_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            mask_designer_page.Edit_MaskDesigner_CreateImageMask(Test_Material_Folder + 'BFT_21_Stage1/beauty.jpg')\n\n        with step('[Verify] Check preview is changed after create custom mask from image'):\n            mask_custom_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_custom_preview, mask_custom_preview, similarity=0.98):\n                assert False, \"Preview is not changed after create custom mask from image! Similary should<0.98\"\n\n        with step('[Verfify] Check preview as GT'):\n            zero_sec_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L222.png')\n            if not main_page.compare(Ground_Truth_Folder + 'L222.png', zero_sec_preview, similarity=0.93):\n                assert False, \"Preview is not correct as GT(L222.png)! Similary should>0.93\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_5",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "custom_mask",
            "play_video"
        ],
        "marked_name": "[test_mask_designer_func_10_5] Play the video",
        "description": [
            "1. Play the video",
            "2. Check preview is changed when playing video"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.custom_mask\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_mask_designer_func_10_5] Play the video')\n    def test_mask_designer_func_10_5(self):\n    '''\n        1. Play the video\n        2. Check preview is changed when playing video\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_4\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Play the video'):\n            # Play preview then check (preview is changed)\n            mask_designer_page.Edit_MaskDesigner_PreviewOperation('play')\n\n        with step('[Verify] Check preview is changed when playing video in 2 secs'):\n            # Verify Step1:\n            preview_is_updated = main_page.Check_PreviewWindow_is_different(area=L.mask_designer.preview_window, sec=2)\n            assert preview_is_updated, \"Preview is not changed when playing video in 2 secs!\""
    },
    {
        "name": "test_mask_designer_func_10_6",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "custom_mask",
            "play_video",
            "timecode"
        ],
        "marked_name": "[test_mask_designer_func_10_6] Stop the video",
        "description": [
            "1. Stop the video and check timecode is 00:00:00:00"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.custom_mask\n    @pytest.mark.play_video\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_mask_designer_func_10_6] Stop the video')\n    def test_mask_designer_func_10_6(self):\n    '''\n        1. Stop the video and check timecode is 00:00:00:00\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Stop] button'):\n            mask_designer_page.Edit_MaskDesigner_PreviewOperation('stop')\n        \n        with step('[Verify] Check timecode is 00:00:00:00'):\n            check_timecode = mask_designer_page.get_timecode()\n            if check_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:00, Actual: {check_timecode}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_7",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "custom_mask",
            "delete_mask"
        ],
        "marked_name": "[test_mask_designer_func_10_7] ",
        "description": [
            "1."
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.custom_mask\n    @pytest.mark.delete_mask\n    @pytest.mark.name('[test_mask_designer_func_10_7] ')\n    def test_mask_designer_func_10_7(self):\n    '''\n        1. \n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Remove custom mask'):\n            before_delete_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # Remove custom mask\n            check_remove_custom = mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)\n            if not check_remove_custom:\n                assert False, \"Cannot remove custom mask! Please check the result first!\"\n\n        with step('[Verify] Check preview is changed after remove custom mask'):\n            after_delete_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_delete_preview, after_delete_preview, similarity=0.98):\n                assert False, \"Preview is not changed after remove custom mask! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_8",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "mask_preset",
            "invert_mask"
        ],
        "marked_name": "[test_mask_designer_func_10_8] Set [Only show the selected track] and tick invert mask",
        "description": [
            "1. Set [Only show the selected track]",
            "2. Tick invert mask",
            "3. Check preview is changed as GT"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.mask_preset\n    @pytest.mark.invert_mask\n    @pytest.mark.name('[test_mask_designer_func_10_8] Set [Only show the selected track] and tick invert mask')\n    def test_mask_designer_func_10_8(self):\n    '''\n        1. Set [Only show the selected track]\n        2. Tick invert mask\n        3. Check preview is changed as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L226] 3.7 Mask Designer (Sport 02.jpg) > Invert mask\n        # with uuid(\"2010b0ee-ff55-4ac8-9556-d618b6cb89d0\") as case:\n\n        with step('[Action] Set [Only show the selected track]'):\n            # Set (Only show the selected track)\n            mask_designer_page.Edit_MaskDesigner_Only_Show_Selected_track_SetCheck()\n\n        with step('[Action] Tick invert mask'):\n            # Tick invert mask\n            mask_designer_page.Edit_MaskDesigner_Invert_mask_SetCheck()\n            \n        with step('[Verify] Check preview is changed as GT'):\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L226.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L226.png', current_preview)\n            assert check_preview, \"Preview is not correct as GT(L226.png)! Similary should>0.95\""
    },
    {
        "name": "test_mask_designer_func_10_9",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "text_mask"
        ],
        "marked_name": "[test_mask_designer_func_10_9] Create Text Mask",
        "description": [
            "1. Untick [Invert Mask]",
            "2. Click [Create Text Mask] and check [Mask Composer] window is opened",
            "3. Set text content",
            "4. Hide simple timeline",
            "5. Check preview is changed after create title mask"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.text_mask\n    @pytest.mark.name('[test_mask_designer_func_10_9] Create Text Mask')\n    def test_mask_designer_func_10_9(self):\n    '''\n        1. Untick [Invert Mask]\n        2. Click [Create Text Mask] and check [Mask Composer] window is opened\n        3. Set text content\n        4. Hide simple timeline\n        5. Check preview is changed after create title mask\n        '''\n# Ensure the dependency test is run and passed\n        self.test_mask_designer_func_10_1()\n\n        # [L223] 3.7 Mask Designer (Sport 02.jpg) > Create title mask\n        # with uuid(\"efbff806-82b5-4247-a182-3edc78866548\") as case:\n\n        with step('[Action] Click [Create Text Mask]'):\n            # Title mask\n            mask_designer_page.click_create_text_mask_btn()\n            \n        with step('[Verfiy] Check [Mask Composer] window is opened'):\n            # Check is in (Mask composer)\n            current_status = mask_designer_page.is_enter_mask_composer()\n            if not current_status:\n                assert False, \"No Enter Mask Composer window after click [Create Text Mask]!\"\n        \n        with step('[Action] Set text content'):\n            main_page.click(L.title_designer.area.edittext_text_content)\n            main_page.mouse.click(times=3)\n            main_page.keyboard.send('Etxkhq')\n            main_page.press_enter_key()\n            main_page.keyboard.send('WTrdi')\n            time.sleep(DELAY_TIME)\n            main_page.click(L.title_designer.btn_ok)\n            \n        with step('[Action] Hide simple timeline'):\n            # Hide simple timeline\n            main_page.click(L.mask_designer.btn_hide_timeline_mode)\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check preview is changed after create title mask'):\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L223.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L223.png', current_preview)\n            if not check_preview:\n                assert False, \"Preview is not correct as GT(L223.png)! Similary should>0.95\"\n\n        with step('[Initial] Show simple timeline'):\n            # Show simple timeline\n            main_page.click(L.mask_designer.btn_display_timeline_mode)\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_10",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_10] Rotate object",
        "description": [
            "1. Rotate object degree = 35 and check preview changed"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_10] Rotate object')\n    def test_mask_designer_func_10_10(self):\n    '''\n        1. Rotate object degree = 35 and check preview changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L232] 3.7 Mask Designer (Sport 02.jpg) > Rotate\n        # with uuid(\"5a933fab-12ff-464c-8551-b16ef67de363\") as case:\n\n        with step('[Action] Rotate object degree = 35'):\n            before_rotate_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # Rotate object degree = 35\n            mask_designer_page.rotate_object_on_canvas()\n\n        with step('[Verify] Check preview is changed after rotate object'):\n            # Verify Step:\n            after_rotate_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_rotate_preview, after_rotate_preview, similarity=0.98):\n                assert False, \"Preview is not changed after rotate object! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_11",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "motion",
            "path_template"
        ],
        "marked_name": "[test_mask_designer_func_10_11] Apply path template",
        "description": [
            "1. Switch to [Motion] tab > [Path] tab",
            "2. Apply ramdom path template from index 5~20 and check preview is changed",
            "3. Apply path template 4 and check preview is changed",
            "4. Check preview as GT at (00:25)"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.motion\n    @pytest.mark.path_template\n    @pytest.mark.name('[test_mask_designer_func_10_11] Apply path template')\n    def test_mask_designer_func_10_11(self):\n    '''\n        1. Switch to [Motion] tab > [Path] tab\n        2. Apply ramdom path template from index 5~20 and check preview is changed\n        3. Apply path template 4 and check preview is changed\n        4. Check preview as GT at (00:25)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_10\"\n        self.ensure_dependency(dependency_test)\n\n            # [L230] 3.7 Mask Designer (Sport 02.jpg) > Set [Motion]\n            # with uuid(\"b36192a8-c280-447a-89a5-f0dad4142943\") as case:\n            \n                # # Un-tick (Only show the selected track)\n                # mask_designer_page.Edit_MaskDesigner_Only_Show_Selected_track_SetCheck(check_it=False)\n\n        with step('[Action] Switch to [Motion] tab > [Path] tab'):\n                # Switch to Motion tab\n                mask_designer_page.switch_to_motion()\n                # Open path tab\n                mask_designer_page.motion.open_path_tag()\n\n        random_idx = random.randrange(5, 20)\n        with step(f'[Action] Apply ramdom path template from index 5~20. Selected index: {random_idx}'):\n            before_random_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # random\n            # Apply mask random (5 ~ 20)\n            mask_designer_page.motion.select_path_template(random_idx)\n            motion_x_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n\n        with step('[Verify] Check preview is changed after apply random path template'):\n            random_path_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_random_preview, random_path_preview, similarity=0.98):\n                assert False, \"Preview is not changed after apply random path template! Similary should<0.98\"\n\n        with step('[Action] Select path template 4'):\n            mask_designer_page.motion.select_path_template(4)\n        \n        with step('[Verify] Check preview is changed after apply path template 4'):\n            motion_fourth_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(motion_fourth_preview, motion_x_preview, similarity=0.98):\n                assert False, \"Preview is not changed after apply path template 4! Similary should<0.98\"\n            \n        with step('[Verify] Check preview as GT at (00:25)'):\n            # Set designer timecode (00:00:00:25)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_00_25')\n\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L232.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L232.png', current_preview)\n            if not check_preview:\n                assert False, \"Preview is not correct as GT(L232.png)! Similary should>0.95\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_12",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_mask_designer_func_10_12] Set Rotation Keyframe and Switch to Previous Keyframe",
        "description": [
            "1. Add 1st rotation keyframe on (00:25)",
            "2. Fold Path tab and switch to Mask tab",
            "3. Add 2nd rotation keyframe on (00:02:20)",
            "4. Check rotation value on 2nd rotation keyframe",
            "5. Switch to previous rotation keyframe on (00:25)",
            "6. Check timecode on 1st rotation keyframe"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_mask_designer_func_10_12] Set Rotation Keyframe and Switch to Previous Keyframe')\n    def test_mask_designer_func_10_12(self):\n    '''\n        1. Add 1st rotation keyframe on (00:25)\n        2. Fold Path tab and switch to Mask tab\n        3. Add 2nd rotation keyframe on (00:02:20)\n        4. Check rotation value on 2nd rotation keyframe\n        5. Switch to previous rotation keyframe on (00:25)\n        6. Check timecode on 1st rotation keyframe\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_11\"\n        self.ensure_dependency(dependency_test)\n\n        # [L234] 3.7 Mask Designer (Sport 02.jpg) > Adjust keyframe in simple timeline\n        # with uuid(\"ee9c8e69-b7c6-4288-956e-8074c75500d7\") as case:\n\n        with step('[Action] Add 1st rotation keyframe on (00:25)'):\n            # Add 1st rotation keyframe on (00:00:00:25)\n            mask_designer_page.simple_timeline.rotation.add_keyframe()\n\n        with step('[Action] Fold Path tab and switch to Mask tab'):\n            # Fold Path tab\n            mask_designer_page.motion.open_path_tag(open=0)\n            # Switch to Mask tab\n            mask_designer_page.switch_to_mask()\n\n        with step('[Action] Add 2nd rotation keyframe on (00:02:20)'):\n            # Drag Properties scroll bar to down (1)\n            mask_designer_page.drag_Mask_Settings_Scroll_Bar(1)\n            # Set designer timecode (00:00:02:20)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_02_20')\n            # Set Rotation degree = 75 (2nd keyframe)\n            mask_designer_page.object_settings.set_rotation('75')\n\n        with step('[Verify] Check rotation value on 2nd rotation keyframe'):\n            # Verify Step:\n            rotation_value = mask_designer_page.object_settings.get_rotation_value()\n            if rotation_value != '75':\n                assert False, f\"Rotation value is not correct! Expected: 75, Actual: {rotation_value}\"\n\n        with step('[Action] Switch to previous rotation keyframe on (00:25)'):\n            # Rotation : Click previous keyframe\n            mask_designer_page.simple_timeline.rotation.click_previous_keyframe()\n\n        with step('[Verify] Check timecode on 1st rotation keyframe'):\n            # Verify Step:\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:00:25':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:25, Actual: {current_timecode}\"\n\n        with step('[Verify] Check Rotation value on 1st rotation keyframe'):\n            rotation_value = mask_designer_page.object_settings.get_rotation_value()\n            if rotation_value != '0':\n                assert False, f\"Rotation value is not correct! Expected: 0, Actual: {rotation_value}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_13",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode",
            "path_template"
        ],
        "marked_name": "[test_mask_designer_func_10_13] Default Position keyframe from Path template",
        "description": [
            "1. Switch to default 1st Position keyframe (Added by Path template)",
            "2. Check timecode on 1st Position keyframe",
            "3. Switch to default 2nd Position keyframe (Added by Path template)",
            "4. Check timecode on 2nd Position keyframe",
            "5. Check Preview as GT at (05:00)"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.path_template\n    @pytest.mark.name('[test_mask_designer_func_10_13] Default Position keyframe from Path template')\n    def test_mask_designer_func_10_13(self):\n    '''\n        1. Switch to default 1st Position keyframe (Added by Path template)\n        2. Check timecode on 1st Position keyframe\n        3. Switch to default 2nd Position keyframe (Added by Path template)\n        4. Check timecode on 2nd Position keyframe\n        5. Check Preview as GT at (05:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to default 1st Position keyframe (Added by Path template)'):\n            # Position : Click previous keyframe\n            mask_designer_page.simple_timeline.position.click_previous_keyframe()\n\n        with step('[Verify] Check timecode on 1st Position keyframe'):\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}\"\n\n        with step('[Action] Switch to default 2nd Position keyframe (Added by Path template)'):\n            # Position : Click next keyframe\n            mask_designer_page.simple_timeline.position.click_next_keyframe()\n\n        with step('[Verify] Check timecode on 2nd Position keyframe'):\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:05:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}\"\n        \n        with step('[Verify] Check Preview as GT at (05:00)'):\n            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L234.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L234.png', current_preview)\n            if not check_preview:\n                assert False, \"Preview is not correct as GT(L234.png)! Similary should>0.95\""
    },
    {
        "name": "test_mask_designer_func_10_14",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties"
        ],
        "marked_name": "[test_mask_designer_func_10_14] Adjust Feather radius by textbox",
        "description": [
            "1. Adjust Feather radius by textbox = 5",
            "2. Check Feather radius value is 5",
            "3. Check preview is changed after adjust Feather radius"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.name('[test_mask_designer_func_10_14] Adjust Feather radius by textbox')\n    def test_mask_designer_func_10_14(self):\n    '''\n        1. Adjust Feather radius by textbox = 5\n        2. Check Feather radius value is 5\n        3. Check preview is changed after adjust Feather radius\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_13\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Initial] Remove custom text mask'):\n            # Drag Properties scroll bar to top (0)\n            mask_designer_page.drag_Mask_Settings_Scroll_Bar(0)\n            # Remove custom mask (Title mask)\n            mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)\n\n        # [L227] 3.7 Mask Designer (Sport 02.jpg) > feather radius\n        # with uuid(\"84117991-9ca4-43e0-a942-1dcb13a1bd6a\") as case:\n\n        with step('[Action] Adjust Feather radius by textbox'):\n            before_feather_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            mask_designer_page.Edit_MaskDesigner_Feather_radius_InputValue('5')\n        \n        with step('[Verify] Check Feather radius value is 5'):\n            # Verify Step\n            check_value = main_page.exist(L.mask_designer.mask_property.feather_slider).AXValue\n            if check_value != 5:\n                assert False, f\"Feather radius value is not correct! Expected: 5, Actual: {check_value}\"\n\n        with step('[Verify] Check preview is changed after adjust Feather radius'):\n            applied_feather_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            if main_page.compare(before_feather_preview, applied_feather_preview, similarity=0.98):\n                assert False, \"Preview is not changed after adjust Feather radius! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_15",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode",
            "ease_in_out"
        ],
        "marked_name": "[test_mask_designer_func_10_15] Apply Ease In on 2nd Rotation keyframe",
        "description": [
            "1. Switch to 2nd Rotation keyframe (00:02:20)",
            "2. Set ease in value = 0.94",
            "3. Check preview is changed after apply Ease In"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.ease_in_out\n    @pytest.mark.name('[test_mask_designer_func_10_15] Apply Ease In on 2nd Rotation keyframe')\n    def test_mask_designer_func_10_15(self):\n    '''\n        1. Switch to 2nd Rotation keyframe (00:02:20)\n        2. Set ease in value = 0.94\n        3. Check preview is changed after apply Ease In\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_14\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L229] 3.7 Mask Designer (Sport 02.jpg) > Set in [Object Settings] > Adjust ease in / ease out\n        # with uuid(\"36403805-ed5c-4f70-91e5-1d2fa25e3049\") as case:\n        with step('[Action] Switch to 2nd Rotation keyframe (00:02:20)'):\n            # Set designer timecode (00:00:02:10)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_02_10')\n            no_ease_in_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # Drag scroll bar to down\n            mask_designer_page.drag_Mask_Settings_Scroll_Bar(1)\n            # [Object setting] left panel: Click Rotation next keyframe to timecode (00:00:02:20)\n            mask_designer_page.object_settings.rotation.click_next_keyframe()\n\n        with step('[Action] Set ease in value = 0.94'):\n            # Set ease in & ease in value = 0.94\n            mask_designer_page.object_settings.rotation.ease_in.set_checkbox(value=True)\n            mask_designer_page.object_settings.rotation.ease_in.set_value('0.94')\n        \n        with step('[Verify] Check preview is changed after apply Ease In'):\n            # Set designer timecode (00:00:02:10)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_02_10')\n            apply_ease_in_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n\n            # Similarity should less than 0.98, check_ease_out should be False\n            check_ease_in = main_page.compare(no_ease_in_preview, apply_ease_in_preview, similarity=0.98)\n            if check_ease_in:\n                assert False, \"Preview is not changed after apply Ease In! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_16",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode",
            "ease_in_out"
        ],
        "marked_name": "[test_mask_designer_func_10_16] Apply Ease out on 1st Rotation keyframe",
        "description": [
            "1. Switch to 1st Rotation keyframe (00:00:00:25)",
            "2. Set ease out value = 0.89",
            "3. Check preview is changed after apply Ease Out"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.ease_in_out\n    @pytest.mark.name('[test_mask_designer_func_10_16] Apply Ease out on 1st Rotation keyframe')\n    def test_mask_designer_func_10_16(self):\n    '''\n        1. Switch to 1st Rotation keyframe (00:00:00:25)\n        2. Set ease out value = 0.89\n        3. Check preview is changed after apply Ease Out\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_15\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to 1st Rotation keyframe (00:00:00:25)'):\n            # Set designer timecode (00:00:00:29)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_00_29')\n            no_ease_out_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # [Object setting] left panel: Click Rotation previous keyframe to timecode (00:00:00:25)\n            mask_designer_page.object_settings.rotation.click_previous_keyframe()\n\n        with step('[Action] Set ease out value = 0.89'):\n            # Set ease out & ease out value = 0.89\n            mask_designer_page.object_settings.rotation.ease_out.set_checkbox(value=True)\n            mask_designer_page.object_settings.rotation.ease_out.set_value('0.89')\n\n        with step('[Verify] Check preview is changed after apply Ease Out'):\n            # Set designer timecode (00:00:00:29)\n            mask_designer_page.set_MaskDesigner_timecode('00_00_00_29')\n            apply_ease_out_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # Similarity should less than 0.98, check_ease_out should be False\n            check_ease_out = main_page.compare(no_ease_out_preview, apply_ease_out_preview, similarity=0.98)\n            if check_ease_out:\n                assert False, \"Preview is not changed after apply Ease Out! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_17",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_mask_designer_func_10_17] Reset Rotation Keyframe",
        "description": [
            "1. Reset Rotation keyframe",
            "2. Check timecode is not changed after click Previous/ Next keyframe"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_mask_designer_func_10_17] Reset Rotation Keyframe')\n    def test_mask_designer_func_10_17(self):\n    '''\n        1. Reset Rotation keyframe\n        2. Check timecode is not changed after click Previous/ Next keyframe\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_16\"\n        self.ensure_dependency(dependency_test)\n\n        # [L228] 3.7 Mask Designer (Sport 02.jpg) > Set in [Object Settings] > Adjust keyframe\n        # with uuid(\"1912a860-16dd-4c0f-9d4f-a91a54b5117c\") as case:\n\n        with step('[Action] Reset Rotation Keyframe'):\n            # Rotation: Reset all rotation keyframe\n            check_reset_btn = mask_designer_page.object_settings.rotation.click_reset_keyframe()\n            if not check_reset_btn:\n                assert False, \"Cannot reset all rotation keyframe!\"\n\n        with step('[Verify] Check timecode is not changed after click Previous/ Next keyframe'):\n            # Rotation: Get next keyframe status (False)\n            mask_designer_page.object_settings.rotation.click_next_keyframe()\n            current_time = mask_designer_page.get_timecode()\n            if current_time != '00:00:00:29':\n                assert False, f\"Timecode is not correct if click next rotation keyframe after reset! Expected: 00:00:00:29, Actual: {current_time}\"\n\n            mask_designer_page.object_settings.rotation.click_previous_keyframe()\n            current_time = mask_designer_page.get_timecode()\n            if current_time != '00:00:00:29':\n                assert False, f\"Timecode is not correct if click previous rotation keyframe after reset! Expected: 00:00:00:29, Actual: {current_time}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_18",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "object_settings",
            "keyframe",
            "timecode"
        ],
        "marked_name": "[test_mask_designer_func_10_18] Next Position Keyframe on last keyframe",
        "description": [
            "1. Switch to last (2nd) Position Keyframe",
            "2. Click Next Position Keyframe",
            "3. Check timecode is not changed after click Next Position Keyframe"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.object_settings\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_mask_designer_func_10_18] Next Position Keyframe on last keyframe')\n    def test_mask_designer_func_10_18(self):\n    '''\n        1. Switch to last (2nd) Position Keyframe\n        2. Click Next Position Keyframe\n        3. Check timecode is not changed after click Next Position Keyframe\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Switch to last (2nd) Position Keyframe'):\n            # Drag scroll bar to upper\n            mask_designer_page.drag_Mask_Settings_Scroll_Bar(0.655)\n            # Position: Click next keyframe to timecode (00:00:05:00)\n            mask_designer_page.object_settings.position.click_next_keyframe()\n\n        with step('[Verify] Check timecode is correct on 2nd Position keyframe'):\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:05:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}\"\n\n        with step('[Action] Click Next Position Keyframe'):\n            # Position: Get next keyframe status (False)\n            check_pos_next_keyframe = mask_designer_page.object_settings.position.click_next_keyframe()\n            if check_pos_next_keyframe:\n                assert False, \"Able to click next position keyframe even it is the last keyframe!\"\n        \n        with step('[Verify] Check timecode is not changed after click Next Position Keyframe'):\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:05:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_19",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "motion",
            "path",
            "play_video"
        ],
        "marked_name": "[test_mask_designer_func_10_19] Play Video",
        "description": [
            "1. Play the video and check if preview is changed"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.motion\n    @pytest.mark.path\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_mask_designer_func_10_19] Play Video')\n    def test_mask_designer_func_10_19(self):\n    '''\n        1. Play the video and check if preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L235] 3.7 Mask Designer (Sport 02.jpg) > Check preview\n        # with uuid(\"566f1b44-0467-4ba1-ba9c-32c908bd5d9d\") as case:\n\n        with step('[Action] Plat the video'):\n            mask_designer_page.set_MaskDesigner_timecode('00_00_00_00')\n            # Click [Play] button to check preview different\n            mask_designer_page.Edit_MaskDesigner_PreviewOperation('Play')\n        \n        with step('[Verify] Check preview is changed after play the video'):\n            check_preview_update = main_page.Check_PreviewWindow_is_different(L.mask_designer.preview_window, sec=3)\n            assert check_preview_update, \"Preview is not changed after play the video!\""
    },
    {
        "name": "test_mask_designer_func_10_20",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "motion",
            "path",
            "play_video"
        ],
        "marked_name": "[test_mask_designer_func_10_20] Stop Video",
        "description": [
            "1. Stop the video and check timecode at (00:00:00:00)"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.motion\n    @pytest.mark.path\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_mask_designer_func_10_20] Stop Video')\n    def test_mask_designer_func_10_20(self):\n    '''\n        1. Stop the video and check timecode at (00:00:00:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Stop the video'):\n            # Click [Stop]\n            mask_designer_page.Edit_MaskDesigner_PreviewOperation('Stop')\n\n        with step('[Verify] Check timecode at (00:00:00:00)'):\n            current_timecode = mask_designer_page.get_timecode()\n            if current_timecode != '00:00:00:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_21",
        "tags": [
            "mask_designer_func",
            "mask_designer"
        ],
        "marked_name": "[test_mask_designer_func_10_21] Check Preview is as GT from test_mask_designer_func_10_9~20",
        "description": [
            "1. Check Preview is as GT from test_mask_designer_func_10_9~20"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.name('[test_mask_designer_func_10_21] Check Preview is as GT from test_mask_designer_func_10_9~20')\n    def test_mask_designer_func_10_21(self):\n    '''\n        1. Check Preview is as GT from test_mask_designer_func_10_9~20\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_20\"\n        self.ensure_dependency(dependency_test)\n        \n        with step('[Verify] Check Preview is as GT from test_mask_designer_func_10_9~20'):\n            # check preview\n            mask_designer_page.set_MaskDesigner_timecode('00_00_03_03')\n\n            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L235.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L235.png', current_preview)\n            assert check_preview, \"Preview is not correct as GT(L235.png)! Similary should>0.95\""
    },
    {
        "name": "test_mask_designer_func_10_22",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "brush_mask",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_22] Brush Mask Designer -- Paint Mask w/ [Manual Brush] tool",
        "description": [
            "1. Enter [Paint Mask]",
            "2. Draw canvas w/ brush tool",
            "3. Check preview is changed after draw canvas w/ brush tool"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.brush_mask\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_22] Brush Mask Designer -- Paint Mask w/ [Manual Brush] tool')\n    def test_mask_designer_func_10_22(self):\n    '''\n        1. Enter [Paint Mask]\n        2. Draw canvas w/ brush tool\n        3. Check preview is changed after draw canvas w/ brush tool\n        '''\n# Ensure the dependency test is run and passed\n        self.test_mask_designer_func_10_1()\n\n        # [L224] 3.7 Mask Designer (Sport 02.jpg) > Create Brush Mask\n        # with uuid(\"60a044e9-e3b9-43c1-9cf4-58e937d2f0be\") as case:\n        with step('[Action] Enter [Paint Mask]'):\n            mask_designer_page.switch_to_mask()\n\n            # Click [Paint Mask]\n            mask_designer_page.click_create_brush_mask_btn()\n            check_enter = mask_designer_page.is_enter_brush_mask_designer()\n\n            if not check_enter:\n                assert False, \"No Enter Brush Mask Designer window after click [Create Brush Mask]!\"\n\n        with step('[Action] Draw canvas w/ [Manual Brush] tool'):\n            before_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)\n            # Set tool width = 73\n            mask_designer_page.brush_mask.width.set_value('73')\n            # Draw canvas w/ brush tool\n            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_left()\n            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_right()\n            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_middle()\n\n        with step('[Verify] Check preview is changed after draw canvas w/ brush tool'):\n            apply_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)\n            # Verify step (after used round tool)\n            check_update = main_page.compare(before_brush_preview, apply_brush_preview)\n            if not check_update:\n                assert False, \"Preview is not changed after draw canvas w/ brush tool! Similary should<0.95\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_23",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "brush_mask",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_23] Brush Mask Designer -- Paint Mask w/ [Smart Brush] tool",
        "description": [
            "1. Reset Mask Designer",
            "2. Draw canvas w/ [Smart Brush] tool",
            "3. Check preview is changed after draw canvas w/ [smart brush] tool"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.brush_mask\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_23] Brush Mask Designer -- Paint Mask w/ [Smart Brush] tool')\n    def test_mask_designer_func_10_23(self):\n    '''\n        1. Reset Mask Designer\n        2. Draw canvas w/ [Smart Brush] tool\n        3. Check preview is changed after draw canvas w/ [smart brush] tool\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_22\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Initial] Reset Mask Designer'):\n            # Click reset button\n            mask_designer_page.brush_mask.click_reset()\n            main_page.click(L.main.confirm_dialog.btn_ok)\n\n        with step('[Action] Draw canvas w/ [Smart Brush] tool'):\n            before_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)\n            # Change tool to (Add to selection)\n            mask_designer_page.brush_mask.tools.set_smart_brush()\n            # Set tool width = 22\n            mask_designer_page.brush_mask.width.set_value('22')\n            # Draw canvas w/ brush tool\n            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_left()\n            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_middle()\n        \n        with step('[Verify] Check preview is changed after draw canvas w/ [smart brush] tool'):\n            apply_smart_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)\n            # Verify step (after used smart tool)\n            check_smart = main_page.compare(apply_smart_preview, before_brush_preview)\n            if not check_smart:\n                assert False, \"Preview is not changed after draw canvas w/ smart brush tool! Similary should<0.95\"\n        \n        with step('[Initial] Leave and Remove custom mask'):\n            # Click OK button\n            mask_designer_page.brush_mask.click_ok_btn()\n            check_remove_custom = mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)\n            if not check_remove_custom:\n                assert False, \"Cannot remove custom mask!\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_24",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "selection_mask",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_24] Selection Mask -- Draw canvas w/ triangle",
        "description": [
            "1. Enter [Selection Mask]",
            "2. Draw canvas w/ triangle",
            "3. Check preview is changed after draw canvas w/ triangle"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.selection_mask\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_24] Selection Mask -- Draw canvas w/ triangle')\n    def test_mask_designer_func_10_24(self):\n    '''\n        1. Enter [Selection Mask]\n        2. Draw canvas w/ triangle\n        3. Check preview is changed after draw canvas w/ triangle\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_23\"\n        self.ensure_dependency(dependency_test)\n\n        # [L225] 3.7 Mask Designer (Sport 02.jpg) > Create Selection Mask\n        # with uuid(\"bdcee9e2-2f36-4b79-9444-fb6ad8484ebb\") as case:\n\n        with step('[Action] Enter [Selection Mask]'):\n            # Click [Selection mask]\n            mask_designer_page.click_create_selection_mask_btn()\n\n        with step('[Action] Draw canvas w/ triangle'):\n            # Draw mask\n            mask_designer_page.draw_triangle_on_canvas(angle=5)\n\n        with step('[Verify] Check preview is changed after draw canvas w/ triangle'):\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L225.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L225.png', current_preview, similarity=0.8)\n            assert check_preview, \"Preview is not correct as GT(L225.png)! Similary should>0.8\""
    },
    {
        "name": "test_mask_designer_func_10_25",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "mask",
            "mask_properties",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_25] Resize mask on canva",
        "description": [
            "1. Apply template 14",
            "2. Resize mask on canva",
            "3. Check preview changed after resize mask on canva"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.mask\n    @pytest.mark.mask_properties\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_25] Resize mask on canva')\n    def test_mask_designer_func_10_25(self):\n    '''\n        1. Apply template 14\n        2. Resize mask on canva\n        3. Check preview changed after resize mask on canva\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_24\"\n        self.ensure_dependency(dependency_test)\n\n        # [L231] 3.7 Mask Designer (Sport 02.jpg) > Manual adjust on canvas > Resize\n        # with uuid(\"e8a7cdf0-52b7-4353-9cf0-5a9d85c88406\") as case:\n\n        with step('[Action] Apply Template 14'):\n            mask_designer_page.set_MaskDesigner_timecode('00_00_01_26')\n            # Apply template\n            mask_designer_page.MaskDesigner_Apply_template(14)\n\n        with step('[Action] Resize mask on canva'):\n            inital_apply_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            # resize\n            mask_designer_page.adjust_object_on_canvas_resize(x=35, y=30)\n\n        with step('[Verify] Check preview changed after resize mask on canva'):\n            after_resize_preview = main_page.snapshot(locator=L.mask_designer.preview_window)\n            check_preview = main_page.compare(inital_apply_preview, after_resize_preview, similarity=0.965)\n            if check_preview:\n                assert False, \"Preview is not changed after resize mask on canva! Similary should<0.965\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_26",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "cyberlink_cloud",
            "dz",
            "save_template",
            "shared_template"
        ],
        "marked_name": "[test_mask_designer_func_10_26] Share Template to Cloud",
        "description": [
            "1. Share Template to cloud",
            "2. Check window title after upload template to cloud"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.dz\n    @pytest.mark.save_template\n    @pytest.mark.shared_template\n    @pytest.mark.name('[test_mask_designer_func_10_26] Share Template to Cloud')\n    def test_mask_designer_func_10_26(self):\n    '''\n        1. Share Template to cloud\n        2. Check window title after upload template to cloud\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_25\"\n        self.ensure_dependency(dependency_test)\n\n        # [L236] 3.7 Mask Designer (Sport 02.jpg) > [Share] template online\n        # with uuid(\"346b278c-7aa6-4d43-a4b3-c0da5abc1b53\") as case:\n\n        with step('[Action] Share Template to cloud'):\n            # Apply template\n            check_upload = mask_designer_page.share_to_cloud(name='mask_custom', tags='123', collection='test', description='move mask', verify_dz_link=1)\n            if not check_upload:\n                assert False, \"Cannot upload template to cloud!\"\n\n        with step('[Verify] Check window title after upload template to cloud'):\n            # Verify step: check title\n            check_title = main_page.exist(L.mask_designer.mask_designer_window)\n            if check_title.AXTitle != 'Mask Designer  |  mask_custom':\n                assert False, f\"Title is not correct after upload template to cloud! Expected: Mask Designer  |  mask_custom, Actual: {check_title.AXTitle}\"\n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_27",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "pip_room",
            "cyberlink_cloud",
            "dz",
            "save_template",
            "shared_template"
        ],
        "marked_name": "[test_mask_designer_func_10_27] Download Shared Template from CL/DZ",
        "description": [
            "1. Save Custom Mask Template for test_mask_designer_func_10_28",
            "2. Download Shared template from CL/DZ",
            "3. Remove Shared template"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.pip_room\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.dz\n    @pytest.mark.save_template\n    @pytest.mark.shared_template\n    @pytest.mark.name('[test_mask_designer_func_10_27] Download Shared Template from CL/DZ')\n    def test_mask_designer_func_10_27(self):\n    '''\n        1. Save Custom Mask Template for test_mask_designer_func_10_28\n        2. Download Shared template from CL/DZ\n        3. Remove Shared template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_26\"\n        self.ensure_dependency(dependency_test)\n\n\n        with step('[Action] Save Custom Mask Template for test_mask_designer_func_10_28'):\n            # Click [Save as] > Save custom name then close Mask designer\n            mask_designer_page.Edit_MaskDesigner_ClickSaveAs()\n            mask_designer_page.save_as.input_name('BFT_mask_template')\n\n        with step('[Action] Back to Pip Room'):\n            mask_designer_page.save_as.click_ok()\n            mask_designer_page.Edit_MaskDesigner_ClickOK()\n            # Enter Pip Room\n            main_page.enter_room(4)\n\n        with step('[Action] Download Shared template from CL/DZ'):\n            # Click download content form CL/DZ\n            pip_room_page.click_DownloadContent_from_DZCL()\n            # Already enter \"Download PiP Objects\" > Open My Cyberlink Cloud\n            # Select template name \"dialog09_chroma\"\n            check_CL_content = download_from_cl_dz_page.select_template('mask_custom')\n            if not check_CL_content:\n                assert False, \"Cannot find the shared template from CL/DZ!\"\n\n        with step('[Initial] Remove Shared template'):\n            download_from_cl_dz_page.tap_delete_button()\n            # Close \"Download PiP Objects\" window\n            # download_from_cl_dz_page.tap_close_button()\n            main_page.press_esc_key()\n        \n        assert True"
    },
    {
        "name": "test_mask_designer_func_10_28",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "pip_room",
            "save_template",
            "canva"
        ],
        "marked_name": "[test_mask_designer_func_10_28] Check Saved Custom Mask Template Preview in Main Program",
        "description": [
            "1. Click [Custom] Category",
            "2. Check Custom Mask Template is saved",
            "3. Check can preview the custom mask template"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.pip_room\n    @pytest.mark.save_template\n    @pytest.mark.canva\n    @pytest.mark.name('[test_mask_designer_func_10_28] Check Saved Custom Mask Template Preview in Main Program')\n    def test_mask_designer_func_10_28(self):\n    '''\n        1. Click [Custom] Category\n        2. Check Custom Mask Template is saved\n        3. Check can preview the custom mask template\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_27\"\n        self.ensure_dependency(dependency_test)\n\n        # [L237] 3.7 Mask Designer (Sport 02.jpg) > [OK] / [Save As] template\n        # with uuid(\"c07c3fd9-1aca-4e3e-931e-bf159193b7a3\") as case:\n\n        with step('[Action] Click [Custom] Category in [Pip Room]'):\n            # Pip Room > Enter custom category\n            main_page.select_LibraryRoom_category('Custom')\n\n        with step('[Verify] Check Custom Mask Template is saved'):\n            # Verify step: custom preview normally\n            main_page.select_library_icon_view_media('BFT_mask_template')\n\n        with step('[Verify] Check can preview the custom mask template'):\n            check_preview_update = main_page.Check_PreviewWindow_is_different(sec=2)\n            assert check_preview_update, \"Preview is not changed after play the video!\""
    },
    {
        "name": "test_mask_designer_func_10_29",
        "tags": [
            "mask_designer_func",
            "mask_designer",
            "pip_room",
            "save_template",
            "timeline",
            "save_project"
        ],
        "marked_name": "[test_mask_designer_func_10_29] Add Saved Custom Mask Template to timeline",
        "description": [
            "1. Add Custom Mask Template to timeline",
            "2. Check Preview is as GT"
        ],
        "full_code": "@pytest.mark.mask_designer_func\n    @pytest.mark.mask_designer\n    @pytest.mark.pip_room\n    @pytest.mark.save_template\n    @pytest.mark.timeline\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_mask_designer_func_10_29] Add Saved Custom Mask Template to timeline')\n    def test_mask_designer_func_10_29(self):\n    '''\n        1. Add Custom Mask Template to timeline\n        2. Check Preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_mask_designer_func_10_28\"\n        self.ensure_dependency(dependency_test)\n\n        # [L238] 3.7 Mask Designer (Sport 02.jpg) > Add mask template to timeline\n        # with uuid(\"7b75d53d-25d6-4cd5-be71-dc622abf75bc\") as case:\n\n        with step('[Action] Add Custom Mask Template to timeline'):\n            # Select timeline track 3\n            main_page.timeline_select_track(3)\n            # Set timeline timecode = (00:00:26:07)\n            main_page.set_timeline_timecode('00_00_26_07')\n\n        with step('[Verify] Check Preview is as GT'):\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L238.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L238.png', current_preview)\n            if not check_preview:\n                assert False, \"Preview is not correct as GT(L238.png)! Similary should>0.95\"\n\n        with step('[Action] Save project'):\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_mask_designer_func_10_29',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        assert True"
    },
    {
        "name": "test_stock_media_func_11_1",
        "tags": [
            "stock_media_func",
            "launch",
            "particle_room",
            "search_library"
        ],
        "marked_name": "[test_stock_media_func_11_1] Search \"\\\" in Particle Room",
        "description": [
            "1. Launch APP and enter particle room",
            "2. Search IAD > Input \"\\\" character",
            "3. Check No results for \"\\\" character"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.launch\n    @pytest.mark.particle_room\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_stock_media_func_11_1] Search \"\\\" in Particle Room')\n    def test_stock_media_func_11_1(self):\n    '''\n        1. Launch APP and enter particle room\n        2. Search IAD > Input \"\\\" character\n        3. Check No results for \"\\\" character\n        '''\n# launch APP\n        with step('[Action] Launch APP and Enter Particle Room'):\n            if not main_page.start_app() or not main_page.is_app_exist():\n                assert False, \"Launch APP failed!\"\n            # enter particle room\n            main_page.enter_room(5)\n\n        # [L210] 2.3 Particle Room > Search IAD > Input \"\\\" character\n        # with uuid(\"ba950f65-6338-457d-b7f8-4ee7aa3178c8\") as case:\n\n        with step('[Action] Search IAD > Input \"\\\" character'):\n            media_room_page.search_library('\\\\')\n\n        with step('[Verify] Check No results for \"\\\" character'):\n            # Can find the object of (No results for \"\\\")\n            assert main_page.is_exist(L.media_room.txt_no_results_for_backslash), \"Found results for '\\' character incorrectly in particle room!\""
    },
    {
        "name": "test_stock_media_func_11_2",
        "tags": [
            "stock_media_func",
            "media_room",
            "stock_media"
        ],
        "marked_name": "[test_stock_media_func_11_2] Open [Stock Media] window in Media Room",
        "description": [
            "1. Enter media room",
            "2. Click Stock Media button",
            "3. Check Stock Media window is opened"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.media_room\n    @pytest.mark.stock_media\n    @pytest.mark.name('[test_stock_media_func_11_2] Open [Stock Media] window in Media Room')\n    def test_stock_media_func_11_2(self):\n    '''\n        1. Enter media room\n        2. Click Stock Media button\n        3. Check Stock Media window is opened\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_1\"\n        if not self.ensure_dependency(dependency_test, run_dependency=False):\n            # launch APP\n            with step('[Initial] Launch APP'):\n                if not main_page.start_app() or not main_page.is_app_exist():\n                    assert False, \"Launch APP failed!\"\n\n        # [L119] 2.1 Media Room > Media Content > Import > click \"Stock Media\" button\n        # with uuid(\"5edec452-198e-47b8-a0aa-c769b4fa8f5d\") as case:\n        with step('[Action] Click \"Stock Media\" button in Media Room'):\n            # enter Media room\n            main_page.enter_room(0)\n            # click Stock Media button\n            main_page.click(L.media_room.btn_stock_media)\n            # time.sleep(DELAY_TIME * 10)\n        \n        with step('[Verify] Check Stock Media window is opened'):\n            # verify step: should pop up Getty Image\n            assert main_page.is_exist(L.download_from_shutterstock.window, timeout=15), \"Stock Media window is not opened!\""
    },
    {
        "name": "test_stock_media_func_11_3",
        "tags": [
            "stock_media_func",
            "stock_media"
        ],
        "marked_name": "test_stock_media_func_11_3",
        "description": [
            "1. Check No popup \"what's is premium media\" dialog"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.name('[test_stock_media_func_11_3] Check No popup \"what\\'s is premium media\" dialog')\n    def test_stock_media_func_11_3(self):\n    '''\n        1. Check No popup \"what's is premium media\" dialog\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L120] 2.1 Media Room > Media Content > Import > continue above case\n        # with uuid(\"1cccbe9e-ebf5-40d8-a936-a08529baec5e\") as case:\n            # Verify 1: No popup \"what's is premium media\" dialog\n        with step('[Verify] Check No popup \"what\\'s is premium media\" dialog'):\n            verify_1 = main_page.is_not_exist(L.gettyimage.what_is_stock_media_dialog)\n            assert verify_1, \"Popup \\\"what's is premium media\\\" dialog incorrectly! Should not popup!\""
    },
    {
        "name": "test_stock_media_func_11_4",
        "tags": [
            "stock_media_func",
            "stock_media"
        ],
        "marked_name": "[test_stock_media_func_11_4] Check Premium content shows up by icon size",
        "description": [
            "1. Check Premium content shows up by icon size"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.name('[test_stock_media_func_11_4] Check Premium content shows up by icon size')\n    def test_stock_media_func_11_4(self):\n    '''\n        1. Check Premium content shows up by icon size\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_3\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check Premium content shows up by icon size'):\n            # show premium content\n            premium_icon = main_page.exist(L.gettyimage.video.thumbnail_icon.img_premium)\n            icon_size = premium_icon.AXSize\n\n            assert icon_size[0] == 24, f\"Premium icon size is not correct! Expected: 24, Actual: {icon_size[0]}\""
    },
    {
        "name": "test_stock_media_func_11_5",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_5] Search and Filter content in Getty Image",
        "description": [
            "1. Search keyword: child one two flower car",
            "2. Click Filter button",
            "3. Check preview as GT"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_5] Search and Filter content in Getty Image')\n    def test_stock_media_func_11_5(self):\n    '''\n        1. Search keyword: child one two flower car\n        2. Click Filter button\n        3. Check preview as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_4\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Search keyword: child one two flower car'):\n            # # wait for GI all pages load ready\n            # time.sleep(DELAY_TIME * 6)\n            # input search keyword: child one two flower car\n            download_from_ss_page.search.search_text('child one two flower car')\n            time.sleep(DELAY_TIME * 10)\n        # 2.1 Media Room > Media Content > Import > continue above case > switch to filters view\n\n        with step('[Action] Click Filter button'):\n            getty_image_page.click_filter_button()\n\n        with step('[Verify] Check preview as GT'):\n            # show two video after search keyword (one basic, one premium content)\n            # snapshot GI window: window\n            search_result_preview = main_page.snapshot(locator=L.gettyimage.window,\n                                            file_name=Auto_Ground_Truth_Folder + 'L122_two_thumbnail.png')\n            compare_result = main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png', search_result_preview)\n            assert compare_result, \"Preview is not correct as GT(L122_two_thumbnail.png)! Similary should>0.95\""
    },
    {
        "name": "test_stock_media_func_11_6",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_6] Check default [Download] button is disable",
        "description": [
            "1. Check default [Download] button is disable"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_6] Check default [Download] button is disable')\n    def test_stock_media_func_11_6(self):\n    '''\n        1. Check default [Download] button is disable\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L121] 2.1 Media Room > Media Content > Import > continue above case > try to select content\n        # with uuid(\"fdcf3e37-caee-41a0-8f5b-d22289ca7c4b\") as case:\n        with step('[Verify] Check default [Download] button is disable'):\n            # verify step: default download button is disable\n            verify_step_1 = not download_from_ss_page.is_enabled_download()\n            assert verify_step_1, \"Default download button is enable! Should be disable\""
    },
    {
        "name": "test_stock_media_func_11_7",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_7] [Download] button is enable after select a clip",
        "description": [
            "1. Select a clip",
            "2. Check [Download] button is enable after select a clip"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_7] [Download] button is enable after select a clip')\n    def test_stock_media_func_11_7(self):\n    '''\n        1. Select a clip\n        2. Check [Download] button is enable after select a clip\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Select a clip'):\n            # single select one object\n            download_from_ss_page.video.select_clip(1)\n\n        with step('[Verify] Check [Download] button is enable after select a clip'):\n            # verify step: default download button is enable\n            verify_step_2 = download_from_ss_page.is_enabled_download()\n            assert verify_step_2, \"Download button is disable after select a clip! Should be enable\""
    },
    {
        "name": "test_stock_media_func_11_8",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_8] Filter [Basic] content",
        "description": [
            "1. Filter [Basic] content",
            "2. Check preview as GT"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_8] Filter [Basic] content')\n    def test_stock_media_func_11_8(self):\n    '''\n        1. Filter [Basic] content\n        2. Check preview as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L122] 2.1 Media Room > Media Content > Import > continue above case > switch to filters view\n        # with uuid(\"f9b6814a-0aa1-4386-a66b-5d7090ff377d\") as case:\n        with step('[Action] Filter [Basic] content'):\n            # snapshot for test_stock_media_func_11_10()\n            all_content_result = main_page.snapshot(locator=L.gettyimage.window,\n                                           file_name=Auto_Ground_Truth_Folder + 'L122_all_content.png')\n            # Filter > click [Basic]\n            getty_image_page.filter.set_collection_type(1)\n\n        with step('[Verify] Check preview as GT'):\n            search_result_basic = main_page.snapshot(locator=L.gettyimage.window,\n                                           file_name=Auto_Ground_Truth_Folder + 'L122_basic.png')\n            compare_basic_result_same = main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png', search_result_basic, similarity=0.85)\n            # [2025-01-06] Change similirity to 0.96 (from 1) --> search result is different\n            compare_basic_result_different = not main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png',search_result_basic, similarity=0.96)\n\n            assert compare_basic_result_same and compare_basic_result_different,\\\n                \"Preview is not correct as GT(L122_basic.png)! Similary should >0.85 and <0.96\""
    },
    {
        "name": "test_stock_media_func_11_9",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_9] Filter [Premium] content",
        "description": [
            "1. Filter [Premium] content",
            "2. Check preview as GT"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_9] Filter [Premium] content')\n    def test_stock_media_func_11_9(self):\n    '''\n        1. Filter [Premium] content\n        2. Check preview as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_8\"\n        self.ensure_dependency(dependency_test)\n        \n        with step('[Action] Filter [Premium] content'):\n            # Filter > click [Premium]\n            getty_image_page.filter.set_collection_type(2)\n\n        with step('[Verify] Check preview as GT'):\n            # Verify step: basic result  vs premium result\n            #              0.96 % < similarity < 0.9985 %\n            search_result_premium = main_page.snapshot(locator=L.gettyimage.window,\n                                           file_name=Auto_Ground_Truth_Folder + 'L122_premium.png')\n            check_premium_basic = main_page.compare(Auto_Ground_Truth_Folder+'L122_basic.png', search_result_premium, similarity=0.79)\n            check_premium_basic_different = not main_page.compare(Auto_Ground_Truth_Folder+'L122_basic.png', search_result_premium, similarity=0.9985)\n            # case.result = compare_result and compare_basic_result_same and check_premium_basic_different\n\n            # # [L123] 2.1 Media Room > Media Content > Import > continue above case > tick Free\n            # with uuid(\"54f66867-bcf5-4456-a329-99504b9b2c01\") as case:\n            #     case.result = compare_basic_result_same and compare_basic_result_different and check_premium_basic and check_premium_basic_different\n\n            #     # [L124] 2.1 Media Room > Media Content > Import > continue above case > tick Premium\n            #     with uuid(\"e0f1131a-def3-41f8-a528-44eb0248a93f\") as case:\n            #         case.result = check_premium_basic and check_premium_basic_different\n            assert check_premium_basic and check_premium_basic_different,\\\n                \"Preview is not correct as GT(L122_premium.png)! Similary should >0.79 and <0.9985\""
    },
    {
        "name": "test_stock_media_func_11_10",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_10] Check show [Basic]/ [Premium] content before filter",
        "description": [
            "1. Check show [Basic]/ [Premium] content before filter"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_10] Check show [Basic]/ [Premium] content before filter')\n    def test_stock_media_func_11_10(self):\n    '''\n        1. Check show [Basic]/ [Premium] content before filter\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L125] 2.1 Media Room > Media Content > Import > input keyword to search\n        # with uuid(\"c6e3767d-5a15-43bd-a143-9e88d1b78ae5\") as case:\n        with step('[Verify] Check show [Basic]/ [Premium] content before filter'):\n            compare_basic = not main_page.compare(Auto_Ground_Truth_Folder + 'L122_all_content.png', Auto_Ground_Truth_Folder + 'L122_basic.png')\n            compare_premium = not main_page.compare(Auto_Ground_Truth_Folder + 'L122_all_content.png', Auto_Ground_Truth_Folder + 'L122_premium.png')\n        \n            assert compare_basic and compare_premium, f\"Preview is not changed after set filter! Basic: {compare_basic}, Premium: {compare_premium}, Similary should<0.95\""
    },
    {
        "name": "test_stock_media_func_11_11",
        "tags": [
            "stock_media_func",
            "stock_media",
            "content_pack"
        ],
        "marked_name": "[test_stock_media_func_11_11] Download Photo Content",
        "description": [
            "1. Clear Search and Filter",
            "2. Switch to [Photo] tab",
            "3. Download content",
            "4. Switch to [Video] tab and Close GettyImage Window",
            "5. Check preview as GT"
        ],
        "full_code": "@pytest.mark.stock_media_func\n    @pytest.mark.stock_media\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_stock_media_func_11_11] Download Photo Content')\n    def test_stock_media_func_11_11(self):\n    '''\n        1. Clear Search and Filter\n        2. Switch to [Photo] tab\n        3. Download content\n        4. Switch to [Video] tab and Close GettyImage Window\n        5. Check preview as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_stock_media_func_11_10\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L126] 2.1 Media Room > Media Content > Import > Download\n        # with uuid(\"873c2b72-df56-41a2-ba29-2eba0c650e09\") as case:\n        with step('[Initial] Clear Search and Filter'):\n            # Clear search\n            download_from_ss_page.search.click_clear()\n            # Filter > click [All]\n            getty_image_page.filter.set_collection_type(0)\n\n        with step('[Action] Switch to [Photo] tab'):\n            # switch to photo\n            download_from_ss_page.switch_to_photo()\n\n        with step('[Action] Download content'):\n            # single select one object > click download\n            download_from_ss_page.photo.select_thumbnail_then_download(2)\n            download_from_ss_page.photo.select_thumbnail_then_download(1)\n\n        with step('[Action] Switch to [Video] tab and Close GettyImage Window'):\n            # switch to video tab\n            download_from_ss_page.switch_to_video()\n            # close GI window\n            download_from_ss_page.click_close()\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check preview as GT'):\n            # Verify step:\n            main_page.select_library_icon_view_media('1281693553')\n            preview_image = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view,\n                                           file_name=Auto_Ground_Truth_Folder + 'L126_preview.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L126_preview.png', preview_image, similarity=0.96)\n            if not check_preview:\n                assert False, \"Preview is not correct as GT(L126_preview.png)! Similary should>0.96\"\n\n        with step('[Initial] Remove downloaded photo'):\n            # remove downloaded photo\n            main_page.select_library_icon_view_media('1281693553')\n            main_page.right_click()\n            main_page.select_right_click_menu('Remove from Disk')\n            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)\n\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_1",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "launch"
        ],
        "marked_name": "[test_video_collage_designer_func_12_1] Open [Video Collage Designer]",
        "description": [
            "1. Launch APP",
            "2. Open [Video Collage Designer]",
            "3. Check Video Collage Designer is opened"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.launch\n    @pytest.mark.name('[test_video_collage_designer_func_12_1] Open [Video Collage Designer]')\n    def test_video_collage_designer_func_12_1(self):\n    '''\n        1. Launch APP\n        2. Open [Video Collage Designer]\n        3. Check Video Collage Designer is opened\n        '''\n# launch APP\n        with step('[Action] Launch APP'):\n            if not main_page.start_app() or not main_page.is_app_exist():\n                assert False, \"Launch APP failed!\"\n\n        # [L240] 3.8 Video Collage Designer > Open [Video Collage Designer]\n        # with uuid(\"ceac8405-fa0b-4210-a0d7-156b65fcdbde\") as case:\n        with step('[Action] Open [Video Collage Designer]'):\n            main_page.top_menu_bar_plugins_video_collage_designer()\n\n        with step('[Verify] Check Video Collage Designer is opened'):\n            main_window = main_page.exist(L.video_collage_designer.main_window)\n            assert main_window, \"Video Collage Designer is not opened!\""
    },
    {
        "name": "test_video_collage_designer_func_12_2",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "import_media"
        ],
        "marked_name": "[test_video_collage_designer_func_12_2] Import Video/ Image to Video Collage Designer and add to section",
        "description": [
            "1. Select Layout 7",
            "2. Import Video to Video Collage Designer",
            "3. Image mountain.mp4 to section 2",
            "4. Import Image to Video Collage Designer",
            "5. Image Sample.png to section 1",
            "6. Check preview as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.import_media\n    @pytest.mark.name('[test_video_collage_designer_func_12_2] Import Video/ Image to Video Collage Designer and add to section')\n    def test_video_collage_designer_func_12_2(self):\n    '''\n        1. Select Layout 7\n        2. Import Video to Video Collage Designer\n        3. Image mountain.mp4 to section 2\n        4. Import Image to Video Collage Designer\n        5. Image Sample.png to section 1\n        6. Check preview as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L242] 3.8 Video Collage Designer > Choose layout (Default)\n        # with uuid(\"b2eeb6d2-27c9-40f3-91eb-21188f760789\") as case:\n        with step('[Action] Select Layout 7'):\n            # Select layout 7\n            video_collage_designer_page.layout.select_layout(7)\n            # [L243] 3.8 Video Collage Designer > Import (Image and Video)\n            # with uuid(\"92df3704-1c50-4a1b-8b26-06bb72b48fb0\") as case:\n        with step('[Action] Import Video to Video Collage Designer'):\n            # Import video to library\n            imported_result = video_collage_designer_page.media.import_media(Test_Material_Folder + 'fix_enhance_20/mountain.mp4')\n            if not imported_result:\n                assert False, f\"Cannot import video to Video Collage Designer! Imported media: {Test_Material_Folder + 'fix_enhance_20/mountain.mp4'}\"\n\n        with step('[Action] Image mountain.mp4 to section 2'):\n            before_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # Image mountain.mp4 to section 2\n            video_collage_designer_page.media.click_auto_fill()\n            added_video_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_preview, added_video_preview):\n                assert False, \"Preview is not changed after add video to section 2! Similary should<0.95\"\n\n        with step('[Action] Import Image to Video Collage Designer'):\n            # Import Image to library\n            import_photo_result = video_collage_designer_page.media.import_media(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')\n            if not import_photo_result:\n                assert False, f\"Cannot import photo to Video Collage Designer! Imported media: {Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png'}\"\n\n        with step('[Action] Image Sample.png to section 1'):\n            # Image Sample.png to section 1\n            video_collage_designer_page.media.select_media('Sample.png')\n            video_collage_designer_page.media.click_auto_fill()\n            added_photo_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(added_video_preview, added_photo_preview):\n                assert False, \"Preview is not changed after add photo to section 1! Similary should<0.95\"\n\n        with step('[Verify] Check preview as GT'):\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window, file_name=Auto_Ground_Truth_Folder + 'L242.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L242.png', current_preview, similarity=0.9)\n            assert check_preview, \"Preview is not correct as GT(L242.png)! Similary should>0.9\""
    },
    {
        "name": "test_video_collage_designer_func_12_3",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "layout",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_3] Video Collage Designer > Layout and Color Board > Preview Check",
        "description": [
            "1. Select Layout 10 and screenshot (locator=L.video_collage_designer.media_library)",
            "2. Check preview is changed after select layout 10",
            "3. Switch to Color Boards by select category (3) and screenshot (locator=L.video_collage_designer.media_library)",
            "4. Check preview is changed after switch to Color Boards",
            "5. Insert Blue Color Board and click auto fill",
            "6. Check preview is changed after insert Blue Color Board",
            "7. Switch to [Video Only] by select category (1)",
            "8. import video ('Skateboard 01.mp4') and click auto fill",
            "9. Check preview (locator=L.video_collage_designer.main_window) as GT (L244.png)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.layout\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_3] Video Collage Designer > Layout and Color Board > Preview Check')\n    def test_video_collage_designer_func_12_3(self):\n    ''' \n        1. Select Layout 10 and screenshot (locator=L.video_collage_designer.media_library)\n        2. Check preview is changed after select layout 10\n        3. Switch to Color Boards by select category (3) and screenshot (locator=L.video_collage_designer.media_library)\n        4. Check preview is changed after switch to Color Boards\n        5. Insert Blue Color Board and click auto fill\n        6. Check preview is changed after insert Blue Color Board\n        7. Switch to [Video Only] by select category (1)\n        8. import video ('Skateboard 01.mp4') and click auto fill\n        9. Check preview (locator=L.video_collage_designer.main_window) as GT (L244.png)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L244] 3.8 Video Collage Designer > Filter options (Video only & color board)\n        # with uuid(\"967c9ed2-79d9-4360-b314-5b7a18582f21\") as case:\n            # Select layout 11 (index=10)\n\n        with step(\"Select Layout 10 and screenshot\"):\n            preview_before = video_collage_designer_page.snapshot(locator=L.video_collage_designer.media_library)\n            video_collage_designer_page.layout.select_layout(10)\n        \n        with step(\"Check preview is changed after select layout 10\"):\n            # Capture current preview\n            layout_10_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.media_library)\n            if main_page.compare(preview_before, layout_10_screenshot, similarity=0.98):\n                assert False, \"Preview did not change after selecting layout 10! Similary should<0.98\"\n\n        with step(\"Switch to Color Boards by select category (3) and screenshot\"):\n            video_collage_designer_page.media.select_category(3)\n            \n\n        with step(\"Check preview is changed after switch to Color Boards\"):\n            color_board_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.media_library)\n            if main_page.compare(layout_10_screenshot, color_board_screenshot, similarity=0.98):\n                assert False, \"Preview did not change after selecting Color Boards! Similary should<0.98\"\n\n        with step(\"Insert Blue Color Board and click auto fill\"):\n            # Insert Blue color board\n            main_page.double_click()\n            time.sleep(DELAY_TIME)\n            video_collage_designer_page.media.click_auto_fill()\n\n        with step(\"Check preview is changed after insert Blue Color Board\"):\n            blue_color_board_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.media_library)\n            if main_page.compare(color_board_screenshot, blue_color_board_screenshot, similarity=0.98):\n                assert False, \"Preview did not change after inserting Blue Color Board! Similary should<0.98\"\n\n        with step(\"Switch to [Video Only] by select category (1)\"):\n            # switch to video only\n            video_collage_designer_page.media.select_category(1)\n\n        with step(\"Import video ('Skateboard 01.mp4') and click auto fill\"):\n            # Skateboard 01.mp4 to section 1\n            video_collage_designer_page.media.select_media('Skateboard 01.mp4')\n            video_collage_designer_page.media.click_auto_fill()\n\n        with step(\"Check preview (locator=L.video_collage_designer.main_window) as GT (L244.png)\"):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L244.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L244.png', current_preview, similarity=0.9)\n\n            # check_update = main_page.compare(all_media_library, color_board_media_library, similarity=0.9)\n            # case.result = (not check_update) and check_preview\n\n            assert check_preview, \"Preview is not correct as GT(L244.png)! Similary should>0.9\"\n\n            # # [L245] 3.8 Video Collage Designer > [Auto Fill] button\n            # with uuid(\"c38ba371-183f-4214-b115-02ba7d4cd789\") as case:\n            #     case.result = check_preview"
    },
    {
        "name": "test_video_collage_designer_func_12_4",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_4] Check Default Border Value is (0)",
        "description": [
            "1. Check Default Border Value is (0)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_4] Check Default Border Value is (0)')\n    def test_video_collage_designer_func_12_4(self):\n    ''' \n        1. Check Default Border Value is (0)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L253] 3.8 Video Collage Designer > Adjust Border > Size\n        # with uuid(\"5f8eeb3f-8323-4025-8701-eba85e26d586\") as case:\n\n        with step('[Verify] Check Default Border Value is (0)'):\n            initial_border_value = video_collage_designer_page.border.get_border_value()\n\n            assert initial_border_value == '0', f\"Default Border Value is not (0)! Expected: 0, Actual: {initial_border_value}\""
    },
    {
        "name": "test_video_collage_designer_func_12_5",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_5] Set Border Value",
        "description": [
            "1. Set Border Value to 16 by Slider",
            "2. Check Border Value is (16)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_5] Set Border Value')\n    def test_video_collage_designer_func_12_5(self):\n    ''' \n        1. Set Border Value to 16 by Slider\n        2. Check Border Value is (16)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_4\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Border Value to 16 by Slider'):\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.border.set_border_slider(16)\n        \n        with step('[Verify] Check Border Value is (16)'):\n            apply_border_value = video_collage_designer_page.border.get_border_value()\n            if apply_border_value != '16':\n                assert False, f\"Border Value is not (16)! Expected: 16, Actual: {apply_border_value}\"\n\n        with step('[Verify] Check preview is changed'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_apply_preview, current_preview, similarity=0.995):\n                assert False, \"Preview did not change after set border value to 16! Similary should<0.995\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_6",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_6] Set Border Color",
        "description": [
            "1. Set Border Color to (C4DE5A)",
            "2. Check Border Color is (C4DE5A)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_6] Set Border Color')\n    def test_video_collage_designer_func_12_6(self):\n    ''' \n        1. Set Border Color to (C4DE5A)\n        2. Check Border Color is (C4DE5A)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L254] 3.8 Video Collage Designer > Adjust Border > Change Color\n        # with uuid(\"e8a29b39-2cbd-4533-9a6c-89c2362c6882\") as case:\n\n        with step('[Action] Set [Border Color] to (C4DE5A)'):\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # Set color to C4DE5A\n            video_collage_designer_page.border.set_border_color('C4DE5A')\n\n        with step('[Verify] Check [Border Color] is (C4DE5A)'):\n            check_color = video_collage_designer_page.border.is_border_color('C4DE5A')\n            if not check_color:\n                assert False, \"Border Color is not (C4DE5A)!\"\n\n        with step('[Verify] Check preview is changed'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_apply_preview, current_preview, similarity=0.995):\n                assert False, \"Preview did not change after set border color to C4DE5A! Similary should<0.995\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_7",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_7] Check Default [Interclip Size] is (10)",
        "description": [
            "1. Check Default [Interclip Size] is (10)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_7] Check Default [Interclip Size] is (10)')\n    def test_video_collage_designer_func_12_7(self):\n    ''' \n        1. Check Default [Interclip Size] is (10)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_6\"\n        self.ensure_dependency(dependency_test)\n\n        # [L255] 3.8 Video Collage Designer > Adjust Border > Interclip size\n        # with uuid(\"5999111f-6785-45be-b1cd-d3ba9b243884\") as case:\n        with step('[Verify] Check Default [Interclip Size] is (10)'):\n            initial_interclip_value = video_collage_designer_page.border.get_interclip_value()\n            # Check initial value\n            assert initial_interclip_value == '10', f\"Default Interclip Size is not (10)! Expected: 10, Actual: {initial_interclip_value}\""
    },
    {
        "name": "test_video_collage_designer_func_12_8",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_8] Set [Interclip Size]",
        "description": [
            "1. Set [Interclip Size] to (20)",
            "2. Check [Interclip Size] is (20)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_8] Set [Interclip Size]')\n    def test_video_collage_designer_func_12_8(self):\n    ''' \n        1. Set [Interclip Size] to (20)\n        2. Check [Interclip Size] is (20)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set [Interclip Size] to (20)'):\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # Set interclip size = 20\n            video_collage_designer_page.border.set_interclip_slider(20)\n\n        with step('[Verify] Check [Interclip Size] is (20)'):\n            current_interclip_value = video_collage_designer_page.border.get_interclip_value()\n            if current_interclip_value != '20':\n                assert False, f\"Interclip Size is not (20)! Expected: 20, Actual: {current_interclip_value}\"\n\n        with step('[Verify] Check preview is changed'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_apply_preview, current_preview, similarity=0.99):\n                assert False, \"Preview did not change after set interclip size to 20! Similary should<0.99\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_9",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "frame_animation",
            "timecode"
        ],
        "marked_name": "[test_video_collage_designer_func_12_9] Set [Frame Animation]",
        "description": [
            "1. Set [Frame Animation] to (From Beginning)",
            "2. Set [Frame Animation] to (During closing)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.frame_animation\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_video_collage_designer_func_12_9] Set [Frame Animation]')\n    def test_video_collage_designer_func_12_9(self):\n    ''' \n        1. Set [Frame Animation] to (From Beginning)\n        2. Set [Frame Animation] to (During closing)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_8\"\n        self.ensure_dependency(dependency_test)\n\n        # [L258] 3.8 Video Collage Designer > Frame animation\n        # with uuid(\"b5701127-215f-44e9-a122-efdc14274086\") as case:\n        with step('[Action] Set [Frame Animation] to (From Beginning)'):\n            # Default is From Beginning\n            video_collage_designer_page.set_timecode('00_00_00_12')\n            from_beginning_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # stop the preview to enable modifications\n            video_collage_designer_page.click_preview_operation('STOP')\n\n        with step('[Action] Set [Frame Animation] to (During closing)'):\n            # Set frame animation to During closing\n            video_collage_designer_page.border.set_frame_animation(index=1)\n            video_collage_designer_page.set_timecode('00_00_00_12')\n        \n        with step('[Verify] Check preview is changed'):\n            during_closing_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(from_beginning_preview, during_closing_preview, similarity=0.98):\n                assert False, \"Preview did not change after set frame animation to During closing! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_10",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "frame_animation",
            "timecode"
        ],
        "marked_name": "[test_video_collage_designer_func_12_10] Check Preview as GT from test_video_collage_designer_func_12_2~9",
        "description": [
            "1. Check Preview as GT from test_video_collage_designer_func_12_2~9"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.frame_animation\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_video_collage_designer_func_12_10] Check Preview as GT from test_video_collage_designer_func_12_2~9')\n    def test_video_collage_designer_func_12_10(self):\n    ''' \n        1. Check Preview as GT from test_video_collage_designer_func_12_2~9\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_9\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check Preview as GT from test_video_collage_designer_func_12_2~9'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.set_timecode('00_00_09_17')\n\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L258.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L258.png', current_preview)\n\n            assert check_preview, \"Preview is not correct as GT(L258.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_11",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_11] Set [Fill Type] to [Solid Color] with (06471E)",
        "description": [
            "1. Set [Fill Type] to [Solid Color] with (06471E)",
            "2. Check [Fill Type] is [Solid Color] with (06471E)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_11] Set [Fill Type] to [Solid Color] with (06471E)')\n    def test_video_collage_designer_func_12_11(self):\n    ''' \n        1. Set [Fill Type] to [Solid Color] with (06471E)\n        2. Check [Fill Type] is [Solid Color] with (06471E)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L256] 3.8 Video Collage Designer > Adjust [Border] > Fill type - Uniform color\n        # with uuid(\"95e51f49-8829-4b21-9886-08a95163ac0b\") as case:\n        with step('[Action] Set [Fill Type] to [Solid Color] with (06471E)'):\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.click_preview_operation('STOP') # enable modifications\n            video_collage_designer_page.border.set_uniform_color('06471E')\n\n        with step('[Verify] Check [Fill Type] is [Solid Color] with (06471E)'):\n            current_interclip_value = video_collage_designer_page.border.get_uniform_color()\n            if current_interclip_value != '06471E':\n                assert False, f\"Fill Type is not [Solid Color] with (06471E)! Expected: 06471E, Actual: {current_interclip_value}\"\n\n        with step('[Verify] Check preview is changed'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_apply_preview, current_preview, similarity=0.99):\n                assert False, \"Preview did not change after set fill type to Solid Color! Similary should<0.99\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_12",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border"
        ],
        "marked_name": "[test_video_collage_designer_func_12_12] Set [Fill Type] to [Interclip Texture] with (Sample.png) and [Interclip Size] to 100",
        "description": [
            "1. Set [Fill Type] to [Interclip Texture] with (Sample.png) and check preview is changed",
            "2. Set [Interclip Size] to 100 adn Check preview is changed",
            "3. Check preview is as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.name('[test_video_collage_designer_func_12_12] Set [Fill Type] to [Interclip Texture] with (Sample.png) and [Interclip Size] to 100')\n    def test_video_collage_designer_func_12_12(self):\n    ''' \n        1. Set [Fill Type] to [Interclip Texture] with (Sample.png) and check preview is changed\n        2. Set [Interclip Size] to 100 adn Check preview is changed\n        3. Check preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_11\"\n        self.ensure_dependency(dependency_test)\n\n        # [L257] 3.8 Video Collage Designer > Adjust [Border] > Fill type - interclip texture\n        # with uuid(\"2113a2c8-b374-4e67-be7c-80b062d71439\") as case:\n\n        with step('[Action] Set [Fill Type] to [Interclip Texture] with (Sample.png)'):\n            current_uniform_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # Set fill type to interclip texture\n            video_collage_designer_page.border.set_fill_type(1)\n            video_collage_designer_page.border.select_interclip_texture(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')\n\n        with step('[Verify] Check preview is changed'):\n            # Verify Step:\n            interclip_texture_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(current_uniform_preview, interclip_texture_preview):\n                assert False, \"Preview did not change after set fill type to Interclip Texture! Similary should<0.95\"\n        \n        with step('[Action] Set [Interclip Size] to 100'):\n            # Set interclip size to 100\n            video_collage_designer_page.border.set_interclip_value(100)\n            \n        with step('[Verify] Check preview is changed'):\n            interclip_size_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                        file_name=Auto_Ground_Truth_Folder + 'L257.png')\n            if main_page.compare(interclip_texture_preview, interclip_size_preview):\n                assert False, \"Preview did not change after set interclip size to 100! Similary should<0.95\"\n\n        with step('[Verify] Check preview is as GT'):\n            check_interclip_texture = main_page.compare(Ground_Truth_Folder + 'L257.png', interclip_size_preview)\n            assert check_interclip_texture, \"Preview is not correct as GT(L257.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_13",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "border",
            "frame_animation",
            "start_clip_playback"
        ],
        "marked_name": "[test_video_collage_designer_func_12_13] Set [Start clip playback] to (After frame animation)",
        "description": [
            "1. Set [Interclip] size to (16)",
            "2. Set [Frame Animation] to (From Beginning)",
            "3. Set [Start clip playback] to (After frame animation)",
            "4. Check preview is as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.border\n    @pytest.mark.frame_animation\n    @pytest.mark.start_clip_playback\n    @pytest.mark.name('[test_video_collage_designer_func_12_13] Set [Start clip playback] to (After frame animation)')\n    def test_video_collage_designer_func_12_13(self):\n    ''' \n        1. Set [Interclip] size to (16)\n        2. Set [Frame Animation] to (From Beginning)\n        3. Set [Start clip playback] to (After frame animation)\n        4. Check preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L260] 3.8 Video Collage Designer > Start clip playback > After frame animation\n        # with uuid(\"c240b30c-d5d9-4dbb-972f-6d687ee8fd9a\") as case:\n        with step('[Action] Set [Interclip] size to (16)'):\n            # Set interclip size to 16\n            video_collage_designer_page.border.set_interclip_value(16)\n\n        with step('[Action] Set [Frame Animation] to (From Beginning)'):\n            # Set frame animation to From Beginning\n            video_collage_designer_page.border.set_frame_animation(index=0)\n\n        with step('[Action] Set [Start clip playback] to (After frame animation)'):\n            # Set (After frame animation)\n            video_collage_designer_page.border.set_start_playback(1)\n\n        with step('[Verify] Check preview is as GT'):\n            video_collage_designer_page.set_timecode('00_00_01_29')\n\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L260.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L260.png', current_preview)\n\n            assert check_preview, \"Preview is not correct as GT(L260.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_14",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva",
            "duration_settings"
        ],
        "marked_name": "[test_video_collage_designer_func_12_14] Set [Duration Settings] to (9s)",
        "description": [
            "1. Enter [Duration Settings] window by right click on canva",
            "2. Set duration = 9s",
            "3. Reopen [Duration Settings] window by right click on canva",
            "4. Check duration is (9s)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.duration_settings\n    @pytest.mark.name('[test_video_collage_designer_func_12_14] Set [Duration Settings] to (9s)')\n    def test_video_collage_designer_func_12_14(self):\n    ''' \n        1. Enter [Duration Settings] window by right click on canva\n        2. Set duration = 9s\n        3. Reopen [Duration Settings] window by right click on canva\n        4. Check duration is (9s)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L248] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Set duration\n        # with uuid(\"57bbc6d9-bfd0-491b-a4a1-f6b5b7ab30a6\") as case:\n\n        with step('[Action] Enter [Duration Settings] window by right click on canva'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.preview.enter_duration_setting_by_right_click_menu()\n\n        with step('[Action] Set duration = 9s'):\n            # set duration = 9s\n            main_page.set_time_code(el_locator=L.main.duration_setting_dialog.txt_duration,duration='00_00_09_00')\n\n        with step('[Action] Reopen [Duration Settings] window by right click on canva'):\n            video_collage_designer_page.preview.enter_duration_setting_by_right_click_menu()\n    \n        with step('[Verify] Check duration is (9s)'):\n            new_duration = main_page.exist(L.main.duration_setting_dialog.txt_duration)\n            assert new_duration.AXValue == '00:00:09:00', f\"Duration is not (9s)! Expected: 00:00:09:00, Actual: {new_duration.AXValue}\""
    },
    {
        "name": "test_video_collage_designer_func_12_15",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva"
        ],
        "marked_name": "[test_video_collage_designer_func_12_15] Remove clip from slot by right click menu",
        "description": [
            "1. Remove clip from slot by right click menu",
            "2. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.name('[test_video_collage_designer_func_12_15] Remove clip from slot by right click menu')\n    def test_video_collage_designer_func_12_15(self):\n    ''' \n        1. Remove clip from slot by right click menu\n        2. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_14\"\n        self.ensure_dependency(dependency_test)\n\n        # [L252] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Remove clip from slot\n        # with uuid(\"e272149d-73ff-419f-be46-df32f13e7aec\") as case:\n        with step('[Action] Remove clip from slot by right click menu'):\n            before_deleted_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if not video_collage_designer_page.preview.remove_clip_on_preview_by_right_click_menu():\n                assert False, \"Cannot remove clip from slot by right click menu!\"\n        \n        with step('[Verify] Check preview is changed'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_deleted_preview, current_preview, similarity=0.98):\n                assert False, \"Preview did not change after remove clip from slot! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_16",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva"
        ],
        "marked_name": "[test_video_collage_designer_func_12_16] Exchange slot media by dragging on preview",
        "description": [
            "1. Exchange slot media by dragging on preview",
            "2. Check preview is as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.name('[test_video_collage_designer_func_12_16] Exchange slot media by dragging on preview')\n    def test_video_collage_designer_func_12_16(self):\n    ''' \n        1. Exchange slot media by dragging on preview\n        2. Check preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_15\"\n        self.ensure_dependency(dependency_test)\n        # [L246] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Exchange slot media\n        # with uuid(\"bbe3cfc9-06c2-45f8-9eab-a3c5a9bdd651\") as case:\n\n        with step('[Action] Exchange slot media by dragging on preview'):\n            video_collage_designer_page.preview.exchange_media_by_drag_mouse_on_preview()\n        \n        with step('[Verify] Check preview is as GT'):\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L246.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L246.png', current_preview)\n\n            assert check_preview, \"Preview is not correct as GT(L246.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_17",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva"
        ],
        "marked_name": "[test_video_collage_designer_func_12_17] Mute clip on preview",
        "description": [
            "1. Hover on Slot 3",
            "2. Check preview is as GT",
            "3. Click on Mute icon",
            "4. Check preview is changed after muted it"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.name('[test_video_collage_designer_func_12_17] Mute clip on preview')\n    def test_video_collage_designer_func_12_17(self):\n    ''' \n        1. Hover on Slot 3\n        2. Check preview is as GT\n        3. Click on Mute icon\n        4. Check preview is changed after muted it\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_16\"\n        self.ensure_dependency(dependency_test)\n\n        # [L250] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Mute/ un-mute\n        # with uuid(\"63aa5fba-c432-4b8f-85c5-e125f457d1e2\") as case:\n        with step('[Action] Hover on Slot 3'):\n            video_collage_designer_page.preview.hover_on_slot_with_layout_10(1, 0)\n\n        with step('[Verify] Check preview is as GT'):\n            # Verify Step:\n            un_mute_icon_image = main_page.snapshot(locator=L.video_collage_designer.preview.btn_mute,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L250.png')\n            if not main_page.compare(Ground_Truth_Folder + 'L250.png', un_mute_icon_image):\n                assert False, \"Preview is not correct as GT(L250.png)! Similary should>0.95\"\n\n        with step('[Action] Click on Mute icon'):\n            main_page.click(L.video_collage_designer.preview.btn_mute)\n            time.sleep(DELAY_TIME)\n\n        with step('[Verify] Check preview is changed after muted it'):\n            mute_icon_image = main_page.snapshot(locator=L.video_collage_designer.preview.btn_mute)\n            if main_page.compare(mute_icon_image, un_mute_icon_image):\n                assert False, \"Preview did not change after muted it! Similary should<0.95\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_18",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "import_media",
            "frame_animation",
            "start_clip_playback"
        ],
        "marked_name": "[test_video_collage_designer_func_12_18] Set [Start clip playback] to (With frame animation)",
        "description": [
            "1. Import media (Skateboard 03.mp4) and click auto fill",
            "2. Set [Start clip playback] to (With frame animation)",
            "3. Check preview is as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.import_media\n    @pytest.mark.frame_animation\n    @pytest.mark.start_clip_playback\n    @pytest.mark.name('[test_video_collage_designer_func_12_18] Set [Start clip playback] to (With frame animation)')\n    def test_video_collage_designer_func_12_18(self):\n    ''' \n        1. Import media (Skateboard 03.mp4) and click auto fill\n        2. Set [Start clip playback] to (With frame animation)\n        3. Check preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_17\"\n        self.ensure_dependency(dependency_test)\n\n        # [L259] 3.8 Video Collage Designer > Start clip playback > With frame animation\n        # with uuid(\"2c3ae0f3-5981-4f0a-ad2d-c5cf5f49ee80\") as case:\n\n        with step('[Action] Import media (Skateboard 03.mp4) and click auto fill'):\n            # Add Skateboard 03.mp4 to Slot 4\n            video_collage_designer_page.media.select_media('Skateboard 03.mp4')\n            video_collage_designer_page.media.click_auto_fill()\n\n        with step('[Action] Set [Start clip playback] to (With frame animation)'):\n            # Set (With frame animation)\n            video_collage_designer_page.border.set_start_playback(0)\n\n        with step('[Verify] Check preview is as GT'):\n            video_collage_designer_page.set_timecode('00_00_01_29')\n            # Verify Step:\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L259.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L259.png', current_preview)\n\n            assert check_preview, \"Preview is not correct as GT(L259.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_19",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva",
            "zoom"
        ],
        "marked_name": "[test_video_collage_designer_func_12_19] Check Zoom in/ Out functions show up when hover on the slot",
        "description": [
            "1. Hover on the slot",
            "2. Check Zoom in/ Out functions show up"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.zoom\n    @pytest.mark.name('[test_video_collage_designer_func_12_19] Check Zoom in/ Out functions show up when hover on the slot')\n    def test_video_collage_designer_func_12_19(self):\n    ''' \n        1. Hover on the slot\n        2. Check Zoom in/ Out functions show up\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L247] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Zoom Slider\n        # with uuid(\"78bc1294-a79a-44e3-8857-783c1442ff48\") as case:\n\n        with step('[Action] Hover on the slot'):\n            video_collage_designer_page.click_preview_operation('STOP') # enable modifications\n            video_collage_designer_page.preview.hover_on_slot_with_layout_10(3, 0)\n            \n        with step('[Verify] Check Zoom in/ Out functions show up'):\n            zoom_in_btn = main_page.exist(L.video_collage_designer.preview.btn_zoom_in)\n            zoom_out_btn = main_page.exist(L.video_collage_designer.preview.btn_zoom_out)\n            zoom_slider = main_page.exist(L.video_collage_designer.preview.slider_zoom)\n            assert zoom_in_btn and zoom_out_btn and zoom_slider, f\"Zoom in/ Out functions do not show up! Zoom in: {zoom_in_btn}, Zoom out: {zoom_out_btn}, Zoom slider: {zoom_slider}\""
    },
    {
        "name": "test_video_collage_designer_func_12_20",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva",
            "zoom"
        ],
        "marked_name": "[test_video_collage_designer_func_12_20] Zoom in by arrow",
        "description": [
            "1. Zoom in to (5) by arrow",
            "2. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.zoom\n    @pytest.mark.name('[test_video_collage_designer_func_12_20] Zoom in by arrow')\n    def test_video_collage_designer_func_12_20(self):\n    ''' \n        1. Zoom in to (5) by arrow\n        2. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click on Zoom In to 5 by arrow'):\n            no_zoom_in_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.preview.Zoom.zoom_in_by_arrow(5)\n                \n        with step('[Verify] Check preview is changed'):\n            apply_zoom_in_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(no_zoom_in_preview, apply_zoom_in_preview, similarity=0.98):\n                assert False, \"Preview did not change after zoom in 5 times! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_21",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "canva",
            "zoom"
        ],
        "marked_name": "[test_video_collage_designer_func_12_21] Zoom out by slider",
        "description": [
            "1. Zoom out to (0) by slider",
            "2. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.canva\n    @pytest.mark.zoom\n    @pytest.mark.name('[test_video_collage_designer_func_12_21] Zoom out by slider')\n    def test_video_collage_designer_func_12_21(self):\n    ''' \n        1. Zoom out to (0) by slider\n        2. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_20\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Zoom to 0 by slider'):\n            no_zoom_out_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            # Set zoom slider to (Zoom out)\n            video_collage_designer_page.preview.Zoom.zoom_by_slider(0)\n\n        with step('[Verify] Check preview is changed'):\n            apply_zoom_out_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(no_zoom_out_preview, apply_zoom_out_preview, similarity=0.98):\n                assert False, \"Preview did not change after zoom out to 0! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_22",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "trim",
            "in_position"
        ],
        "marked_name": "[test_video_collage_designer_func_12_22] Trim clip with (In Position)",
        "description": [
            "1. Open Trim window",
            "2. Set Trim (In Position) to 00:00:05:09",
            "3. Check Duration Time is changed to (00:00:05:27)",
            "4. Click [OK] to close trim window"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.trim\n    @pytest.mark.in_position\n    @pytest.mark.name('[test_video_collage_designer_func_12_22] Trim clip with (In Position)')\n    def test_video_collage_designer_func_12_22(self):\n    ''' \n        1. Open Trim window\n        2. Set Trim (In Position) to 00:00:05:09\n        3. Check Duration Time is changed to (00:00:05:27)\n        4. Click [OK] to close trim window\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_21\"\n        self.ensure_dependency(dependency_test)\n\n        # [L249] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Trim Video\n        # with uuid(\"6531953b-b585-4c45-b250-8afa2a929835\") as case:\n        with step('[Action] Open Trim window'):\n            video_collage_designer_page.preview.Trim.open_trim_window()\n        \n        with step('[Action] Set Trim (In Position) to 00:00:05:09'):\n            # Set (In Position) to 00;00;05;09\n            precut_page.set_single_trim_precut_in_position('00_05_09')\n\n        with step('[Verify] Check Duration Time is changed to (00:00:05:27)'):\n            # Verify step: Get duration\n            current_duration = precut_page.get_precut_single_trim_duration()\n            if current_duration != '00:00:05:27':\n                assert False, f\"Duration Time is not (00:00:05:27)! Expected: 00:00:05:27, Actual: {current_duration}\"\n        \n        with step('[Initial] Click [OK] to close trim window'):\n            # click [OK] to close trim window\n            precut_page.click_ok()\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_23",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "before_after_clip_playback",
            "color_board"
        ],
        "marked_name": "[test_video_collage_designer_func_12_23] Set [Before/ After Clip Playback] to (Display color board) and change color",
        "description": [
            "1. Set [Before/ After Clip Playback] to (Display color board)",
            "2. Set [Before/ After Clip Playback -- Color Board] color to (BE3400)",
            "3. Check preview is as GT"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.before_after_clip_playback\n    @pytest.mark.color_board\n    @pytest.mark.name('[test_video_collage_designer_func_12_23] Set [Before/ After Clip Playback] to (Display color board) and change color')\n    def test_video_collage_designer_func_12_23(self):\n    ''' \n        1. Set [Before/ After Clip Playback] to (Display color board)\n        2. Set [Before/ After Clip Playback -- Color Board] color to (BE3400)\n        3. Check preview is as GT\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_22\"\n        self.ensure_dependency(dependency_test)\n\n        # [L262] 3.8 Video Collage Designer > Before/after clip playback > Display color board\n        # with uuid(\"13847aea-4ede-4802-9b3f-0c308044aa69\") as case:\n\n        with step('[Action] Set [Before/ after clip playback] to (Display color board)'):\n            # Scroll down to show (Before/after clip playback) settings\n            video_collage_designer_page.border.set_scroll_bar(1)\n            # Set Display color board\n            video_collage_designer_page.border.set_before_after_clip_playback(1)\n\n        with step('[Action] Set [Before/ After Clip Playback -- Color Board] color to (BE3400)'):\n            # Set color\n            video_collage_designer_page.border.set_before_after_color_board('BE3400')\n\n        with step('[Verify] Check preview is as GT'):\n            # Verify step:\n            video_collage_designer_page.set_timecode('00_00_09_29')\n            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                                 file_name=Auto_Ground_Truth_Folder + 'L262.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L262.png', current_preview)\n            assert check_preview, \"Preview is not correct as GT(L262.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_24",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "advanced_settings",
            "playback_timing",
            "timecode"
        ],
        "marked_name": "[test_video_collage_designer_func_12_24] Set [Playback timing] to (One after another) in Advanced Settings",
        "description": [
            "1. Enter Advanced Settings window",
            "2. Set [Playback timing] to (One after another)",
            "3. Click [OK] to close Advanced Settings window",
            "4. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.advanced_settings\n    @pytest.mark.playback_timing\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_video_collage_designer_func_12_24] Set [Playback timing] to (One after another) in Advanced Settings')\n    def test_video_collage_designer_func_12_24(self):\n    ''' \n        1. Enter Advanced Settings window\n        2. Set [Playback timing] to (One after another)\n        3. Click [OK] to close Advanced Settings window\n        4. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_23\"\n        self.ensure_dependency(dependency_test)\n\n        # [L266] 3.8 Video Collage Designer > Advanced Settings > Playback timing > One after another\n        # with uuid(\"f50cc40e-42c3-455e-8607-9b1802e32821\") as case:\n\n        with step('[Action] Enter Advanced Settings window'):\n            video_collage_designer_page.set_timecode('00_00_04_29')\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.click_preview_operation('STOP')\n            # Click [Advanced Settings] button\n            video_collage_designer_page.border.click_advanced_setting()\n        \n        with step('[Action] Set [Playback timing] to (One after another)'):\n            # Set (One after another)\n            video_collage_designer_page.border.advanced.set_playback_timing(2)\n\n        with step('[Action] Click [OK] to close Advanced Settings window'):\n            # Click [Advanced ok]\n            video_collage_designer_page.border.advanced.click_ok()\n\n        with step('[Verify] Check preview is changed'):\n            # Verify step:\n            video_collage_designer_page.set_timecode('00_00_04_29')\n            after_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(after_apply_preview, before_apply_preview, similarity=0.98):\n                assert False, \"Preview did not change after set playback timing to One after another! Similary should<0.98\"\n            assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_25",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "before_after_clip_playback"
        ],
        "marked_name": "[test_video_collage_designer_func_12_25] Set [Before/ after clip playback] to (Restart playback)",
        "description": [
            "1. Screenshot at (00:18) for further verification (locator=L.video_collage_designer.main_window)",
            "2. Set [Before/ after clip playback] to (Restart playback)",
            "3. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.before_after_clip_playback\n    @pytest.mark.name('[test_video_collage_designer_func_12_25] Set [Before/ after clip playback] to (Restart playback)')\n    def test_video_collage_designer_func_12_25(self):\n    ''' \n        1. Screenshot at (00:18) for further verification (locator=L.video_collage_designer.main_window)\n        2. Set [Before/ after clip playback] to (Restart playback)\n        3. Check preview is changed\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_24\"\n        self.ensure_dependency(dependency_test)\n\n        # [L263] 3.8 Video Collage Designer > Before/after clip playback > Restart playback\n        # with uuid(\"41e1f553-adaa-41ff-912a-91780fbe30ea\") as case:\n            #video_collage_designer_page.set_timecode('00_00_23_03')\n        \n        with step('[Action] Screenshot at (00:18) for further verification'):\n            video_collage_designer_page.set_timecode('00_00_18_00')\n            before_set_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.click_preview_operation('STOP')\n\n        with step('[Action] Set [Before/ after clip playback] to (Restart playback)'):\n            # Set Restart playback\n            video_collage_designer_page.border.set_before_after_clip_playback(2)\n\n        with step('[Verify] Check preview is changed'):\n            # Verify step:\n            video_collage_designer_page.set_timecode('00_00_18_00')\n            after_set_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_set_preview, after_set_preview, similarity=0.98):\n                assert False, \"Preview did not change after set playback timing to Restart playback! Similary should<0.98\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_26",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "before_after_clip_playback"
        ],
        "marked_name": "[test_video_collage_designer_func_12_26] Set [Before/ after clip playback] to (Freeze)",
        "description": [
            "1. Set [Before/ after clip playback] to (Freeze)",
            "2. Check preview as GT at (00:18)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.before_after_clip_playback\n    @pytest.mark.name('[test_video_collage_designer_func_12_26] Set [Before/ after clip playback] to (Freeze)')\n    def test_video_collage_designer_func_12_26(self):\n    ''' \n        1. Set [Before/ after clip playback] to (Freeze)\n        2. Check preview as GT at (00:18)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_25\"\n        self.ensure_dependency(dependency_test)\n\n        # [L261] 3.8 Video Collage Designer > Before/after clip playback > Freeze\n        # with uuid(\"3f20acc7-53cd-4fb9-abe5-a6f74ac92f01\") as case:\n        with step('[Action] Set [Before/ after clip playback] to (Freeze)'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            # Set Freeze\n            video_collage_designer_page.border.set_before_after_clip_playback(0)\n\n        with step('[Verify] Check preview as GT at (00:18)'):\n            # Verify step:\n            video_collage_designer_page.set_timecode('00_00_18_00')\n\n            after_freeze_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,\n                                             file_name=Auto_Ground_Truth_Folder + 'L261.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L261.png', after_freeze_preview)\n            assert check_preview, \"Preview is not correct as GT(L261.png)! Similary should>0.95\""
    },
    {
        "name": "test_video_collage_designer_func_12_27",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "advanced_settings",
            "playback_timing"
        ],
        "marked_name": "[test_video_collage_designer_func_12_27] Set [Playback timing] to (One after another) in Advanced Settings",
        "description": [
            "1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)",
            "2. Enter [Advanced Settings] window",
            "3. Set [Playback timing] to (One after another) in Advanced Settings",
            "4. Click [OK] to close Advanced Settings window",
            "5. Check preview is changed at (07:00)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.advanced_settings\n    @pytest.mark.playback_timing\n    @pytest.mark.name('[test_video_collage_designer_func_12_27] Set [Playback timing] to (One after another) in Advanced Settings')\n    def test_video_collage_designer_func_12_27(self):\n    ''' \n        1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)\n        2. Enter [Advanced Settings] window\n        3. Set [Playback timing] to (One after another) in Advanced Settings\n        4. Click [OK] to close Advanced Settings window\n        5. Check preview is changed at (07:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_26\"\n        self.ensure_dependency(dependency_test)\n\n        # [L264] 3.8 Video Collage Designer > Advanced Settings > Playback timing > All at once\n        # with uuid(\"c8738608-13c3-42b0-a7d4-1dcfad025805\") as case:\n\n        with step('[Action] Screenshot at (07:00) for further verification (locator=L.video_collage_designer.main_window)'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.set_timecode('00_00_07_00')\n            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.click_preview_operation('STOP')\n\n        with step('[Action] Enter [Advanced Settings] window'):\n            # Click [Advanced Settings] button\n            video_collage_designer_page.border.click_advanced_setting()\n\n        with step('[Action] Set [Playback timing] to (All at once)'):\n            # Set (All at once)\n            video_collage_designer_page.border.advanced.set_playback_timing(0)\n\n        with step('[Action] Click [OK] to close Advanced Settings window'):\n            # Click [Advanced ok]\n            video_collage_designer_page.border.advanced.click_ok()\n\n        with step('[Verify] Check preview is changed at (07:00)'):\n            video_collage_designer_page.set_timecode('00_00_07_00')\n\n            # Verify Step:\n            all_at_once_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(before_apply_preview, all_at_once_preview, similarity=0.99):\n                assert False, \"Preview did not change after set playback timing to All at once! Similary should<0.99\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_28",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "advanced_settings",
            "playback_timing"
        ],
        "marked_name": "[test_video_collage_designer_func_12_28] Set [Playback timing] to (Delay 3 seconds) in Advanced Settings",
        "description": [
            "1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)",
            "2. Enter [Advanced Settings] window",
            "3. Set [Playback timing] to (Delay 3 seconds) in Advanced Settings",
            "4. Click [OK] to close Advanced Settings window"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.advanced_settings\n    @pytest.mark.playback_timing\n    @pytest.mark.name('[test_video_collage_designer_func_12_28] Set [Playback timing] to (Delay 3 seconds) in Advanced Settings')\n    def test_video_collage_designer_func_12_28(self):\n    ''' \n        1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)\n        2. Enter [Advanced Settings] window\n        3. Set [Playback timing] to (Delay 3 seconds) in Advanced Settings\n        4. Click [OK] to close Advanced Settings window\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_27\"\n        self.ensure_dependency(dependency_test)\n\n        # [L265] 3.8 Video Collage Designer > Advanced Settings > Playback timing > Delay three seconds\n        # with uuid(\"8c66467f-082c-4788-9878-7e4cf92aa5c5\") as case:\n        with step('[Action] Screenshot at (07:00) for further verification (locator=L.video_collage_designer.main_window)'):\n            all_at_once_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            video_collage_designer_page.click_preview_operation('STOP')\n\n        with step('[Action] Enter [Advanced Settings] window'):\n            # Click [Advanced Settings] button\n            video_collage_designer_page.border.click_advanced_setting()\n\n        with step('[Action] Set [Playback timing] to (Delay three seconds)'):\n            # Set (Delay three seconds)\n            video_collage_designer_page.border.advanced.set_playback_timing(1)\n            video_collage_designer_page.border.advanced.set_delay_sec(3)\n\n        with step('[Action] Click [OK] to close Advanced Settings window'):\n            # Click [Advanced ok]\n            video_collage_designer_page.border.advanced.click_ok()\n\n        with step('[Verify] Check preview is changed at (07:00)'):\n            # Verify step:\n            video_collage_designer_page.set_timecode('00_00_07_00')\n            after_delay_3_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(all_at_once_preview, after_delay_3_preview, similarity=0.99):\n                assert False, \"Preview did not change after set playback timing to Delay three seconds! Similary should<0.99\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_29",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "advanced_settings",
            "playback_timing"
        ],
        "marked_name": "[test_video_collage_designer_func_12_29] ",
        "description": [
            "1. Click [Stop] button and enter [Advanced Settings] window",
            "2. Set [Match collage duration to] to (Shortest Clip)(2)",
            "3. Click [OK] to close Advanced Settings window",
            "4. Set timecode to (00:00:10:30)",
            "5. Check timecode is (00:00:05:27)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.advanced_settings\n    @pytest.mark.playback_timing\n    @pytest.mark.name('[test_video_collage_designer_func_12_29] ')\n    def test_video_collage_designer_func_12_29(self):\n    ''' \n        1. Click [Stop] button and enter [Advanced Settings] window\n        2. Set [Match collage duration to] to (Shortest Clip)(2)\n        3. Click [OK] to close Advanced Settings window\n        4. Set timecode to (00:00:10:30)\n        5. Check timecode is (00:00:05:27)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_28\"\n        self.ensure_dependency(dependency_test)"
    },
    {
        "name": "test_video_collage_designer_func_12_30",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "advanced_settings",
            "match_collage_duration_to"
        ],
        "marked_name": "[test_video_collage_designer_func_12_30] Set [Match collage duration to] to (Shortest Clip)",
        "description": [
            "1. Click [Stop] button and enter [Advanced Settings] window",
            "2. Set [Match collage duration to] to (Shortest Clip)(2)",
            "3. Click [OK] to close Advanced Settings window",
            "4. Set timecode to (00:00:10:30)",
            "5. Check timecode is (00:00:05:27)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.advanced_settings\n    @pytest.mark.match_collage_duration_to\n    @pytest.mark.name('[test_video_collage_designer_func_12_30] Set [Match collage duration to] to (Shortest Clip)')\n    def test_video_collage_designer_func_12_30(self):\n    ''' \n        1. Click [Stop] button and enter [Advanced Settings] window\n        2. Set [Match collage duration to] to (Shortest Clip)(2)\n        3. Click [OK] to close Advanced Settings window\n        4. Set timecode to (00:00:10:30)\n        5. Check timecode is (00:00:05:27)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_29\"\n        self.ensure_dependency(dependency_test)\n\n        # [L269] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Shortest Clip\n        # with uuid(\"c425f63d-e7f7-4a78-a05b-a488a0b84ca8\") as case:\n\n        with step(\"Click [Stop] button and enter [Advanced Settings] window\"):\n            # Click the Stop button (assumed to be accessible via preview operation)\n            video_collage_designer_page.click_preview_operation('Stop')\n            # Click [Advanced Settings] button\n            video_collage_designer_page.border.click_advanced_setting()\n\n        with step(\"Set [Match collage duration to] to (Shortest Clip)(2)\"):\n            video_collage_designer_page.border.advanced.set_match_collage_duration_to(2)\n        \n        with step(\"Click [OK] to close Advanced Settings window\"):\n            video_collage_designer_page.border.advanced.click_ok()\n        \n        with step(\"Set timecode to (00:00:10:30)\"):\n            video_collage_designer_page.set_timecode('00_00_10_30')\n        \n        with step(\"Check timecode is (00:00:05:27)\"):\n            # Retrieve the current timecode from the timeline\n            current_timecode = video_collage_designer_page.get_timecode()\n            expected_timecode = '00:00:05:27'\n            if current_timecode != expected_timecode:\n                assert False, f\"Timecode is incorrect! Expected: {expected_timecode}, Actual: {current_timecode}\"\n        assert True"
    },
    {
        "name": "test_video_collage_designer_func_12_31",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timecode",
            "advanced_settings",
            "match_collage_duration_to"
        ],
        "marked_name": "[test_video_collage_designer_func_12_31] Set [Match collage duration to] (Clip 3) and verify timecode adjustment",
        "description": [
            "1. Click [Stop] button and Click [Advanced Settings] button",
            "2. Set [Match collage duration to] to (Clip 3)(5)",
            "3. Click [OK] to close Advanced Settings window",
            "4. Set timecode to (00:00:18:10)",
            "5. Check timecode is (00:00:13:00)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timecode\n    @pytest.mark.advanced_settings\n    @pytest.mark.match_collage_duration_to\n    @pytest.mark.name('[test_video_collage_designer_func_12_31] Set [Match collage duration to] (Clip 3) and verify timecode adjustment')\n    def test_video_collage_designer_func_12_31(self):\n    '''\n        1. Click [Stop] button and Click [Advanced Settings] button\n        2. Set [Match collage duration to] to (Clip 3)(5)\n        3. Click [OK] to close Advanced Settings window\n        4. Set timecode to (00:00:18:10)\n        5. Check timecode is (00:00:13:00)\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_30\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L270] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Clip N\n        # with uuid(\"df6edb35-12ab-45c4-9f3b-4f0cf1044bde\") as case:\n\n        with step(\"Click [Stop] button and Click [Advanced Settings] button\"):\n            video_collage_designer_page.click_preview_operation(\"Stop\")\n            video_collage_designer_page.border.click_advanced_setting()\n\n        with step(\"Set [Match collage duration to] to (Clip 3)(5)\"):\n            video_collage_designer_page.Border.Advanced.set_match_collage_duration_to(5)\n\n        with step(\"Click [OK] to close Advanced Settings window\"):\n            video_collage_designer_page.Border.Advanced.click_ok()\n\n        with step(\"Set timecode to (00:00:18:10)\"):\n            video_collage_designer_page.set_timecode(\"00_00_18_10\")\n        with step(\"Check timecode is (00:00:13:00)\"):\n            current_timecode = video_collage_designer_page.get_timecode()\n            if current_timecode != \"00:00:13:00\":\n                assert False, f\"Timecode is incorrect! Expected: 00:00:13:00, Actual: {current_timecode}\"\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_32",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "advanced_settings",
            "playback_timing",
            "match_collage_duration_to",
            "timecode"
        ],
        "marked_name": "[test_video_collage_designer_func_12_32] Set [Match collage duration] to (Longest Clip) & [Playback Timing - Delay Time] to (1)",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Stop] button and Click [Advanced Settings] button",
            "2. Set [Match collage duration to] to (Longest Clip)(1)",
            "3. Set [Playback Timing - Delay Time] to (1)",
            "4. Click [OK] to close Advanced Settings window",
            "5. Set timecode to (00:00:18:29)",
            "6. Check timecode is (00:00:11:00)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.advanced_settings\n    @pytest.mark.playback_timing\n    @pytest.mark.match_collage_duration_to\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_video_collage_designer_func_12_32] Set [Match collage duration] to (Longest Clip) & [Playback Timing - Delay Time] to (1)')\n    def test_video_collage_designer_func_12_32(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Stop] button and Click [Advanced Settings] button\n        2. Set [Match collage duration to] to (Longest Clip)(1)\n        3. Set [Playback Timing - Delay Time] to (1)\n        4. Click [OK] to close Advanced Settings window\n        5. Set timecode to (00:00:18:29)\n        6. Check timecode is (00:00:11:00)\n        '''\n# # [L268] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Longest\n        # with uuid(\"b0f2b7b4-15cc-4b14-85e4-a932883c3de9\") as case:\n\n        # Step 0: Ensure dependency test is run and passed\n        dependency_test = \"test_video_collage_designer_func_12_31\"\n        self.ensure_dependency(dependency_test)\n        \n        # Step 1: Click [Stop] button and [Advanced Settings] button\n        with step('[Action] Click [Stop] button and [Advanced Settings] button'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.border.click_advanced_setting()\n        \n        # Step 2: Set [Match collage duration to] to (Longest Clip)(1)\n        with step('[Action] Set [Match collage duration to] to (Longest Clip)'):\n            video_collage_designer_page.border.advanced.set_match_collage_duration_to(1)\n        \n        # Step 3: Set [Playback Timing - Delay Time] to (1)\n        with step('[Action] Set [Playback Timing - Delay Time] to (1)'):\n            video_collage_designer_page.border.advanced.set_delay_sec(1)\n        \n        # Step 4: Click [OK] to close Advanced Settings window\n        with step('[Action] Click [OK] to close Advanced Settings window'):\n            video_collage_designer_page.border.advanced.click_ok()\n        \n        # Step 5: Set timecode to (00:00:18:29)\n        with step('[Action] Set timecode to (00:00:18:29)'):\n            video_collage_designer_page.set_timecode('00_00_18_29')\n        \n        # Step 6: Check timecode is (00:00:11:00)\n        with step('[Verify] Check timecode is (00:00:11:00)'):\n            current_timecode = video_collage_designer_page.get_timecode()\n            if current_timecode != '00:00:11:00':\n                assert False, f\"Expected timecode '00:00:11:00', but got {current_timecode}\"\n        \n        assert True\n        \n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_33",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "advanced_settings",
            "timecode"
        ],
        "marked_name": "[test_video_collage_designer_func_12_33] Set [Match collage duration] to (All Video) & check timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Stop] button and Click [Advanced Settings] button",
            "2. Set [Match collage duration to] to (All Video)(0)",
            "3. Click [OK] to close Advanced Settings window",
            "4. Set timecode to (00:00:18:29)",
            "5. Check timecode is (00:00:13:00)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.advanced_settings\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_video_collage_designer_func_12_33] Set [Match collage duration] to (All Video) & check timecode')\n    def test_video_collage_designer_func_12_33(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Stop] button and Click [Advanced Settings] button\n        2. Set [Match collage duration to] to (All Video)(0)\n        3. Click [OK] to close Advanced Settings window\n        4. Set timecode to (00:00:18:29)\n        5. Check timecode is (00:00:13:00)\n        '''\ndependency_test = \"test_video_collage_designer_func_12_32\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L267] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > All Videos\n        # with uuid(\"dd2c1071-c8ba-4f9a-a76f-7c0ba43c966b\") as case:\n\n        with step('[Action] Click [Stop] button and [Advanced Settings] button'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.border.click_advanced_setting()\n\n        with step('[Action] Set [Match collage duration to] to (All Video)'):\n            video_collage_designer_page.border.advanced.set_match_collage_duration_to(0)\n\n        with step('[Action] Click [OK] to close Advanced Settings window'):\n            video_collage_designer_page.border.advanced.click_ok()\n\n        with step('[Action] Set timecode to (00:00:18:29)'):\n            video_collage_designer_page.set_timecode('00_00_18_29')\n\n        with step('[Verify] Check timecode is (00:00:13:00)'):\n            current_timecode = video_collage_designer_page.get_timecode()\n            if current_timecode != '00:00:13:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:13:00, Actual: {current_timecode}\"\n\n        assert True\n\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_34",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer"
        ],
        "marked_name": "[test_video_collage_designer_func_12_34] Check preview is as GT (L267.png)",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. screenshot (locator=L.video_collage_designer.main_window)",
            "2. Check preview is as GT (L267.png) (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.name('[test_video_collage_designer_func_12_34] Check preview is as GT (L267.png)')\n    def test_video_collage_designer_func_12_34(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. screenshot (locator=L.video_collage_designer.main_window)\n        2. Check preview is as GT (L267.png) (similarity=0.95)\n        '''\ndependency_test = \"test_video_collage_designer_func_12_33\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Screenshot (locator=L.video_collage_designer.main_window)'):\n            current_preview = main_page.snapshot(\n                locator=L.video_collage_designer.main_window,\n                file_name=Auto_Ground_Truth_Folder + 'L267.png'\n            )\n\n        with step('[Verify] Check preview is as GT (L267.png)'):\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L267.png',\n                current_preview,\n                similarity=0.95\n            )\n            assert check_preview, \"Preview does not match Ground Truth (L267.png)! Similarity should be >0.95\"\n\n\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_35",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer"
        ],
        "marked_name": "[test_video_collage_designer_func_12_35] Check preview is as GT (L271.png) at (00:00:08:05)",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Stop] button and set timecode to (00:00:08:05)",
            "2. Check preview is as GT (L271.png)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.name('[test_video_collage_designer_func_12_35] Check preview is as GT (L271.png) at (00:00:08:05)')\n    def test_video_collage_designer_func_12_35(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Stop] button and set timecode to (00:00:08:05)\n        2. Check preview is as GT (L271.png)\n        '''\n# [L271] 3.8 Video Collage Designer > [Preview] in designer\n        # with uuid(\"b47f849f-5fae-4bab-8b57-595bb7f6e2aa\") as case:\n\n        dependency_test = \"test_video_collage_designer_func_12_34\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Stop] button and set timecode to (00:00:08:05)'):\n            video_collage_designer_page.click_preview_operation('STOP')\n            video_collage_designer_page.set_timecode('00_00_08_05')\n\n        with step('[Verify] Check preview is as GT (L271.png)'):\n            current_preview = main_page.snapshot(\n                locator=L.video_collage_designer.main_window,\n                file_name=Auto_Ground_Truth_Folder + 'L271.png'\n            )\n            is_preview_correct = main_page.compare(\n                Ground_Truth_Folder + 'L271.png',\n                current_preview,\n                similarity=0.95\n            )\n            if not is_preview_correct:\n                assert False, \"Preview does not match Ground Truth (L271.png)! Similarity should be >0.95\"\n\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_36",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "save_template"
        ],
        "marked_name": "[test_video_collage_designer_func_12_36] Save As custom layout",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Save As the custom layout with name (video_collage_custom_test)",
            "2. Screenshot (locator=L.video_collage_designer.layout.frame) and compare with GT (L272.png)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.save_template\n    @pytest.mark.name('[test_video_collage_designer_func_12_36] Save As custom layout')\n    def test_video_collage_designer_func_12_36(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Save As the custom layout with name (video_collage_custom_test)\n        2. Screenshot (locator=L.video_collage_designer.layout.frame) and compare with GT (L272.png)\n        '''\n# [L272] 3.8 Video Collage Designer > Advanced Settings > [Save as] Video Collage layout\n        # with uuid(\"7a264c7c-3140-489d-960b-38f2bf42a0c6\") as case:\n\n        dependency_test = \"test_video_collage_designer_func_12_35\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Save As the custom layout with name (video_collage_custom_test)'):\n            video_collage_designer_page.click_save_as_with_name(\"video_collage_custom_test\")\n\n        with step('[Verify] Screenshot layout frame and compare with GT (L272.png)'):\n            current_layout = main_page.snapshot(\n                locator=L.video_collage_designer.layout.frame,\n                file_name=Auto_Ground_Truth_Folder + 'L272.png'\n            )\n            is_layout_correct = main_page.compare(\n                Ground_Truth_Folder + 'L272.png',\n                current_layout,\n                similarity=0.95\n            )\n            if not is_layout_correct:\n                # Similarity should be greater than 0.95\n                assert False, \"Layout preview does not match GT (L272.png)! Similarity should > 0.95\"\n\n        assert True\n\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_37",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "layout"
        ],
        "marked_name": "[test_video_collage_designer_func_12_37] Set layout to another and back to original one",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot current preview (locator=L.video_collage_designer.main_window)",
            "2. Set layout to 13th (index=13)",
            "3. Check if the preview is updated (similarity=0.95)",
            "4. Set layout to 1st (index=1)",
            "5. Check if the preview is updated (similarity=0.95)",
            "6. Check if the preview is the same as the first screenshot (similarity=0.99)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.layout\n    @pytest.mark.name('[test_video_collage_designer_func_12_37] Set layout to another and back to original one')\n    def test_video_collage_designer_func_12_37(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot current preview (locator=L.video_collage_designer.main_window)\n        2. Set layout to 13th (index=13)\n        3. Check if the preview is updated (similarity=0.95)\n        4. Set layout to 1st (index=1)\n        5. Check if the preview is updated (similarity=0.95)\n        6. Check if the preview is the same as the first screenshot (similarity=0.99)\n        '''\ndependency_test = \"test_video_collage_designer_func_12_36\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Screenshot current preview (locator=L.video_collage_designer.main_window)'):\n            initial_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n\n        with step('[Action] Set layout to 13th (index=13)'):\n            video_collage_designer_page.Layout.select_layout(13)\n\n        with step('[Verify] Check if the preview is updated after setting layout to 13'):\n            preview_after_13 = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(initial_preview, preview_after_13, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after setting layout to 13! Similarity should < 0.95\"\n\n        with step('[Action] Set layout to 1st (index=1)'):\n            video_collage_designer_page.Layout.select_layout(1)\n\n        with step('[Verify] Check if the preview is updated after setting layout to 1'):\n            preview_after_1 = main_page.snapshot(locator=L.video_collage_designer.main_window)\n            if main_page.compare(preview_after_13, preview_after_1, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after setting layout to 1! Similarity should < 0.95\"\n\n        with step('[Verify] Check if the preview is the same as the initial preview'):\n            if not main_page.compare(initial_preview, preview_after_1, similarity=0.99):\n                # Similarity should be greater than 0.99 for matching preview\n                assert False, \"Final preview does not match the initial preview! Similarity should > 0.99\"\n\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_38",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "cyberlink_cloud",
            "dz",
            "save_template",
            "shared_template"
        ],
        "marked_name": "[test_video_collage_designer_func_12_38] Share to DZ with name (test_video_collage) and check upload result",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Share to DZ with name (test_video_collage) and check upload result"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.dz\n    @pytest.mark.save_template\n    @pytest.mark.shared_template\n    @pytest.mark.name('[test_video_collage_designer_func_12_38] Share to DZ with name (test_video_collage) and check upload result')\n    def test_video_collage_designer_func_12_38(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Share to DZ with name (test_video_collage) and check upload result\n        '''\n# [L273] 3.8 Video Collage Designer > [Share] template online\n        # with uuid(\"c956d061-593c-439f-84c8-a9222942b172\") as case:\n\n        dependency_test = \"test_video_collage_designer_func_12_37\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Share to DZ with name (test_video_collage) and check upload result'):\n            upload_result = video_collage_designer_page.share_to_dz(\"test_video_collage\")\n            if not upload_result:\n                assert False, \"Share to DZ failed! Upload result is false.\"\n\n        # current_L273_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)\n        # logger(current_L273_preview)\n\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_39",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "save_template",
            "canva"
        ],
        "marked_name": "[test_video_collage_designer_func_12_39] Check Preview on main program",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [OK] to leave [video collage designer] window",
            "2. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 0s and compare with GT (L274_0sec.png)(similarity=0.9)",
            "3. Set timecode at (00:00:09:00)",
            "4. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 9s and compare with GT (L274_9sec.png)(similarity=0.9)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.save_template\n    @pytest.mark.canva\n    @pytest.mark.name('[test_video_collage_designer_func_12_39] Check Preview on main program')\n    def test_video_collage_designer_func_12_39(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [OK] to leave [video collage designer] window\n        2. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 0s and compare with GT (L274_0sec.png)(similarity=0.9)\n        3. Set timecode at (00:00:09:00)\n        4. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 9s and compare with GT (L274_9sec.png)(similarity=0.9)\n        '''\ndependency_test = \"test_video_collage_designer_func_12_38\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [OK] to leave [video collage designer] window'):\n            video_collage_designer_page.click_ok()\n\n        with step('[Verify] Screenshot preview at 0s and compare with GT (L274_0sec.png)'):\n            preview_0s = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L274_0sec.png'\n            )\n            check_preview_0s = main_page.compare(\n                Ground_Truth_Folder + 'L274_0sec.png',\n                preview_0s,\n                similarity=0.9\n            )\n            if not check_preview_0s:\n                # Similarity should be greater than 0.9\n                assert False, \"Preview at 0s does not match GT (L274_0sec.png)! Similarity should > 0.9\"\n\n        with step('[Action] Set timecode at (00:00:09:00)'):\n            video_collage_designer_page.set_timecode('00_00_09_00')\n\n        with step('[Verify] Screenshot preview at 9s and compare with GT (L274_9sec.png)'):\n            preview_9s = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L274_9sec.png'\n            )\n            check_preview_9s = main_page.compare(\n                Ground_Truth_Folder + 'L274_9sec.png',\n                preview_9s,\n                similarity=0.9\n            )\n            if not check_preview_9s:\n                # Similarity should be greater than 0.9\n                assert False, \"Preview at 9s does not match GT (L274_9sec.png)! Similarity should > 0.9\"\n\n        assert True\n\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_40",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "saved_template"
        ],
        "marked_name": "[test_video_collage_designer_func_12_40] Remove custom templates and check preview change",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Video Collage] button in [Tips Area]",
            "2. Check if [Video Collage Designer] is opened",
            "3. Screenshot (locator=L.video_collage_designer.main_window)",
            "4. Remove 2 custom templates by selecting layout (1) > right-click menu > delete ('Delete (only for Custom/Downloaded)') > click [Yes]",
            "5. Check preview is changed"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.saved_template\n    @pytest.mark.name('[test_video_collage_designer_func_12_40] Remove custom templates and check preview change')\n    def test_video_collage_designer_func_12_40(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Video Collage] button in [Tips Area]\n        2. Check if [Video Collage Designer] is opened\n        3. Screenshot (locator=L.video_collage_designer.main_window)\n        4. Remove 2 custom templates by selecting layout (1) > right-click menu > delete ('Delete (only for Custom/Downloaded)') > click [Yes]\n        5. Check preview is changed\n        '''\n# [L275] 3.8 Video Collage Designer > Back to Designer from tips area [Video Collage] button\n        # with uuid(\"39a7ac17-ade8-4e8f-b87f-b0ff4cb815bd\") as case:\n\n        dependency_test = \"test_video_collage_designer_func_12_39\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Video Collage] button in [Tips Area]'):\n            tips_area_page.click_TipsArea_btn_VideoCollage()\n            \n        with step('[Verify] Check if [Video Collage Designer] window is opened'):\n            if not video_collage_designer_page.check_window_opened():\n                assert False, \"[Video Collage Designer] window did not open!\"\n\n        with step('[Action] Take initial screenshot of main window'):\n            before_removal = main_page.snapshot(\n                locator=L.video_collage_designer.main_window,\n                file_name=Auto_Ground_Truth_Folder + 'before_removal.png'\n            )\n\n        with step('[Action] Remove 2 custom templates'):\n            for _ in range(2):\n                # Select layout 1 (assumed to be the custom template layout)\n                video_collage_designer_page.Layout.select_layout(1)\n                main_page.right_click()\n                # Remove first custom template via right-click menu and confirm deletion\n                main_page.select_right_click_menu('Delete (only for Custom/Downloaded)')\n                video_collage_designer_page.layout.click_remove_yes()\n\n\n        with step('[Verify] Check preview is changed after template removal'):\n            after_removal = main_page.snapshot(\n                locator=L.video_collage_designer.main_window,\n                file_name=Auto_Ground_Truth_Folder + 'after_removal.png'\n            )\n            # Expect preview to change, so similarity should be less than 0.95\n            if main_page.compare(before_removal, after_removal, similarity=0.95):\n                assert False, \"Preview did not change after removal! Similarity should < 0.95\"\n\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_41",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "timeline",
            "saved_template"
        ],
        "marked_name": "[test_video_collage_designer_func_12_41] Verify preview update after timeline addition",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [OK] to leave [Video Collage Designer] window",
            "2. Enter [Intro Room] > [Saved Templates] category",
            "3. Select the template (1) and right-click > right-click menu (Add to Timeline) > click (L.base.confirm_dialog.btn_no)",
            "4. Check Preview is changed (locator L.base.Area.preview.only_mtk_view)"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.timeline\n    @pytest.mark.saved_template\n    @pytest.mark.name('[test_video_collage_designer_func_12_41] Verify preview update after timeline addition')\n    def test_video_collage_designer_func_12_41(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [OK] to leave [Video Collage Designer] window\n        2. Enter [Intro Room] > [Saved Templates] category\n        3. Select the template (1) and right-click > right-click menu (Add to Timeline) > click (L.base.confirm_dialog.btn_no)\n        4. Check Preview is changed (locator L.base.Area.preview.only_mtk_view)\n        '''\ndependency_test = \"test_video_collage_designer_func_12_40\"\n        self.ensure_dependency(dependency_test)\n\n        # [L276] 3.8 Video Collage Designer > Save Project & Pack material\n        # with uuid(\"06e25859-e0ac-49f6-b667-bd4dae1342c8\") as case:\n\n        with step('[Action] Click [OK] to leave [Video Collage Designer] window'):\n            video_collage_designer_page.click_ok()\n\n        with step('[Action] Enter [Intro Room] > [Saved Templates] category'):\n            # Enter intro room > Saved Templates category\n            intro_video_page.enter_intro_video_room()\n            intro_video_page.enter_saved_category()\n\n        with step('[Action] Select the template (1) and right-click > right-click menu (Add to Timeline) > click (L.base.confirm_dialog.btn_no)'):\n            before_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            intro_video_page.select_intro_template_method_2(1)\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Add to Timeline\")\n            main_page.click(L.base.confirm_dialog.btn_no)\n\n        with step('[Verify] Check Preview is changed (locator L.base.Area.preview.only_mtk_view)'):\n            current_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            if main_page.compare(before_preview, current_preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for updated preview\n                assert False, \"Preview is not updated! Similarity should < 0.95\"\n\n        assert True\n\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_42",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "save_project"
        ],
        "marked_name": "[test_video_collage_designer_func_12_42] Pack project material and check result",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Pack project material (Test_Material_Folder + 'BFT_21_Stage1/test_video_collage_designer_func_12_42/') and check result"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_video_collage_designer_func_12_42] Pack project material and check result')\n    def test_video_collage_designer_func_12_42(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Pack project material (Test_Material_Folder + 'BFT_21_Stage1/test_video_collage_designer_func_12_42/') and check result\n        '''\ndependency_test = \"test_video_collage_designer_func_12_41\"\n        self.ensure_dependency(dependency_test)\n        \n        # # Enter Title Room > Custom category\n        # main_page.enter_room(1)\n        # time.sleep(DELAY_TIME*3)\n        # main_page.select_LibraryRoom_category('Custom')\n\n        # # Select track 1\n        # main_page.timeline_select_track(1)\n\n        # # Set timecode\n        # main_page.set_timeline_timecode('00_00_22_00')\n        # time.sleep(DELAY_TIME * 2)\n\n        # # Insert Custom title to track 1\n        # main_page.drag_media_to_timeline_playhead_position('BFT_title_Save', track_no=1)\n\n        # # Insert Custom title to track 2\n        # main_page.drag_media_to_timeline_playhead_position('BFT_MGT_Save', track_no=2)\n\n        # # Enter Title Room > Custom category\n        # main_page.enter_room(4)\n        # time.sleep(DELAY_TIME * 3)\n        # main_page.select_LibraryRoom_category('Custom')\n\n        # # Insert Custom title to track 3\n        # main_page.drag_media_to_timeline_playhead_position('BFT_mask_template', track_no=3)\n\n        # # Select track 1\n        # main_page.timeline_select_track(1)\n        # time.sleep(DELAY_TIME * 2)\n\n        # # Set timecode\n        # main_page.set_timeline_timecode('00_00_09_00')\n        # time.sleep(DELAY_TIME * 2)\n        # # Insert Custom title to track 3\n        # main_page.drag_media_to_timeline_playhead_position('BFT_Pip_Custom', track_no=3)\n\n        # # Insert Custom title to track 2\n        # main_page.drag_media_to_timeline_playhead_position('Custom_shape_10', track_no=2)\n\n        # # Enter Particle Room > Custom category\n        # main_page.enter_room(5)\n        # time.sleep(DELAY_TIME * 2)\n        # main_page.select_LibraryRoom_category('Custom')\n        # time.sleep(DELAY_TIME * 3)\n\n        # # Select track 3\n        # main_page.timeline_select_track(3)\n        # time.sleep(DELAY_TIME * 3)\n\n        # # Set timecode\n        # main_page.set_timeline_timecode('00_00_14_00')\n        # time.sleep(DELAY_TIME * 2)\n\n        # # lock track 1 (Video + Audio), lock video track2\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(0)\n        # time.sleep(DELAY_TIME * 2)\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(1)\n        # time.sleep(DELAY_TIME * 2)\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(2)\n        # time.sleep(DELAY_TIME * 2)\n        # main_page.select_library_icon_view_media('BFT_Halloween_custom')\n        # time.sleep(DELAY_TIME * 2)\n\n        # # right click > Add to timeline\n        # main_page.right_click()\n        # time.sleep(DELAY_TIME * 2)\n        # main_page.select_right_click_menu('Add to Timeline')\n\n        # # Click length to set duration to 8 sec.\n        # main_page.tips_area_click_set_length_of_selected_clip('00_00_08_00')\n        # # lock track 1 (Video + Audio), lock video track2\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(0)\n        # time.sleep(DELAY_TIME * 2)\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(1)\n        # time.sleep(DELAY_TIME * 2)\n        # timeline_operation_page.edit_specific_video_track_set_lock_unlock(2)\n        # time.sleep(DELAY_TIME * 2)\n\n        # # Select track 3\n        # main_page.timeline_select_track(2)\n        # time.sleep(DELAY_TIME * 2)\n        # # Set timecode\n        # main_page.set_timeline_timecode('00_00_17_23')\n        # time.sleep(DELAY_TIME*3)\n\n        # # Verify Step:\n        # current_17_sec_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view,\n        #                                         file_name=Auto_Ground_Truth_Folder + 'L276_17sec.png')\n        # check_17_result = main_page.compare(Ground_Truth_Folder + 'L276_17sec.png', current_17_sec_preview, similarity=0.9)\n        # logger(check_17_result)\n\n        # time.sleep(DELAY_TIME*2)\n\n        with step('[Action] Pack project material and check result'):\n            pack_result = main_page.top_menu_bar_file_pack_project_materials(\n                Test_Material_Folder + 'BFT_21_Stage1/test_video_collage_designer_func_12_42/'\n            )\n            if not pack_result:\n                assert False, \"Pack project material failed!\"\n        \n            # wait pack project processing ready\n            time.sleep(DELAY_TIME * 5)\n\n        assert True\n\n    @exception_screenshot"
    },
    {
        "name": "test_video_collage_designer_func_12_43",
        "tags": [
            "video_collage_designer_func",
            "video_collage_designer",
            "launch"
        ],
        "marked_name": "[test_video_collage_designer_func_12_43] Check media \"Mahoroba.mp3\" is available in the library after app restart",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Close and restart the app",
            "2. Check if the media (Mahoroba.mp3) is available in the library"
        ],
        "full_code": "@pytest.mark.video_collage_designer_func\n    @pytest.mark.video_collage_designer\n    @pytest.mark.launch\n    @pytest.mark.name('[test_video_collage_designer_func_12_43] Check media \"Mahoroba.mp3\" is available in the library after app restart')\n    def test_video_collage_designer_func_12_43(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Close and restart the app\n        2. Check if the media (Mahoroba.mp3) is available in the library\n        '''\ndependency_test = \"test_video_collage_designer_func_12_42\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L277] 3.8 Video Collage Designer > Re-launch PDR\n        # with uuid(\"ab28eca5-7ac6-451d-953a-ced27c3579e3\") as case:\n\n        with step('[Action] Close and restart the app'):\n            main_page.close_and_restart_app()\n        \n        with step('[Verify] Check if media \"Mahoroba.mp3\" is available in the library'):\n            # Search for the media \"Mahoroba.mp3\" in the library\n            media_found = main_page.select_library_icon_view_media(\"Mahoroba.mp3\", intro_room=False)\n            if not media_found:\n                assert False, 'Media \"Mahoroba.mp3\" is not available in the library!'\n        \n        assert True"
    },
    {
        "name": "test_produce_func_13_1",
        "tags": [
            "produce_func",
            "launch",
            "open_project",
            "import_media",
            "timecode"
        ],
        "marked_name": "[test_produce_func_13_1] Open Recent Project",
        "description": [
            "1. Start App",
            "2. Open recent packed project from top menu",
            "3. Click [Browse] on [Missing Dialog] and select file",
            "4. Set timecode to (00:00:11:23)",
            "5. Screenshot and compare with GT (similarity=0.9)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.import_media\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_produce_func_13_1] Open Recent Project')\n    def test_produce_func_13_1(self):\n    '''\n        1. Start App\n        2. Open recent packed project from top menu\n        3. Click [Browse] on [Missing Dialog] and select file\n        4. Set timecode to (00:00:11:23)\n        5. Screenshot and compare with GT (similarity=0.9)\n        '''\n# [L389] 5. Produce > Open Recent project\n        # with uuid(\"4cc570a7-5122-4edc-880b-1bc832bd6a40\") as case:\n\n        with step('[Action] Start App'):\n            main_page.start_app()\n\n        with step('[Action] Open recent packed project from top menu'):\n            self.open_recent_project('BFT_21_Stage1/test_video_collage_designer_func_12_42.pdk', 'test_produce_func_13_1')\n\n        with step('[Action] Click [Browse] on [Missing Dialog] and select file'):\n            project_new_page.open_project.file_missing.click_browse()\n            main_page.select_file(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')\n            time.sleep(DELAY_TIME*2)\n\n        with step('[Action] Set timecode to (00:00:11:23)'):\n            main_page.set_timecode('00_00_11_23')\n\n        with step('[Action] Screenshot and compare with GT (similarity=0.9)'):\n            screenshot_path = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L389.png')\n            comparison_result = main_page.compare(screenshot_path, Ground_Truth_Folder + 'L389.png', similarity=0.9)\n            if comparison_result < 0.9:\n                assert False, f\"Similarity is below the expected value. Expected > 0.9, but got {comparison_result}\"\n        assert True"
    },
    {
        "name": "test_produce_func_13_2",
        "tags": [
            "produce_func"
        ],
        "marked_name": "[test_produce_func_13_2] Verify Produce Page and File Extension Selection",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Produce] Button and Check Enter [Produce] Page",
            "2. Select [File Extenstion] to (m2ts)",
            "3. Check if the selected file extension is (M2TS)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.name('[test_produce_func_13_2] Verify Produce Page and File Extension Selection')\n    def test_produce_func_13_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Produce] Button and Check Enter [Produce] Page\n        2. Select [File Extenstion] to (m2ts)\n        3. Check if the selected file extension is (M2TS)\n        '''\n# 確保依賴測試已經執行並且通過\n        dependency_test = \"test_produce_func_13_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L390] 5. Produce > H.264 AVC > Format : M2TS\n        # with uuid(\"96a3cc91-a4f0-40ea-a95c-92238604beca\") as case:\n\n        with step('[Action] Click [Produce] Button and Check Enter [Produce] Page'):\n            main_page.click_produce()\n            if not produce_page.check_enter_produce_page():\n                assert False, \"[Produce] Page did not open!\"\n\n        with step('[Action] Select [File Extension] to (m2ts)'):\n            produce_page.local.select_file_extension('m2ts')\n\n        with step('[Verify] Check if the selected file extension is (M2TS)'):\n            selected_extension = main_page.exist(L.produce.local.cbx_file_extension).AXTitle\n            if selected_extension != 'M2TS':\n                assert False, f\"File extension is not correct! Expected: M2TS, Actual: {selected_extension}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_3",
        "tags": [
            "produce_func",
            "produce_page",
            "profile_name"
        ],
        "marked_name": "[test_produce_func_13_3] Set [Profile Name]",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select profile name to (AVC 1280 x 720/24p (16 Mbps))(3)",
            "2. Check profile name is (AVC 1280 x 720/24p (16 Mbps))"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce_page\n    @pytest.mark.profile_name\n    @pytest.mark.name('[test_produce_func_13_3] Set [Profile Name]')\n    def test_produce_func_13_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select profile name to (AVC 1280 x 720/24p (16 Mbps))(3)\n        2. Check profile name is (AVC 1280 x 720/24p (16 Mbps))\n        '''\ndependency_test = \"test_produce_func_13_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L391] 5. Produce > H.264 > Format : 1280x720/24p\n        # with uuid(\"88eaa322-c562-42ae-aa49-9546031d7ab7\") as case:\n\n        with step('[Action] Select profile name to (AVC 1280 x 720/24p (16 Mbps))'):\n            produce_page.local.select_profile_name(3)\n\n        with step('[Verify] Check profile name is (AVC 1280 x 720/24p (16 Mbps))'):\n            current_profile = produce_page.Local.get_profile_name()\n            assert current_profile == \"AVC 1280 x 720/24p (16 Mbps)\", \\\n                f\"Profile name mismatch! Expected: AVC 1280 x 720/24p (16 Mbps), Got: {current_profile}\"\n\n        # Get produced file name\n        EXPLORE_FILE = produce_page.get_produced_filename()\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_4",
        "tags": [
            "produce_func",
            "produce",
            "fast_video_rendering_technology"
        ],
        "marked_name": "[test_produce_func_13_4] Set and check Fast Video Rendering Technology to Hardware",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Fast Video Rendering Technology] to (Hardware)",
            "2. Check if the [Fast Video Rendering Technology] is set to (Hardware)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.fast_video_rendering_technology\n    @pytest.mark.name('[test_produce_func_13_4] Set and check Fast Video Rendering Technology to Hardware')\n    def test_produce_func_13_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Fast Video Rendering Technology] to (Hardware)\n        2. Check if the [Fast Video Rendering Technology] is set to (Hardware)\n        '''\ndependency_test = \"test_produce_func_13_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L392] 5. Produce > H.264 > Select encode type (HW)\n        # with uuid(\"f59de452-91d4-44c6-967e-f20638dbfe2f\") as case:\n\n        with step('[Action] Set [Fast Video Rendering Technology] to (Hardware)'):\n            produce_page.Local.set_fast_video_rendering_hardware_encode()\n\n        with step('[Verify] Check if the [Fast Video Rendering Technology] is set to (Hardware)'):\n            status = produce_page.Local.get_fast_video_rendering_hardware_encode_status()\n            assert status, f\"Expected Fast Video Rendering Technology to be True, but got {status}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_5",
        "tags": [
            "produce_func",
            "produce",
            "check_upload_copy_to_cl"
        ],
        "marked_name": "[test_produce_func_13_5] Enable [Check Upload Copy to CyberLink Cloud]",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Check Upload Copy to CyberLink Cloud] to (Yes)(1)",
            "2. Check if the [Check Upload Copy to CyberLink Cloud] is set to (Yes)(True)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.check_upload_copy_to_cl\n    @pytest.mark.name('[test_produce_func_13_5] Enable [Check Upload Copy to CyberLink Cloud]')\n    def test_produce_func_13_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Check Upload Copy to CyberLink Cloud] to (Yes)(1)\n        2. Check if the [Check Upload Copy to CyberLink Cloud] is set to (Yes)(True)\n        '''\ndependency_test = \"test_produce_func_13_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L393] 5. Produce > H.264 > Upload a copy to Cloud\n        # with uuid(\"d3b1d266-84a5-4c43-9c48-5d73b14f6fd1\") as case:\n\n        with step('[Action] Set [Check Upload Copy to CyberLink Cloud] to (Yes)'):\n            produce_page.Local.set_check_upload_copy_to_cyberlink_cloud(is_check=1)\n\n        with step('[Verify] Check if the [Check Upload Copy to CyberLink Cloud] is set to (Yes)'):\n            status = produce_page.Local.check_visible_upload_copy_to_cyberlink_cloud()\n            assert status, f\"Upload Copy to CyberLink Cloud setting is not enabled as expected! Expected: True, Got: {status}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_6",
        "tags": [
            "produce_func",
            "produce",
            "timecode"
        ],
        "marked_name": "[test_produce_func_13_6] Set [timecode] to (last frame)",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set timecode to last frame (00:00:50:00)",
            "2. Check if the timecode is set to (00:00:39:00)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_produce_func_13_6] Set [timecode] to (last frame)')\n    def test_produce_func_13_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set timecode to last frame (00:00:50:00)\n        2. Check if the timecode is set to (00:00:39:00)\n        '''\ndependency_test = \"test_produce_func_13_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L394] 5. Produce > H.264 > Start [Produce] w/ handle (Convert to MP4 = No)\n        # with uuid(\"7849c8fe-7f00-4830-a9a3-bf15ffc129da\") as case:\n\n        with step('[Action] Set timecode to last frame (00:00:50:00)'):\n            produce_page.local.set_preview_timecode('00_00_50_00')\n\n        with step('[Verify] Check if the timecode is set to (00:00:39:00)'):\n            current_timecode = produce_page.get_preview_timecode()\n            if current_timecode != '00:00:39:00':\n                assert False, f\"Timecode is not correct! Expected: 00:00:39:00, Actual: {current_timecode}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_7",
        "tags": [
            "produce_func"
        ],
        "marked_name": "[test_produce_func_13_7] Start produce and verify completion within 60 seconds",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Start] Button to start produce",
            "2. Click (No)(0) on [Convert CyberLink Cloud Copy to MP4] dialog",
            "3. Check if the produce is complete in 60 seconds"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.name('[test_produce_func_13_7] Start produce and verify completion within 60 seconds')\n    def test_produce_func_13_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Start] Button to start produce\n        2. Click (No)(0) on [Convert CyberLink Cloud Copy to MP4] dialog\n        3. Check if the produce is complete in 60 seconds\n        '''\ndependency_test = \"test_produce_func_13_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Click [Start] Button to start produce'):\n            produce_page.exist_click(L.produce.btn_start_produce)\n\n        with step('[Action] Click (No) on [Convert CyberLink Cloud Copy to MP4] dialog'):\n            produce_page.local.click_option_convert_cyberlink_cloud_copy_to_mp4_dialog(option=0)\n\n        with step('[Verify] Check if the produce is complete in 60 seconds'):\n            assert produce_page.check_produce_complete(), \"Produce is not complete within 60 seconds\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_8",
        "tags": [
            "produce_func",
            "produce",
            "search_library"
        ],
        "marked_name": "[test_produce_func_13_8] Check Produced media show in library and able to select",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Check [Back] button show on [Produce] page after produce complete in (40) secs",
            "2. Click [Back] button on [Produce] page after produce complete",
            "3. Check able to Select media by library icon view with Explore_file"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_produce_func_13_8] Check Produced media show in library and able to select')\n    def test_produce_func_13_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Check [Back] button show on [Produce] page after produce complete in (40) secs\n        2. Click [Back] button on [Produce] page after produce complete\n        3. Check able to Select media by library icon view with Explore_file\n        '''\ndependency_test = \"test_produce_func_13_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Verify] Check [Back] button show on [Produce] page after produce complete in (40) secs'):\n            if not produce_page.Local.check_back_btn_shows_on_upload_to_cyberlink_cloud_in_secs(wait_time=40):\n                assert False, \"Back button did not show on Produce page within 40 seconds after produce complete\"\n\n        with step('[Action] Click [Back] button on [Produce] page after produce complete'):\n            produce_page.Local.click_back_btn_on_produce_page_after_upload()\n\n        with step('[Verify] Check able to select media by library icon view with Explore_file'):\n            main_page.select_library_icon_view_media(EXPLORE_FILE) # will excpetion if not found\n                \n        assert True"
    },
    {
        "name": "test_produce_func_13_9",
        "tags": [
            "produce_func",
            "import_media",
            "cyberlink_cloud",
            "produced_media"
        ],
        "marked_name": "[test_produce_func_13_9] Import and remove downloaded media then verify preview change",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Import media from CyberLink Cloud",
            "2. Select content in folder level (folder_index=0, click_times=2)",
            "3. Input text in search library ({EXPLORE_FILE})",
            "4. Tap [Select All] button",
            "5. Check if the [Remove] button is enabled (True)",
            "6. Screenshot (L.import_downloaded_media_from_cl.downloaded_media_window)",
            "7. Tap [Remove] button",
            "8. Check if preview changed",
            "9. Close [Downloaded Media] Window"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.import_media\n    @pytest.mark.cyberlink_cloud\n    @pytest.mark.produced_media\n    @pytest.mark.name('[test_produce_func_13_9] Import and remove downloaded media then verify preview change')\n    def test_produce_func_13_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Import media from CyberLink Cloud\n        2. Select content in folder level (folder_index=0, click_times=2)\n        3. Input text in search library ({EXPLORE_FILE})\n        4. Tap [Select All] button\n        5. Check if the [Remove] button is enabled (True)\n        6. Screenshot (L.import_downloaded_media_from_cl.downloaded_media_window)\n        7. Tap [Remove] button\n        8. Check if preview changed\n        9. Close [Downloaded Media] Window\n        '''\ndependency_test = \"test_produce_func_13_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Import media from CyberLink Cloud'):\n            media_room_page.import_media_from_cyberlink_cloud()\n\n        with step('[Action] Select content in folder level (folder_index=0, click_times=2)'):\n            import_media_from_cloud_page.select_content_in_folder_level(folder_index=0, click_times=2)\n\n        with step('[Action] Input text in search library ({EXPLORE_FILE})'):\n            import_media_from_cloud_page.input_text_in_seacrh_library(EXPLORE_FILE)\n\n        with step('[Action] Tap [Select All] button'):\n            import_media_from_cloud_page.tap_select_deselect_all_btn()\n\n        with step('[Verify] Check if the [Remove] button is enabled (True)'):\n            remove_status = import_media_from_cloud_page.get_remove_btn_status()\n            assert remove_status is True, \"Remove button is not enabled as expected\"\n\n        with step('[Action] Capture preview before removal'):\n            preview_before = main_page.snapshot(locator=L.import_downloaded_media_from_cl.downloaded_media_window)\n\n        with step('[Action] Tap [Remove] button'):\n            import_media_from_cloud_page.tap_remove_btn()\n\n        with step('[Verify] Check if preview changed'):\n            preview_after = main_page.snapshot(locator=L.import_downloaded_media_from_cl.downloaded_media_window)\n            if main_page.compare(preview_before, preview_after, similarity=0.98):\n                # Similarity should be less than 0.95 after removal\n                assert False, \"Preview did not change after removal! Similarity should < 0.98\"\n\n        with step('[Action] Close [Downloaded Media] Window'):\n            import_media_from_cloud_page.close_download_media_window()\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_10",
        "tags": [
            "produce_func",
            "play_video",
            "produced_media"
        ],
        "marked_name": "[test_produce_func_13_10] Play Produced video",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select media (EXPLORE_FILE) by library icon view",
            "2. Click [Play] button in playback window",
            "3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)",
            "4. Click [Stop] button in playback window"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.play_video\n    @pytest.mark.produced_media\n    @pytest.mark.name('[test_produce_func_13_10] Play Produced video')\n    def test_produce_func_13_10(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select media (EXPLORE_FILE) by library icon view\n        2. Click [Play] button in playback window\n        3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)\n        4. Click [Stop] button in playback window\n        '''\ndependency_test = \"test_produce_func_13_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L395] 5. Produce > Playback produced clip\n        # with uuid(\"5143f3c6-d5a5-4414-90ff-f4bdb3722454\") as case:\n\n        with step('[Action] Select media by library icon view'):\n            main_page.select_library_icon_view_media(EXPLORE_FILE)\n\n        with step('[Action] Click Play button in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation('Play')\n\n        with step('[Verify] Check if preview window is different when playing'):\n            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=5)\n            if not preview_changed:\n                # Similarity should be > expected threshold\n                assert False, \"Preview is not updated when playing video in 5 secs!\"\n\n        with step('[Action] Click Stop button in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation('stop')\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_11",
        "tags": [
            "produce_func",
            "produced_media"
        ],
        "marked_name": "[test_produce_func_13_11] Set timecode, compare preview, and move clip to trash",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set timecode to (00:00:11:23)",
            "2. Screenshot (locator=main_page.area.preview.main) and compare with GT (L389.png) (similarity=0.93)",
            "3. Select media (EXPLORE_FILE) by library icon view and Move clip in library to trash can"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produced_media\n    @pytest.mark.name('[test_produce_func_13_11] Set timecode, compare preview, and move clip to trash')\n    def test_produce_func_13_11(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set timecode to (00:00:11:23)\n        2. Screenshot (locator=main_page.area.preview.main) and compare with GT (L389.png) (similarity=0.93)\n        3. Select media (EXPLORE_FILE) by library icon view and Move clip in library to trash can\n        '''\ndependency_test = \"test_produce_func_13_10\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set timecode to (00:00:11:23)'):\n            main_page.set_timeline_timecode('00_00_11_23')\n\n        with step('[Verify] Screenshot preview and compare with GT (L389.png)'):\n            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L389.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'L389.png', preview_snapshot, similarity=0.93)\n            if not check_preview:\n                # Similarity should be greater than 0.93\n                assert False, \"Preview does not match GT (L389.png)! Similarity should > 0.93\"\n\n        with step('[Action] Select media and move clip to trash can'):\n            main_page.select_library_icon_view_media(EXPLORE_FILE)\n            media_room_page.library_clip_context_menu_move_to_trash_can()\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_12",
        "tags": [
            "produce_func",
            "launch",
            "open_project",
            "timecode"
        ],
        "marked_name": "test_produce_func_13_12",
        "description": [
            "1. Start APP > Select Track (1)",
            "2. Open packed project ('Packed_Project/BFT_21_Stage1/test_produce_func_13_12_from_test_subtitle_room_func_25_1.pdk', 'Extracted_Folder/BFT_21_Stage1/test_produce_func_13_12')",
            "3. Set timecode ('00_00_11_04') at main page",
            "4. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L380.png') matches Ground Truth (Ground_Truth_Folder + 'L380.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.timecode\n    @pytest.mark.name(\"[test_produce_func_13_12] Verify preview match after opening packed project and setting timecode\")\n    def test_produce_func_13_12(self):\n    '''\n        1. Start APP > Select Track (1)\n        2. Open packed project ('Packed_Project/BFT_21_Stage1/test_produce_func_13_12_from_test_subtitle_room_func_25_1.pdk', 'Extracted_Folder/BFT_21_Stage1/test_produce_func_13_12')\n        3. Set timecode ('00_00_11_04') at main page\n        4. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L380.png') matches Ground Truth (Ground_Truth_Folder + 'L380.png') with similarity 0.95\n        '''\nwith step(\"[Action] Select Track 1 on timeline\"):\n            main_page.start_app()\n            main_page.timeline_select_track(1)\n\n\n        # [L380] 5. Produce > XAVCS > Open Saved project\n        # with uuid(\"8d2e8c7e-3108-4cfa-bcf8-bb37446caa2a\") as case:\n\n        with step(\"[Action] Open packed project\"):\n            self.open_packed_project(\n                \"Packed_Project/BFT_21_Stage1/test_produce_func_13_12_from_test_subtitle_room_func_25_1.pdk\",\n                \"Extracted_Folder/BFT_21_Stage1/test_produce_func_13_12\"\n            )\n\n        with step(\"[Action] Set timeline timecode to '00_00_11_04'\"):\n            main_page.set_timeline_timecode(\"00_00_11_04\", is_verify=True)\n\n        with step(\"[Verify] Check preview matches GT (L380.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + \"L380.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"L380.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (L380.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_13",
        "tags": [
            "produce_func",
            "produce_page",
            "profile_format",
            "profile_name"
        ],
        "marked_name": "test_produce_func_13_13",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_12') is run and passed",
            "1. Click [Produce] button and check [Produce] page show",
            "2. Select file format ('xavc_s') and get produced filename",
            "3. Check if produced file name is 'test_produce_func_13_12.mp4'",
            "4. Check if [Profile Type] combobox (L.produce.local.cbx_profile_type) exists"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce_page\n    @pytest.mark.profile_format\n    @pytest.mark.profile_name\n    @pytest.mark.name(\"[test_produce_func_13_13] Verify Produce page, file format selection, produced filename and profile type existence\")\n    def test_produce_func_13_13(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_12') is run and passed\n        1. Click [Produce] button and check [Produce] page show\n        2. Select file format ('xavc_s') and get produced filename\n        3. Check if produced file name is 'test_produce_func_13_12.mp4'\n        4. Check if [Profile Type] combobox (L.produce.local.cbx_profile_type) exists\n        '''\ndependency_test = \"test_produce_func_13_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L381] 5. Produce > XAVCS > Select [Format] > XAVCS\n        # with uuid(\"6c6e909c-0333-4047-8f90-926208a8dd2b\") as case:\n\n        with step(\"[Action] Click [Produce] button and verify Produce page is displayed\"):\n            main_page.click_produce()\n            if not produce_page.check_enter_produce_page():\n                assert False, \"[Produce] page did not open!\"\n\n        with step(\"[Action] Select file format 'xavc_s' and retrieve produced filename\"):\n            produce_page.local.select_file_format('xavc_s')\n            produced_filename = produce_page.get_produced_filename()\n\n        with step(\"[Verify] Check if produced filename is 'test_produce_func_13_12.mp4'\"):\n            if produced_filename != \"test_produce_func_13_12.mp4\":\n                assert False, f\"Produced filename mismatch! Expected 'test_produce_func_13_12.mp4', got '{produced_filename}'\"\n\n        with step(\"[Verify] Check if [Profile Type] combobox exists\"):\n            profile_combo = main_page.exist(L.produce.local.cbx_profile_type)\n            if not profile_combo:\n                assert False, \"[Profile Type] combobox does not exist!\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_14",
        "tags": [
            "produce_func",
            "profile_name"
        ],
        "marked_name": "[test_produce_func_13_14] Set and verify [Profile Name]",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_13') is run and passed",
            "1. Select [Profile Name] by index (2)",
            "2. Get [Profile Name] value",
            "3. Check if [Profile Name] is ('XAVC S 1280 x 720/30p (17 Mbps)')"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.profile_name\n    @pytest.mark.name('[test_produce_func_13_14] Set and verify [Profile Name]')\n    def test_produce_func_13_14(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_13') is run and passed\n        1. Select [Profile Name] by index (2)\n        2. Get [Profile Name] value\n        3. Check if [Profile Name] is ('XAVC S 1280 x 720/30p (17 Mbps)')\n        '''\ndependency_test = \"test_produce_func_13_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L382] 5. Produce > XAVCS > Select [Format] > 1280x720/30p (17Mbps)\n        # with uuid(\"a89579e5-7a01-4abb-948e-ff28e225df65\") as case:\n\n        with step('[Action] Select [Profile Name] by index (2)'):\n            produce_page.local.select_profile_name(2)\n\n        with step('[Action] Get [Profile Name] value'):\n            current_profile = produce_page.local.get_profile_name()\n\n        with step('[Verify] Check if [Profile Name] is (XAVC S 1280 x 720/30p (17 Mbps))'):\n            if current_profile != \"XAVC S 1280 x 720/30p (17 Mbps)\":\n                assert False, f\"Profile name mismatch! Expected: XAVC S 1280 x 720/30p (17 Mbps), Got: {current_profile}\"\n        assert True"
    },
    {
        "name": "test_produce_func_13_15",
        "tags": [
            "produce_func",
            "fast_video_rendering"
        ],
        "marked_name": "[test_produce_func_13_15] Disable Fast Video Rendering and verify Hardware Encode checkbox",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_14') is run and passed",
            "1. Disable [Fast Video Rendering]",
            "2. Check if the [Hardware Encode] checkbox (L.produce.local.rdb_fast_video_rendering_hardware_encode) is disabled"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.fast_video_rendering\n    @pytest.mark.name('[test_produce_func_13_15] Disable Fast Video Rendering and verify Hardware Encode checkbox')\n    def test_produce_func_13_15(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_14') is run and passed\n        1. Disable [Fast Video Rendering]\n        2. Check if the [Hardware Encode] checkbox (L.produce.local.rdb_fast_video_rendering_hardware_encode) is disabled\n        '''\ndependency_test = \"test_produce_func_13_14\"\n        self.ensure_dependency(dependency_test)\n\n        # [L383] 5. Produce > XAVCS > Select encode type > SW\n        # with uuid(\"65a87f83-cfe7-4064-8dfa-b15ea92952d6\") as case:\n\n        with step('[Action] Disable [Fast Video Rendering]'):\n            produce_page.local.set_fast_video_rendering(is_checked=0)\n\n        with step('[Verify] Check if the [Hardware Encode] checkbox is enabled'):\n            status = produce_page.local.get_fast_video_rendering_hardware_encode_status()\n            if status:\n                assert False, \"Hardware Encode checkbox should be disabled, but it is enabled!\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_16",
        "tags": [
            "produce_func",
            "surround_sound"
        ],
        "marked_name": "[test_produce_func_13_16] Enable Surround Sound and verify Theater option",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_15') is run and passed",
            "1. Enable [Surround Sound] > Set [Surround Sound] to (Theater) option",
            "2. Check if [Surround Turn Theater] button (L.produce.local.rdb_surround_sound_true_theater) value is Enabled (1)"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.surround_sound\n    @pytest.mark.name('[test_produce_func_13_16] Enable Surround Sound and verify Theater option')\n    def test_produce_func_13_16(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_15') is run and passed\n        1. Enable [Surround Sound] > Set [Surround Sound] to (Theater) option\n        2. Check if [Surround Turn Theater] button (L.produce.local.rdb_surround_sound_true_theater) value is Enabled (1)\n        '''\ndependency_test = \"test_produce_func_13_15\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L385] 5. Produce > XAVCS > Set [Surround Sound] > TT Surround\n        # with uuid(\"c459820f-964b-481b-b4c7-7cbfbea9eb3b\") as case:\n\n        with step('[Action] Enable [Surround Sound] > Set [Surround Sound] to (Theater) option'):\n            produce_page.local.set_surround_sound_true_theater_option_theater()\n\n        with step('[Verify] Check if [Surround Turn Theater] button is Enabled (1)'):\n            check_surround = main_page.exist(L.produce.local.rdb_surround_sound_true_theater).AXValue\n            if check_surround !=1:\n                assert False, f\"Expected Surround Turn Theater button to be enabled (1), but got {check_surround}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_17",
        "tags": [
            "produce_func",
            "produce"
        ],
        "marked_name": "[test_produce_func_13_17] Verify produced filename after selecting output folder",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_16') is run and passed",
            "1. If file exists (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4'), delete the folder (Test_Material_Folder + 'BFT_21_Stage1/produce')",
            "2. Click [Select Output Folder] button and select output folder (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4')",
            "3. Get produced filename",
            "4. Check if produced file name is ('L386_xavc.mp4')"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.name('[test_produce_func_13_17] Verify produced filename after selecting output folder')\n    def test_produce_func_13_17(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_16') is run and passed\n        1. If file exists (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4'), delete the folder (Test_Material_Folder + 'BFT_21_Stage1/produce')\n        2. Click [Select Output Folder] button and select output folder (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4')\n        3. Get produced filename\n        4. Check if produced file name is ('L386_xavc.mp4')\n        '''\ndependency_test = \"test_produce_func_13_16\"\n        self.ensure_dependency(dependency_test)\n\n        # [L386] 5. Produce > XAVCS > Set output folder and file name\n        # with uuid(\"0092cf6f-fc69-455b-b4f1-558b992e2ee5\") as case:\n\n        with step('[Action] Delete output folder if produced file exists'):\n            output_file = Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4'\n            output_folder = Test_Material_Folder + 'BFT_21_Stage1/produce'\n            if main_page.exist_file(output_file):\n                main_page.delete_folder(output_folder)\n\n        with step('[Action] Click [Select Output Folder] and select output folder'):\n            produce_page.select_output_folder(output_file)\n\n        with step('[Action] Get produced filename'):\n            produced_filename = produce_page.get_produced_filename()\n\n        with step('[Verify] Check produced filename is (L386_xavc.mp4)'):\n            if not produced_filename == \"L386_xavc.mp4\":\n                assert False, f\"Produced filename mismatch! Expected: L386_xavc.mp4, Got: {produced_filename}\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_18",
        "tags": [
            "produce_func",
            "produce",
            "check_upload_copy_to_cl"
        ],
        "marked_name": "[test_produce_func_13_18] Enable and verify [Upload Copy to CyberLink Cloud]",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_17') is run and passed",
            "1. Enable [Upload Copy to CyberLink Cloud]",
            "2. Check [Upload Copy to CyberLink Cloud] is visible"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.check_upload_copy_to_cl\n    @pytest.mark.name('[test_produce_func_13_18] Enable and verify [Upload Copy to CyberLink Cloud]')\n    def test_produce_func_13_18(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_17') is run and passed\n        1. Enable [Upload Copy to CyberLink Cloud]\n        2. Check [Upload Copy to CyberLink Cloud] is visible\n        '''\ndependency_test = \"test_produce_func_13_17\"\n        self.ensure_dependency(dependency_test)\n\n        # [L384] 5. Produce > XAVCS > Upload a copy to Cloud\n        # with uuid(\"ca0790d0-ef40-4058-b787-2e3ceaf5cbf3\") as case:\n\n        with step('[Action] Enable [Upload Copy to CyberLink Cloud]'):\n            produce_page.local.set_check_upload_copy_to_cyberlink_cloud(is_check=1)\n\n        with step('[Verify] Check [Upload Copy to CyberLink Cloud] is visible'):\n            visible_status = produce_page.local.check_visible_upload_copy_to_cyberlink_cloud()\n            if not visible_status:\n                assert False, \"Upload Copy to CyberLink Cloud is not visible as expected.\"\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_19",
        "tags": [
            "produce_func",
            "produce",
            "check_upload_copy_to_cl"
        ],
        "marked_name": "[test_produce_func_13_19] Start produce, verify completion, and select component",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_18') is run and passed",
            "1. Click [Start Produce]",
            "2. Click [Yes] button on [Convert CyberLink Cloud Copy to MP4] dialog",
            "3. Check [Produce] is completed in 600 times",
            "4. Check [Back to Edit] button (L.produce.btn_back_to_edit_after_upload_cl) is visible in 60 times after video upload to cloud",
            "5. Click [Back to Edit] button",
            "6. Select component ('L386_xavc.mp4') from library icon view and check result"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.check_upload_copy_to_cl\n    @pytest.mark.name('[test_produce_func_13_19] Start produce, verify completion, and select component')\n    def test_produce_func_13_19(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_18') is run and passed\n        1. Click [Start Produce]\n        2. Click [Yes] button on [Convert CyberLink Cloud Copy to MP4] dialog\n        3. Check [Produce] is completed in 600 times\n        4. Check [Back to Edit] button (L.produce.btn_back_to_edit_after_upload_cl) is visible in 60 times after video upload to cloud\n        5. Click [Back to Edit] button\n        6. Select component ('L386_xavc.mp4') from library icon view and check result\n        '''\ndependency_test = \"test_produce_func_13_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L387] 5. Produce > XAVCS > Start Produce\n        # with uuid(\"15d3cb75-1abf-4e44-bfbe-9602f92cf5fb\") as case:\n\n        with step('[Action] Click [Start Produce]'):\n            produce_page.click_start()\n\n        with step('[Action] Click [Yes] button on [Convert CyberLink Cloud Copy to MP4] dialog'):\n            produce_page.local.click_option_convert_cyberlink_cloud_copy_to_mp4_dialog(option=1)\n\n        with step('[Verify] Check [Produce] is completed in 600 secs'):\n            if not produce_page.check_produce_complete(wait_time=600):\n                assert False, \"Produce did not complete within 600 seconds\"\n\n        with step('[Verify] Check [Back to Edit] button is visible in 60 seconds after video upload to cloud'):\n            if not produce_page.local.check_back_btn_shows_on_upload_to_cyberlink_cloud_in_secs(wait_time=60):\n                assert False, \"Back to Edit button did not appear within 60 seconds after video upload to cloud\"\n\n        with step('[Action] Click [Back to Edit] button'):\n            produce_page.local.click_back_btn_on_produce_page_after_upload()\n\n        with step('[Action] Select component (L386_xavc.mp4) from library icon view and check result'):\n            if not main_page.select_library_icon_view_media('L386_xavc.mp4'):\n                assert False, 'Failed to select component \"L386_xavc.mp4\" from library icon view'\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_20",
        "tags": [
            "produce_func",
            "produce",
            "check_upload_copy_to_cl"
        ],
        "marked_name": "[test_produce_func_13_20] Import and remove downloaded media then verify preview change",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_19') is run and passed",
            "1. Import media from [CyberLink Cloud]",
            "2. Select content in folder level (folder_index=0, click_times=2)",
            "3. Input text ('L386_xavc') in search library at cloud page",
            "4. Tap [Select] All button",
            "5. Check if [Remove] button is enabled",
            "6. Click [Remove] button",
            "7. Click [Close] button to leave [Download media from CyberLink Cloud] window"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produce\n    @pytest.mark.check_upload_copy_to_cl\n    @pytest.mark.name('[test_produce_func_13_20] Import and remove downloaded media then verify preview change')\n    def test_produce_func_13_20(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_19') is run and passed\n        1. Import media from [CyberLink Cloud]\n        2. Select content in folder level (folder_index=0, click_times=2)\n        3. Input text ('L386_xavc') in search library at cloud page\n        4. Tap [Select] All button\n        5. Check if [Remove] button is enabled\n        6. Click [Remove] button\n        7. Click [Close] button to leave [Download media from CyberLink Cloud] window\n        '''\ndependency_test = \"test_produce_func_13_19\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Import media from [CyberLink Cloud]'):\n            media_room_page.import_media_from_cyberlink_cloud()\n\n        with step('[Action] Select content in folder level (folder_index=0, click_times=2)'):\n            import_media_from_cloud_page.select_content_in_folder_level(folder_index=0, click_times=2)\n\n        with step('[Action] Input text (\"L386_xavc\") in search library'):\n            import_media_from_cloud_page.input_text_in_seacrh_library('L386_xavc')\n\n        with step('[Action] Tap [Select] All button'):\n            import_media_from_cloud_page.tap_select_deselect_all_btn()\n\n        with step('[Verify] Check if [Remove] button is enabled'):\n            remove_status = import_media_from_cloud_page.get_remove_btn_status()\n            if not remove_status:\n                assert False, \"Remove button is not enabled as expected\"\n\n        with step('[Action] Click [Remove] button'):\n            import_media_from_cloud_page.tap_remove_btn()\n\n        with step('[Action] Click [Close] button to leave [Download media from CyberLink Cloud] window'):\n            import_media_from_cloud_page.close_download_media_window()\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_21",
        "tags": [
            "produce_func",
            "play_video",
            "produced_media"
        ],
        "marked_name": "[test_produce_func_13_21] Play Produced video",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select media ('L386_xavc.mp4') by library icon view",
            "2. Click [Play] button in playback window",
            "3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)",
            "4. Click [Stop] button in playback window"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.play_video\n    @pytest.mark.produced_media\n    @pytest.mark.name('[test_produce_func_13_21] Play Produced video')\n    def test_produce_func_13_21(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select media ('L386_xavc.mp4') by library icon view\n        2. Click [Play] button in playback window\n        3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)\n        4. Click [Stop] button in playback window\n        '''\ndependency_test = \"test_produce_func_13_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L388] 5. Produce > XAVCS > Playback produced clip\n        # with uuid(\"b8960b0f-b0f8-4451-b163-12501bca2c9c\") as case:\n\n        with step('[Action] Select media by library icon view'):\n            main_page.select_library_icon_view_media('L386_xavc.mp4')\n\n        with step('[Action] Click Play button in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation('Play')\n\n        with step('[Verify] Check if preview window is different when playing'):\n            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=5)\n            if not preview_changed:\n                # Similarity should be > expected threshold\n                assert False, \"Preview is not updated when playing video in 5 secs!\"\n\n        with step('[Action] Click Stop button in playback window'):\n            playback_window_page.Edit_Timeline_PreviewOperation('stop')\n\n        assert True"
    },
    {
        "name": "test_produce_func_13_22",
        "tags": [
            "produce_func",
            "produced_media"
        ],
        "marked_name": "[test_produce_func_13_22] Select component, set timecode and verify preview",
        "description": [
            "0. Ensure the dependency test ('test_produce_func_13_20') is run and passed",
            "1. Select component ('L386_xavc.mp4') from library icon view",
            "2. Set timecode to ('00_00_55_11') at main page",
            "3. Check preview (locator=main_page.area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L388.png') matches GT (Ground_Truth_Folder + 'L388.png') with similarity 0.9"
        ],
        "full_code": "@pytest.mark.produce_func\n    @pytest.mark.produced_media\n    @pytest.mark.name('[test_produce_func_13_22] Select component, set timecode and verify preview')\n    def test_produce_func_13_22(self):\n    '''\n        0. Ensure the dependency test ('test_produce_func_13_20') is run and passed\n        1. Select component ('L386_xavc.mp4') from library icon view\n        2. Set timecode to ('00_00_55_11') at main page\n        3. Check preview (locator=main_page.area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L388.png') matches GT (Ground_Truth_Folder + 'L388.png') with similarity 0.9\n        '''\ndependency_test = \"test_produce_func_13_21\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set timecode to (00_00_55_11) at main page'):\n            main_page.set_timeline_timecode('00_00_55_11', is_verify=True)\n\n        with step('[Verify] Check preview matches GT (L388.png) with similarity 0.9'):\n            preview_snapshot = main_page.snapshot(\n                locator=main_page.area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L388.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L388.png', preview_snapshot, similarity=0.9):\n                assert False, \"Preview does not match Ground Truth (L388.png)! Similarity should > 0.9\"\n\n        assert True\n\n\n    # 8 uuid"
    },
    {
        "name": "test_new_project_func_14_1",
        "tags": [
            "new_project_func",
            "launch",
            "open_project",
            "import_media",
            "my_project"
        ],
        "marked_name": "[test_new_project_func_14_1] Check content in [My Project] after open packed project",
        "description": [
            "1. Launch APP and enter My project and screenshot (locator=main_page.area.library_icon_view)",
            "2. Open Packed project (Test_Material_Folder + 'BFT_21_Stage1/can_del.pdk')",
            "3. Enter My project and screenshot (locator=main_page.area.library_icon_view)",
            "4. Check the similarity between 2 screenshots is 0.82~0.999",
            "5. Close and restart the app"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.import_media\n    @pytest.mark.my_project\n    @pytest.mark.name('[test_new_project_func_14_1] Check content in [My Project] after open packed project')\n    def test_new_project_func_14_1(self):\n    '''\n        1. Launch APP and enter My project and screenshot (locator=main_page.area.library_icon_view)\n        2. Open Packed project (Test_Material_Folder + 'BFT_21_Stage1/can_del.pdk')\n        3. Enter My project and screenshot (locator=main_page.area.library_icon_view)\n        4. Check the similarity between 2 screenshots is 0.82~0.999\n        5. Close and restart the app\n        '''\n# [L47] 2.1 Media Room > My Project > Open \n        # with uuid(\"30dd64f8-7edd-4a15-a3a0-61f667a3b5fc\") as case:\n\n        with step('[Action] Launch APP and enter My project'):\n            main_page.start_app()\n            main_page.enter_project_room()\n            first_screenshot = main_page.snapshot(locator=main_page.area.library_icon_view)\n\n        with step('[Action] Open Packed project'):\n            self.open_packed_project('Packed_Project/can_del.pdk', 'Extracted_Folder/test_new_project_func_14_1')\n\n        with step('[Action] Enter My project again and take screenshot'):\n            main_page.enter_project_room()\n            second_screenshot = main_page.snapshot(locator=main_page.area.library_icon_view)\n\n        with step('[Verify] Check preview changed and similarity within 0.82~0.999'):\n            should_update = main_page.compare(first_screenshot, second_screenshot, similarity=0.82)\n            if not should_update:\n                # Similarity should be greater than 0.82\n                assert False, \"Preview did not change after opening packed project! Similarity should > 0.82\"\n            should_not_the_same = main_page.compare(first_screenshot, second_screenshot, similarity=0.999)\n            if should_not_the_same:\n                # Similarity should be less than 0.999\n                assert False, \"Preview did not change after opening packed project! Similarity should < 0.999\"\n\n        # Step 5: Close and restart the app\n        with step('[Action] Close and restart the app'):\n            main_page.close_and_restart_app()\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_2",
        "tags": [
            "new_project_func",
            "my_project",
            "timeline"
        ],
        "marked_name": "[test_new_project_func_14_2] Insert Project to selected track and check preview update",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter My Project",
            "2. Select media project ('can_del') by library icon view and screenshot (locator=L.timeline_operation.workspace)",
            "3. Insert Project to selected track",
            "4. Select timeline track 2 and check preview update"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.my_project\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_new_project_func_14_2] Insert Project to selected track and check preview update')\n    def test_new_project_func_14_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter My Project\n        2. Select media project ('can_del') by library icon view and screenshot (locator=L.timeline_operation.workspace)\n        3. Insert Project to selected track\n        4. Select timeline track 2 and check preview update\n        '''\n# Ensure the dependency test is run and passed\n        dependency_test = \"test_new_project_func_14_1\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L51] 2.1 Media Room > My Project > Nested project editing\n        # with uuid(\"811ecd35-7548-48d3-8f55-9d25ad29d0f9\") as case:\n\n        with step('[Action] Enter My Project'):\n            project_room_page.enter_project_room()\n\n        # Step 2: Select media project ('can_del') by library icon view and screenshot\n        with step('[Action] Select media project and take screenshot'):\n            main_page.select_library_icon_view_media('can_del')\n            initial_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)\n\n        # Step 3: Insert Project to selected track\n        with step('[Action] Insert Project to selected track'):\n            project_room_page.tips_area_insert_project_to_selected_track()\n\n        # Step 4: Select timeline track 2 and check preview update\n        with step('[Action] Select timeline track 2'):\n            main_page.timeline_select_track(2)\n        \n        with step('[Verify] Check preview update'):\n            updated_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)\n            if main_page.compare(initial_workspace_snapshot, updated_workspace_snapshot, similarity=0.95):\n                # Similarity should be less than 0.95 for preview update\n                assert False, \"Preview update not detected! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_3",
        "tags": [
            "new_project_func",
            "timeline",
            "sample_media"
        ],
        "marked_name": "[test_new_project_func_14_3] Click [View Entire Video] and insert media",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select timeline track 1",
            "2. Click [View Entire Video] and screenshot (locator=L.timeline_operation.workspace)",
            "3. Enter [Media Content]",
            "4. Select media (Landscape 01.jpg) by library icon view",
            "5. Right Click and select (Insert on Selected Track) on right click menu",
            "6. Click the [View Entire Video] button and check preview update"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.timeline\n    @pytest.mark.sample_media\n    @pytest.mark.name('[test_new_project_func_14_3] Click [View Entire Video] and insert media')\n    def test_new_project_func_14_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select timeline track 1\n        2. Click [View Entire Video] and screenshot (locator=L.timeline_operation.workspace)\n        3. Enter [Media Content]\n        4. Select media (Landscape 01.jpg) by library icon view\n        5. Right Click and select (Insert on Selected Track) on right click menu\n        6. Click the [View Entire Video] button and check preview update\n        '''\ndependency_test = \"test_new_project_func_14_2\"\n        self.ensure_dependency(dependency_test)\n        \n        with step('[Action] Select timeline track 1'):\n            main_page.timeline_select_track(1)\n\n        with step('[Action] Click [View Entire Video] and take screenshot'):\n            # Click [View Entire Video]\n            timeline_operation_page.click_view_entire_video_btn()\n            initial_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)\n\n        with step('[Action] Enter [Media Content]'):\n            media_room_page.enter_media_content()\n\n        with step('[Action] Select media (Landscape 01.jpg) by library icon view'):\n            main_page.select_library_icon_view_media('Landscape 01.jpg')\n\n        with step('[Action] Right Click and select (Insert on Selected Track)'):\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Insert on Selected Track\")\n\n        with step('[Action] Click [View Entire Video] and check preview update'):\n            timeline_operation_page.click_view_entire_video_btn()\n            updated_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)\n            if main_page.compare(initial_workspace_snapshot, updated_workspace_snapshot, similarity=0.95):\n                # Similarity should be less than 0.95 for updated preview\n                assert False, \"Preview did not update after inserting media! Similarity should < 0.95\"\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_4",
        "tags": [
            "new_project_func",
            "timecode",
            "aspect_ratio"
        ],
        "marked_name": "test_new_project_func_14_4",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Project Aspect Ratio] to (4:3)",
            "2. Set main page timecode to (00:00:08:00)",
            "3. Screenshot (locator=main_page.area.preview.main) and compare with GT (L53.png) (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.timecode\n    @pytest.mark.aspect_ratio\n    @pytest.mark.name(\"[test_new_project_func_14_4] Verify main page preview matches GT after aspect ratio and timecode update\")\n    def test_new_project_func_14_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Project Aspect Ratio] to (4:3)\n        2. Set main page timecode to (00:00:08:00)\n        3. Screenshot (locator=main_page.area.preview.main) and compare with GT (L53.png) (similarity=0.95)\n        '''\ndependency_test = \"test_new_project_func_14_3\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L53] 2.1 Media Room > Insert clip to timeline & preview (4:3)\n        # with uuid(\"167d01d3-97d1-4ca7-95df-36bdaff67a08\") as case:\n\n        with step(\"[Action] Set [Project Aspect Ratio] to (4:3)\"):\n            main_page.set_project_aspect_ratio_4_3()\n        \n        with step(\"[Action] Set main page timecode to (00:00:08:00)\"):\n            main_page.set_timeline_timecode(\"00:00:08:00\")\n        \n        with step(\"[Verify] Screenshot preview and compare with GT (L53.png)\"):\n            current_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + \"L53.png\")\n            check_preview = main_page.compare(Ground_Truth_Folder + \"L53.png\", current_preview, similarity=0.95)\n            if not check_preview:\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match Ground Truth (L53.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_new_project_func_14_5",
        "tags": [
            "new_project_func",
            "timeline"
        ],
        "marked_name": "test_new_project_func_14_5",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click preview operation [Stop] in playback window",
            "2. Select timeline track 2 and screenshot (locator=L.timeline_operation.workspace)",
            "3. Select media (Mahoroba.mp3) by library icon view",
            "4. Insert media to selected track",
            "5. Check preview updated"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.timeline\n    @pytest.mark.name(\"[test_new_project_func_14_5] Insert media from library and verify preview update\")\n    def test_new_project_func_14_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click preview operation [Stop] in playback window\n        2. Select timeline track 2 and screenshot (locator=L.timeline_operation.workspace)\n        3. Select media (Mahoroba.mp3) by library icon view\n        4. Insert media to selected track\n        5. Check preview updated\n        '''\n# [L52] 2.1 Media Room > Insert clip to timeline & preview > Able to insert clip to selected track\n        # with uuid(\"d52b3eed-f381-4384-8166-cfa75b44b373\") as case:\n\n        dependency_test = \"test_new_project_func_14_4\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Click preview operation [Stop] in playback window\"):\n            playback_window_page.Edit_Timeline_PreviewOperation('stop')\n        \n        with step(\"[Action] Select timeline track 2 and screenshot workspace\"):\n            main_page.timeline_select_track(2)\n            before_preview = main_page.snapshot(locator=L.timeline_operation.workspace)\n        \n        with step('[Action] Select media (Mahoroba.mp3) by library icon view'):\n            main_page.select_library_icon_view_media(\"Mahoroba.mp3\")\n\n        with step(\"[Action] Insert media to selected track\"):\n            main_page.tips_area_insert_media_to_selected_track()\n        \n        with step(\"[Verify] Check preview updated\"):\n            after_preview = main_page.snapshot(locator=L.timeline_operation.workspace)\n            if main_page.compare(before_preview, after_preview, similarity=0.98):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after inserting media! Similarity should < 0.98\"\n        \n        assert True"
    },
    {
        "name": "test_new_project_func_14_5",
        "tags": [
            "new_project_func",
            "custom_tag"
        ],
        "marked_name": "[test_new_project_func_14_5] Add/ Delete Custom Tag",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter My Project",
            "2. Add new tag with name (auto_Testing_project_tag)",
            "3. Select media (can_del) by library icon view",
            "4. Right Click and select [Add to custom tag] on right click menu and check if the tag is added",
            "5. Delete tag (auto_Testing_project_tag) by right click and check if the tag is deleted"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.custom_tag\n    @pytest.mark.name('[test_new_project_func_14_5] Add/ Delete Custom Tag')\n    def test_new_project_func_14_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter My Project\n        2. Add new tag with name (auto_Testing_project_tag)\n        3. Select media (can_del) by library icon view\n        4. Right Click and select [Add to custom tag] on right click menu and check if the tag is added\n        5. Delete tag (auto_Testing_project_tag) by right click and check if the tag is deleted\n        '''\ndependency_test = \"test_new_project_func_14_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L49] 2.1 Media Room > My Project > Context menu > Add to tag fine\n        # with uuid(\"662a20c0-623c-4131-9a3f-fc76be83780e\") as case:\n        with step('[Action] Enter My Project'):\n            project_room_page.enter_project_room()\n\n        with step('[Action] Add new tag with name auto_Testing_project_tag'):\n            media_room_page.add_new_tag('auto_Testing_project_tag')\n\n        with step('[Action] Select media \"can_del\" by library icon view'):\n            main_page.select_library_icon_view_media(\"can_del\")\n\n        with step('[Action] Right Click and select [Add to custom tag] on right click menu'):\n            main_page.right_click()\n            tag_added = main_page.select_right_click_menu(\"Add to custom tag\", 'auto_Testing_project_tag')\n            if not tag_added:\n                assert False, \"Failed to add custom tag: auto_Testing_project_tag\"\n\n        with step('[Action] Delete tag auto_Testing_project_tag by right click'):\n            deletion_success = media_room_page.right_click_delete_tag(\"auto_Testing_project_tag\", count=1)\n            if not deletion_success:\n                assert False, \"Failed to delete tag: auto_Testing_project_tag\"\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_6",
        "tags": [
            "new_project_func",
            "timeline",
            "show_timeline_preview_volume_meter"
        ],
        "marked_name": "[test_new_project_func_14_6] Enable/ Disable [Show Timeline Preview Volume Meter]",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select timeline track 2 and Screenshot (locator=L.base.Area.preview.main)",
            "2. Enable [Show Timeline Preview Volume Meter] from top menu bar and check preview update",
            "3. Click [Play] button in playback window > wait for 7 seconds > Click [Stop] button in playback window",
            "4. Check preview is as step 2",
            "5. Disable [Show Timeline Preview Volume Meter] from top menu bar and check preview is as step 1"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.timeline\n    @pytest.mark.show_timeline_preview_volume_meter\n    @pytest.mark.name('[test_new_project_func_14_6] Enable/ Disable [Show Timeline Preview Volume Meter]')\n    def test_new_project_func_14_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select timeline track 2 and Screenshot (locator=L.base.Area.preview.main)\n        2. Enable [Show Timeline Preview Volume Meter] from top menu bar and check preview update\n        3. Click [Play] button in playback window > wait for 7 seconds > Click [Stop] button in playback window\n        4. Check preview is as step 2\n        5. Disable [Show Timeline Preview Volume Meter] from top menu bar and check preview is as step 1\n        '''\ndependency_test = \"test_new_project_func_14_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L56] 2.1 Media Room > Insert clip to timeline & preview > Enable volume meter (form View menu)\n        # with uuid(\"520dee77-bb49-428a-8477-dcaf33324820\") as case:\n\n        with step('[Action] Select timeline track 2 and take initial screenshot'):\n            main_page.timeline_select_track(2)\n            initial_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n\n        with step('[Action] Enable timeline preview volume meter and capture updated preview'):\n            main_page.top_menu_bar_view_show_timeline_preview_volume_meter()\n            volume_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n            # Verify preview is updated: similarity should be less than 0.95\n            if main_page.compare(volume_preview, initial_preview, similarity=0.95):\n                assert False, \"Preview did not update after enabling volume meter! Similarity should < 0.95\"\n\n        with step('[Action] Play preview for 7 seconds then stop playback'):\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Play\")\n            time.sleep(DELAY_TIME*7)\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Stop\")\n\n        with step('[Verify] Check preview remains as after volume meter enabled'):\n            preview_after_play = main_page.snapshot(locator=L.base.Area.preview.main)\n            # Verify preview matches volume enabled state: similarity should be greater than 0.95\n            if not main_page.compare(volume_preview, preview_after_play, similarity=0.95):\n                assert False, \"Preview does not match the volume meter enabled state after playback! Similarity should > 0.95\"\n\n        with step('[Action] Disable timeline preview volume meter and capture final preview'):\n            main_page.top_menu_bar_view_show_timeline_preview_volume_meter()\n            final_preview = main_page.snapshot(locator=L.base.Area.preview.main)\n            # Verify final preview matches initial state: similarity should be greater than 0.95\n            if not main_page.compare(initial_preview, final_preview, similarity=0.95):\n                assert False, \"Preview did not revert to initial state after disabling volume meter! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_7",
        "tags": [
            "new_project_func",
            "new_workspace"
        ],
        "marked_name": "[test_new_project_func_14_7] Open [New Workspace] by hotkey",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Media Content]",
            "2. Open [New Workspace] by hotkey and Handle [Do you want to save changes] dialog with (No)",
            "3. Check \"Use Sample Media\" String shows in media room"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.new_workspace\n    @pytest.mark.name('[test_new_project_func_14_7] Open [New Workspace] by hotkey')\n    def test_new_project_func_14_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Media Content]\n        2. Open [New Workspace] by hotkey and Handle [Do you want to save changes] dialog with (No)\n        3. Check \"Use Sample Media\" String shows in media room\n        '''\ndependency_test = \"test_new_project_func_14_6\"\n        self.ensure_dependency(dependency_test)\n\n        # [L54] 2.1 Media Room > Insert clip to timeline & preview > Project aspect ratio 9:16\n        # with uuid(\"9c2cb23c-3a2d-48f1-8a0a-178e7f0ffbba\") as case:\n\n        with step('[Action] Enter [Media Content]'):\n            media_room_page.enter_media_content()\n\n        with step('[Action] Open [New Workspace] via hotkey and handle save dialog (No)'):\n            main_page.tap_NewWorkspace_hotkey()\n            main_page.handle_no_save_project_dialog()\n\n        with step('[Verify] Check \"Use Sample Media\" string is shown in Media Room'):\n            if not main_page.exist(L.media_room.string_use_sample_media, timeout=7):\n                assert False, \"Use Sample Media not found in Media Room!\"\n        assert True"
    },
    {
        "name": "test_new_project_func_14_8",
        "tags": [
            "new_project_func",
            "aspect_ratio",
            "import_media",
            "timeline"
        ],
        "marked_name": "[test_new_project_func_14_8] Set aspect ratio 9:16, import and insert media, then verify preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Project Aspect Ratio] to (9:16)",
            "2. Import media (Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png') to library",
            "3. Select media (Sample.png) by library icon view",
            "4. Insert media to selected track from tip area",
            "5. Screenshot (locator=L.base.Area.preview.only_mtk_view) and compare with GT (Ground_Truth_Folder + 'L54.png') (similarity=0.93)"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.aspect_ratio\n    @pytest.mark.import_media\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_new_project_func_14_8] Set aspect ratio 9:16, import and insert media, then verify preview')\n    def test_new_project_func_14_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Project Aspect Ratio] to (9:16)\n        2. Import media (Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png') to library\n        3. Select media (Sample.png) by library icon view\n        4. Insert media to selected track from tip area\n        5. Screenshot (locator=L.base.Area.preview.only_mtk_view) and compare with GT (Ground_Truth_Folder + 'L54.png') (similarity=0.93)\n        '''\ndependency_test = \"test_previous_dependency\" \n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Set Project Aspect Ratio to 9:16'):\n            main_page.set_project_aspect_ratio_9_16()\n\n        with step('[Action] Import media Sample.png to library'):\n            media_room_page.import_media_file(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')\n\n        with step('[Action] Select media (Sample.png) by library icon view'):\n            main_page.select_library_icon_view_media('Sample.png')\n\n        with step('[Action] Insert media to selected track from tip area'):\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n\n\n        with step('[Verify] Screenshot preview and compare with GT (L54.png)'):\n            preview = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L54.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L54.png',\n                preview,\n                similarity=0.93\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.93\n                assert False, \"Preview does not match GT (L54.png)! Similarity should > 0.93\"\n\n        assert True"
    },
    {
        "name": "test_new_project_func_14_9",
        "tags": [
            "new_project_func",
            "new_workspace",
            "aspect_ratio",
            "import_media",
            "timeline"
        ],
        "marked_name": "[test_new_project_func_14_9] Open New Workspace, set aspect 1:1, import media, and verify preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Open [New Workspace] by hotkey and handle [Do you want to save changes] dialog with (No)",
            "2. Set [Project Aspect Ratio] to (1:1)",
            "3. Import media (Test_Material_Folder + 'Subtitle_Room/JPN.mp4') to library",
            "4. Select media (JPN.mp4) by library icon view",
            "5. Insert media to selected track from tip area",
            "6. Handle aspect ratio conflict dialog",
            "7. Set timecode to (00:00:28:03) at main page",
            "8. Screenshot (locator=main_page.area.preview.main) and compare with GT (Ground_Truth_Folder + 'L55.png') (similarity=0.94)"
        ],
        "full_code": "@pytest.mark.new_project_func\n    @pytest.mark.new_workspace\n    @pytest.mark.aspect_ratio\n    @pytest.mark.import_media\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_new_project_func_14_9] Open New Workspace, set aspect 1:1, import media, and verify preview')\n    def test_new_project_func_14_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Open [New Workspace] by hotkey and handle [Do you want to save changes] dialog with (No)\n        2. Set [Project Aspect Ratio] to (1:1)\n        3. Import media (Test_Material_Folder + 'Subtitle_Room/JPN.mp4') to library\n        4. Select media (JPN.mp4) by library icon view\n        5. Insert media to selected track from tip area\n        6. Handle aspect ratio conflict dialog\n        7. Set timecode to (00:00:28:03) at main page\n        8. Screenshot (locator=main_page.area.preview.main) and compare with GT (Ground_Truth_Folder + 'L55.png') (similarity=0.94)\n        '''\ndependency_test = \"test_previous_dependency\"\n        self.ensure_dependency(dependency_test)\n\n        # [L55] 2.1 Media Room > Insert clip to timeline & preview > Project aspect ratio 1:1\n        # with uuid(\"7a173798-3d3b-45e1-955d-1907aaf3c7dd\") as case:\n        with step('[Action] Open New Workspace via hotkey and handle save dialog (No)'):\n            main_page.tap_NewWorkspace_hotkey()\n            main_page.handle_no_save_project_dialog(option='no')\n\n        with step('[Action] Set Project Aspect Ratio to 1:1'):\n            main_page.set_project_aspect_ratio_1_1()\n\n        with step('[Action] Import media JPN.mp4 to library'):\n            media_path = Test_Material_Folder + 'Subtitle_Room/JPN.mp4'\n            media_room_page.import_media_file(media_path)\n\n        with step('[Action] Select media (JPN.mp4) by library icon view'):\n            main_page.select_library_icon_view_media('JPN.mp4')\n\n        with step('[Action] Insert media to selected track from tip area'):\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n\n        with step('[Action] Handle aspect ratio conflict dialog'):\n            main_page.handle_aspect_ratio_conflict()\n\n        with step('[Action] Set timecode to 00:00:28:03 at main page'):\n            main_page.set_timeline_timecode('00_00_28_03')\n\n        with step('[Verify] Screenshot preview and compare with GT (L55.png)'):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L55.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L55.png',\n                preview,\n                similarity=0.94\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.94\n                assert False, \"Preview does not match GT (L55.png)! Similarity should > 0.94\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_1",
        "tags": [
            "search_media_func",
            "launch",
            "search_library",
            "timecode"
        ],
        "marked_name": "[test_search_media_func_15_1] Search \"cybercoffee\" in Intro Room",
        "description": [
            "1. Clear cache and start APP",
            "2. Enter Intro Video Room",
            "3. Search conponent (\"cybercoffee\") in library with (intro_room=True)",
            "4. Set main page time code to (\"00_00_01_22\"), take screenshot (locator=L.base.Area.preview.only_mtk_view), and compare with GT (Ground_Truth_Folder + 'L194.png') (similarity=0.94)"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.launch\n    @pytest.mark.search_library\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_search_media_func_15_1] Search \"cybercoffee\" in Intro Room')\n    def test_search_media_func_15_1(self):\n    '''\n        1. Clear cache and start APP\n        2. Enter Intro Video Room\n        3. Search conponent (\"cybercoffee\") in library with (intro_room=True)\n        4. Set main page time code to (\"00_00_01_22\"), take screenshot (locator=L.base.Area.preview.only_mtk_view), and compare with GT (Ground_Truth_Folder + 'L194.png') (similarity=0.94)\n        '''\nwith step('[Action] Clear cache and start APP'):\n            main_page.clear_cache()\n            main_page.start_app()\n\n        with step('[Action] Enter Intro Video Room'):\n            intro_video_page.enter_intro_video_room()\n        \n        with step('[Action] Search conponent \"cybercoffee\" in library (intro_room=True)'):\n            media_room_page.search_library(\"cybercoffee\", intro_room=True)\n        \n        with step('[Action] Set main page time code to 00_00_01_22 and capture preview screenshot'):\n            main_page.set_timeline_timecode(\"00_00_01_22\")\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L194.png'\n            )\n        \n        with step('[Verify] Compare captured preview with GT (L194.png)'):\n            is_preview_correct = main_page.compare(\n                Ground_Truth_Folder + 'L194.png',\n                preview_snapshot,\n                similarity=0.94\n            )\n            if not is_preview_correct:\n                # Similarity should be greater than 0.94\n                assert False, \"Preview does not match GT (L194.png)! Similarity should > 0.94\"\n        \n        with step('[Initial] Back to Intro Room w/o search'):\n            main_page.click(L.intro_video_room.btn_library)\n        \n        assert True"
    },
    {
        "name": "test_search_media_func_15_2",
        "tags": [
            "search_media_func",
            "search_library"
        ],
        "marked_name": "[test_search_media_func_15_2] Search components with JPN/ CHT/ CHS in Intro Room",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Search conponent ('てんじんまつり') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)",
            "2. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)",
            "3. Search conponent ('冰島') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)",
            "4. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)",
            "5. Search conponent ('证书管理办法') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)",
            "6. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)",
            "7. Verify all 3 search results are different"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_search_media_func_15_2] Search components with JPN/ CHT/ CHS in Intro Room')\n    def test_search_media_func_15_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Search conponent ('てんじんまつり') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)\n        2. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)\n        3. Search conponent ('冰島') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)\n        4. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)\n        5. Search conponent ('证书管理办法') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)\n        6. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)\n        7. Verify all 3 search results are different\n        '''\ndependency_test = \"test_search_media_func_15_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L195] 2.2 Video Intro Room > Search > Input CHT character\n        # with uuid(\"ef94a884-f71d-4111-bc9d-fafab5c034b7\") as case:\n\n        with step('[Action] Search \"てんじんまつり\" in library and capture screenshot'):\n            media_room_page.search_library(\"てんじんまつり\", intro_room=True)\n            screenshot1 = main_page.snapshot(locator=L.base.Area.library_icon_view)\n\n        with step('[Action] Back to Intro Room without search'):\n            main_page.click(L.intro_video_room.btn_library)\n\n        with step('[Action] Search \"冰島\" in library and capture screenshot'):\n            media_room_page.search_library(\"冰島\", intro_room=True)\n            screenshot2 = main_page.snapshot(locator=L.base.Area.library_icon_view)\n\n        with step('[Action] Back to Intro Room without search'):\n            main_page.click(L.intro_video_room.btn_library)\n\n        with step('[Action] Search \"证书管理办法\" in library and capture screenshot'):\n            media_room_page.search_library(\"证书管理办法\", intro_room=True)\n            screenshot3 = main_page.snapshot(locator=L.base.Area.library_icon_view)\n\n        with step('[Action] Back to Intro Room without search'):\n            main_page.click(L.intro_video_room.btn_library)\n\n        with step('[Verify] Verify all three search results are different'):\n            if main_page.compare(screenshot1, screenshot2, similarity=0.88):\n                assert False, \"Search results for 'てんじんまつり' and '冰島' are too similar! Similarity should < 0.88\"\n            if main_page.compare(screenshot2, screenshot3, similarity=0.88):\n                assert False, \"Search results for '冰島' and '证书管理办法' are too similar! Similarity should < 0.88\"\n            if main_page.compare(screenshot1, screenshot3, similarity=0.88):\n                assert False, \"Search results for 'てんじんまつり' and '证书管理办法' are too similar! Similarity should < 0.88\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_3",
        "tags": [
            "search_media_func",
            "search_library"
        ],
        "marked_name": "[test_search_media_func_15_3] Search (.) in library and verify no results",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Search conponent ('.') in library",
            "2. Check (L.media_room.txt_no_results_for_dot) is shown",
            "3. Click (L.intro_video_room.btn_library) to back to Intro Room"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_search_media_func_15_3] Search (.) in library and verify no results')\n    def test_search_media_func_15_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Search conponent ('.') in library\n        2. Check (L.media_room.txt_no_results_for_dot) is shown\n        3. Click (L.intro_video_room.btn_library) to back to Intro Room\n        '''\ndependency_test = \"test_search_media_func_15_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L196] 2.2 Video Intro Room > Search > Input \".\" character\n        # with uuid(\"14ba0fd1-597b-4c60-86bb-b0bb4e36d38c\") as case:\n        with step('[Action] Search conponent in library'):\n            media_room_page.search_library('.')\n\n        with step('[Verify] Check no results text is shown'):\n            if not main_page.is_exist(L.media_room.txt_no_results_for_dot):\n                assert False, \"Some component shows up, should not display any result!\"\n\n        with step('[Action] Click Intro Room library button'):\n            main_page.click(L.intro_video_room.btn_library)\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_4",
        "tags": [
            "search_media_func",
            "search_library"
        ],
        "marked_name": "[test_search_media_func_15_4] Search (\\\\) in library and verify no results",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Search conponent ('\\\\') in library",
            "2. Check (L.media_room.txt_no_results_for_backslash) is shown"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_search_media_func_15_4] Search (\\\\) in library and verify no results')\n    def test_search_media_func_15_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Search conponent ('\\\\') in library\n        2. Check (L.media_room.txt_no_results_for_backslash) is shown\n        '''\ndependency_test = \"test_search_media_func_15_3\"\n        self.ensure_dependency(dependency_test)\n\n        # # [L197] 2.2 Video Intro Room > Search IAD > Input \"\\\" character\n        # with uuid(\"41c21164-4368-47f5-a335-41604a0d507f\") as case:\n\n        with step('[Action] Search conponent in library'):\n            media_room_page.search_library('\\\\')\n\n        with step('[Verify] Check no results text is shown'):\n            assert main_page.is_exist(L.media_room.txt_no_results_for_backslash), \"No results text is not displayed!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_5",
        "tags": [
            "search_media_func",
            "media_room",
            "content_pack",
            "background_music",
            "search_library"
        ],
        "marked_name": "[test_search_media_func_15_5] Download [Background Music (CL)] and verify in Downloads",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [New Project] from top menu bar to back to media room",
            "2. Click [Background Music (CL)] in Media Room",
            "3. Select category (Pop) in Meta Room",
            "4. Search keyword ('Feel') in library",
            "5. If download button shows, click it to download the media",
            "6. Click [Cancel] in search library",
            "7. Select category (Downloads) in Meta Room",
            "8. Verify (Feel the Music Within) is shown in library"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.media_room\n    @pytest.mark.content_pack\n    @pytest.mark.background_music\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_search_media_func_15_5] Download [Background Music (CL)] and verify in Downloads')\n    def test_search_media_func_15_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [New Project] from top menu bar to back to media room\n        2. Click [Background Music (CL)] in Media Room\n        3. Select category (Pop) in Meta Room\n        4. Search keyword ('Feel') in library\n        5. If download button shows, click it to download the media\n        6. Click [Cancel] in search library\n        7. Select category (Downloads) in Meta Room\n        8. Verify (Feel the Music Within) is shown in library\n        '''\ndependency_test = \"test_search_media_func_15_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L146] 2.1 Media Room > BGM (CL BGM) > Check Library\n        # with uuid(\"bd302be5-7617-4374-9a0a-80236f611f0d\") as case:\n\n        with step('[Action] Click [New Project] from top menu bar to return to media room'):\n            main_page.top_menu_bar_file_new_project()\n\n        with step('[Action] Click [Background Music (CL)] in Media Room'):\n            media_room_page.enter_background_music_CL()\n\n        with step('[Action] Select category (Pop) in Meta Room'):\n            media_room_page.select_specific_category_in_meta(\"Pop\")\n\n        with step('[Action] Search keyword \"Feel\" in library'):\n            media_room_page.search_library(\"Feel\")\n\n        with step('[Action] Download media if download button is shown'):\n            if main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button):\n                main_page.click(L.media_room.scroll_area.table_view_text_field_download_button)\n                time.sleep(DELAY_TIME * 5) # wait for download\n\n        with step('[Action] Click [Cancel] in search library'):\n            media_room_page.search_library_click_cancel()\n            # # search keyword: Heaven\n            # media_room_page.search_library('Heaven')\n            # time.sleep(DELAY_TIME * 4)\n\n        with step('[Action] Select category (Downloads) in Meta Room'):\n            media_room_page.select_specific_category(\"Downloads\")\n\n        with step('[Verify] Check \"Feel the Music Within\" is shown in library'):\n            assert media_room_page.sound_clips_select_media('Feel the Music Within'), \"Media 'Feel the Music Within' is not displayed in library!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_6",
        "tags": [
            "search_media_func",
            "media_room",
            "background_music",
            "timeline",
            "timecode",
            "content_pack"
        ],
        "marked_name": "[test_search_media_func_15_6] Play the music and verify timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select [Sound Clips] ('Feel the Music Within') in library",
            "2. Click [Play] in playback window, wait (DELAY_TIME*3), then press Space key",
            "3. Get timecode from slidebar and verify it within 00:02~00:04"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.media_room\n    @pytest.mark.background_music\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_search_media_func_15_6] Play the music and verify timecode')\n    def test_search_media_func_15_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select [Sound Clips] ('Feel the Music Within') in library\n        2. Click [Play] in playback window, wait (DELAY_TIME*3), then press Space key\n        3. Get timecode from slidebar and verify it within 00:02~00:04\n        '''\ndependency_test = \"test_search_media_func_15_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L147] 2.1 Media Room > BGM (CL BGM) > Preview\n        # with uuid(\"bf712047-041b-447d-82a6-7326596c0300\") as case:\n        with step('[Action] Select sound clip \"Feel the Music Within\" in library'):\n            media_room_page.sound_clips_select_media(\"Feel the Music Within\")\n\n        with step('[Action] Click [Play] in playback window, wait, and press Space key'):\n            playback_window_page.Edit_Timeline_PreviewOperation('Play')\n            time.sleep(DELAY_TIME * 3)\n            main_page.press_space_key()\n\n        with step('[Verify] Get timecode from slidebar and verify it is within 00:02~00:04'):\n            timecode = playback_window_page.get_timecode_slidebar()\n            if not (timecode.startswith(\"00:00:02\") or timecode.startswith(\"00:00:03\") or timecode.startswith(\"00:00:04\")):\n                assert False, f\"Timecode {timecode} not within expected range (00:02~00:04)\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_7",
        "tags": [
            "search_media_func",
            "media_room",
            "background_music",
            "bubble"
        ],
        "marked_name": "[test_search_media_func_15_7] Verify bubbles are shown after inserting Background Music",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Insert media to selected track from tip area",
            "2. Check bubble (L.media_room.string_on_boarding_blue_bubble_media) shows",
            "3. Check bubble (L.media_room.string_on_boarding_blue_bubble_tooltip) shows"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.media_room\n    @pytest.mark.background_music\n    @pytest.mark.bubble\n    @pytest.mark.name('[test_search_media_func_15_7] Verify bubbles are shown after inserting Background Music')\n    def test_search_media_func_15_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Insert media to selected track from tip area\n        2. Check bubble (L.media_room.string_on_boarding_blue_bubble_media) shows\n        3. Check bubble (L.media_room.string_on_boarding_blue_bubble_tooltip) shows\n        '''\ndependency_test = \"test_search_media_func_15_6\"\n        self.ensure_dependency(dependency_test)\n\n        # [L148] 2.1 Media Room > BGM (CL BGM) > Add to Timeline preview\n        # with uuid(\"732c7d65-f879-4da5-981b-09a6951a3bbd\") as case:\n\n        with step('[Action] Insert media to selected track from tip area'):\n            main_page.tips_area_insert_media_to_selected_track()\n\n        with step('[Verify] Check blue bubble media is shown'):\n            if not main_page.exist(L.media_room.string_on_boarding_blue_bubble_media):\n                assert False, \"Blue bubble media is not displayed!\"\n\n        with step('[Verify] Check blue bubble tooltip is shown'):\n            if not main_page.exist(L.media_room.string_on_boarding_blue_bubble_tooltip):\n                assert False, \"Blue bubble tooltip is not displayed!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_8",
        "tags": [
            "search_media_func",
            "audio_mixing_room"
        ],
        "marked_name": "[test_search_media_func_15_8] Verify audio mixing track volume meter and preview update after timecode change",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Audio Mixing Room (6)",
            "2. Verify the volume meter of audio track 1 is shown",
            "3. Check default volume meter preview is shown",
            "4. Screenshot (locator=audio_1_library_track)",
            "5. Set timecode to (00:00:28:20) at main page",
            "6. Check preview updated"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.name('[test_search_media_func_15_8] Verify audio mixing track volume meter and preview update after timecode change')\n    def test_search_media_func_15_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Audio Mixing Room (6)\n        2. Verify the volume meter of audio track 1 is shown\n        3. Check default volume meter preview is shown\n        4. Screenshot (locator=audio_1_library_track)\n        5. Set timecode to (00:00:28:20) at main page\n        6. Check preview updated\n        '''\ndependency_test = \"test_previous_dependency\"\n        self.ensure_dependency(dependency_test)\n\n        with step('[Action] Enter Audio Mixing Room (6)'):\n            main_page.enter_room(6)\n\n        with step('[Verify] Check volume meter of audio track 1 is shown'):\n            if not main_page.exist([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}]):\n                assert False, \"Volume meter for audio track 1 is not displayed!\"\n\n        with step('[Verify] Check default volume meter preview is shown'):\n            if not main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}):\n                assert False, \"Default volume meter preview is not displayed!\"\n\n        with step('[Action] Capture screenshot of audio 1 library track'):\n            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})\n            before_preview = main_page.snapshot(locator=audio_1_library_track)\n\n        with step('[Action] Set timeline timecode to 00:00:28:20'):\n            main_page.set_timeline_timecode('00:00:28:20')\n\n        with step('[Verify] Check preview updated after timecode change'):\n            after_preview = main_page.snapshot(locator=audio_1_library_track, file_name=Auto_Ground_Truth_Folder + 'L148.png')\n            if main_page.compare(before_preview, after_preview, similarity=0.94):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after setting timecode! Similarity should < 0.94\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_9",
        "tags": [
            "search_media_func",
            "save_project",
            "launcher",
            "open_project"
        ],
        "marked_name": "[test_search_media_func_15_9] Save project and open it from launcher",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Save project as from top menu bar > Handle [Save Project] Dialog (name='test_search_media_func_15_9', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')",
            "2. Click [Close] button to back to launcher",
            "3. Click [Open project in launcher] (L.base.launcher_window.btn_open_project) and open project (Test_Material_Folder + 'test_search_media_func_15_9.pds')",
            "4. Check main_page.exist(L.base.main_caption).AXValue == 'test_search_media_func_15_9'"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.save_project\n    @pytest.mark.launcher\n    @pytest.mark.open_project\n    @pytest.mark.name('[test_search_media_func_15_9] Save project and open it from launcher')\n    def test_search_media_func_15_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Save project as from top menu bar > Handle [Save Project] Dialog (name='test_search_media_func_15_9', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        2. Click [Close] button to back to launcher\n        3. Click [Open project in launcher] (L.base.launcher_window.btn_open_project) and open project (Test_Material_Folder + 'test_search_media_func_15_9.pds')\n        4. Check main_page.exist(L.base.main_caption).AXValue == 'test_search_media_func_15_9'\n        '''\ndependency_test = \"test_search_media_func_15_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L36] 1.3 New Launcher > Project  Area > Open Project > Single click\n        # with uuid(\"834ff7aa-a69a-4695-ba62-97b6812ab90b\") as case:\n        with step('[Action] Save project as and handle save dialog'):\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_search_media_func_15_9', \n                                              folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n\n        with step('[Action] Click [Close] to return to launcher'):\n            main_page.click_close_then_back_to_launcher()\n\n        with step('[Action] Click [Open project in launcher] and open project'):\n            main_page.click(L.base.launcher_window.btn_open_project)\n            time.sleep(DELAY_TIME * 2)\n            main_page.handle_open_project_dialog(Test_Material_Folder + 'BFT_21_Stage1/test_search_media_func_15_9.pds')\n\n        with step('[Verify] Check main caption is \"test_search_media_func_15_9\"'):\n            caption = main_page.exist(L.base.main_caption).AXValue\n            if caption != 'test_search_media_func_15_9':\n                assert False, f\"Main caption mismatch! Expected 'test_search_media_func_15_9', got '{caption}'\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_10",
        "tags": [
            "search_media_func",
            "audio_mixing_room",
            "open_project"
        ],
        "marked_name": "test_search_media_func_15_10",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Audio Mixing Room] (6)",
            "2. Verify the volume meter ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}) of audio track 1 is shown",
            "3. Screenshot (locator=audio_1_library_track) and compare with GT (Auto_Ground_Truth_Folder + 'L148.png') (similarity=0.98)"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.open_project\n    @pytest.mark.name(\"[test_search_media_func_15_10] Open project with correct audio content\")\n    def test_search_media_func_15_10(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Audio Mixing Room] (6)\n        2. Verify the volume meter ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}) of audio track 1 is shown\n        3. Screenshot (locator=audio_1_library_track) and compare with GT (Auto_Ground_Truth_Folder + 'L148.png') (similarity=0.98)\n        '''\ndependency_test = \"test_previous_dependency\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enter Audio Mixing Room with parameter 6\"):\n            main_page.enter_room(6)\n        \n        with step(\"[Verify] Volume meter of audio track 1 is shown\"):\n            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})\n            if not audio_1_library_track:\n                assert False, \"Audio track 1 volume meter is not visible\"\n        \n        with step(\"[Action] Screenshot audio track 1 and compare with GT L148.png\"):\n            audio_snapshot = main_page.snapshot(locator=audio_1_library_track)\n            check_audio = main_page.compare(Auto_Ground_Truth_Folder + 'L148.png', audio_snapshot, similarity=0.98)\n            if not check_audio:\n                # Similarity should be greater than 0.98\n                assert False, \"Audio track screenshot does not match GT (L148.png)! Similarity should > 0.98\"\n        \n        assert True"
    },
    {
        "name": "test_search_media_func_15_11",
        "tags": [
            "search_media_func",
            "media_room"
        ],
        "marked_name": "test_search_media_func_15_11",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Media Room (0)",
            "2. Check (L.media_room.string_use_sample_media) shows up"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.media_room\n    @pytest.mark.name(\"[test_search_media_func_15_11] Enter Media Room and verify 'Use Sample Media' is shown\")\n    def test_search_media_func_15_11(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Media Room (0)\n        2. Check (L.media_room.string_use_sample_media) shows up\n        '''\ndependency_test = \"test_search_media_func_15_10\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L99] 2.1 Media Room > New On Boarding > On Boarding flowing_1 > select project in Launcher\n        # with uuid(\"de129b84-db97-4048-96f3-7af83dd4167d\") as case:\n\n        with step(\"[Action] Enter Media Room with parameter 0\"):\n            main_page.enter_room(0)\n        \n        with step(\"[Verify] Check 'Use Sample Media' string is shown in Media Room\"):\n            if not main_page.exist(L.media_room.string_use_sample_media, timeout=5):\n                assert False, \"[Use Sample Media] not found in Media Room!\"\n        \n        assert True"
    },
    {
        "name": "test_search_media_func_15_12",
        "tags": [
            "search_media_func",
            "background_music",
            "content_pack",
            "search_library"
        ],
        "marked_name": "[test_search_media_func_15_12] Search library for \"river water\" and check selected specific sound clips \"River Water\" in library",
        "description": [
            "1. Enter background music room (meta)",
            "2. Select specific category in meta (Chinese)",
            "3. Search library (river water)",
            "4. Check selected specific sound clips ('River Water') in library"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.background_music\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_search_media_func_15_12] Search library for \"river water\" and check selected specific sound clips \"River Water\" in library')\n    def test_search_media_func_15_12(self):\n    '''\n        1. Enter background music room (meta)\n        2. Select specific category in meta (Chinese)\n        3. Search library (river water)\n        4. Check selected specific sound clips ('River Water') in library\n        '''\n# [L162] 2.1 Media Room > BGM (Meta) > Input ENG character\n        # with uuid(\"3743a6fe-b4e7-41ca-81db-e48f2be7b24f\") as case:\n        \n        with step(\"[Action] Enter background music room\"):\n            media_room_page.enter_background_music()\n\n        with step(\"[Action] Select specific category in meta (Chinese)\"):\n            media_room_page.select_specific_category_in_meta(\"Chinese\")\n\n        with step(\"[Action] Search library for 'river water'\"):\n            media_room_page.search_library(\"river water\")\n\n        with step(\"[Verify] Check selected specific sound clips 'River Water' in library\"):\n            assert media_room_page.sound_clips_select_media(\"River Water\"), \"Sound clip 'River Water' is not displayed in library!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_13",
        "tags": [
            "search_media_func",
            "background_music",
            "content_pack"
        ],
        "marked_name": "test_search_media_func_15_13",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select specific sound clips (River Water) in library > right click > select (Download) on the right-click menu > wait for download to complete (DELAY_TIME * 8)",
            "2. Select specific sound clips (River Water) in library > right click > select (Delete from Disk) on the right-click menu > click [Yes] on the confirm dialog > wait for download to complete (DELAY_TIME * 3)",
            "3. Check download mark is default status by verifying there is no download-ok element shown"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.background_music\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_search_media_func_15_13] Download and Delete 'River Water' and verify download mark\")\n    def test_search_media_func_15_13(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select specific sound clips (River Water) in library > right click > select (Download) on the right-click menu > wait for download to complete (DELAY_TIME * 8)\n        2. Select specific sound clips (River Water) in library > right click > select (Delete from Disk) on the right-click menu > click [Yes] on the confirm dialog > wait for download to complete (DELAY_TIME * 3)\n        3. Check download mark is default status by verifying there is no download-ok element shown\n        '''\ndependency_test = \"test_search_media_func_15_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L161] 2.1 Media Room > BGM (Meta) > Delete from Disk\n        # with uuid(\"b7fdc0e7-7ac4-42b3-a5c5-11ebe8ae382d\") as case:\n\n        with step(\"[Action] Select specific sound clips 'River Water' in library and right click for Download\"):\n            media_room_page.sound_clips_select_media(\"River Water\")\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Download\")\n            time.sleep(DELAY_TIME * 8)  # wait for download to complete\n\n        with step(\"[Action] Right click on 'River Water' and select Delete from Disk, then confirm deletion\"):\n            media_room_page.sound_clips_select_media(\"River Water\")\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Delete from Disk\")\n            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)\n            time.sleep(DELAY_TIME * 3)  # wait for deletion process\n\n        with step(\"[Verify] Verify that download mark is in default status\"):\n            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):\n                assert False, \"Download mark is not in default status: download-ok element found!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_14",
        "tags": [
            "search_media_func",
            "background_music",
            "content_pack"
        ],
        "marked_name": "test_search_media_func_15_14",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Cancel] button in search library",
            "2. Search 'Rover Woter' in library and screenshot (L.base.Area.library_detail_view)",
            "3. Click [Cancel] button in search library",
            "4. Search '.' in library and screenshot (L.base.Area.library_detail_view)",
            "5. Check the search result is different in 2 steps"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.background_music\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_search_media_func_15_14] Search not existed content and check preview\")\n    def test_search_media_func_15_14(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Cancel] button in search library\n        2. Search 'Rover Woter' in library and screenshot (L.base.Area.library_detail_view)\n        3. Click [Cancel] button in search library\n        4. Search '.' in library and screenshot (L.base.Area.library_detail_view)\n        5. Check the search result is different in 2 steps\n        '''\ndependency_test = \"test_search_media_func_15_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L164] 2.1 Media Room > BGM (Meta) > search .\n        # with uuid(\"59dbc4dc-eaec-4df3-8dcc-8ed370c7e4b0\") as case:\n\n        # [L165] 2.1 Media Room > BGM (Meta) > search \\\n        # with uuid(\"0ea5d15c-9237-42e0-b355-e4d765385ccc\") as case:\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n            empty_search_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)\n\n        with step(\"[Action] Search 'Rover Woter' in library and capture screenshot of library detail view\"):\n            media_room_page.search_library(\"Rover Woter\")\n            search_1_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)\n\n        with step(\"[Verify] Check preview is the same as empty search preview due to no search results\"):\n            if not main_page.compare(empty_search_preview, search_1_preview, similarity=0.99):\n                assert False, \"Search results for 'Rover Woter' are not empty! Similarity should be 0.99\"\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search '.' in library and capture screenshot of library detail view\"):\n            media_room_page.search_library(\".\")\n            search_2_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)\n\n        with step(\"[Verify] Check preview is the same as empty search preview due to no search results\"):\n            if not main_page.compare(empty_search_preview, search_2_preview, similarity=0.99):\n                assert False, \"Search results for '.' are not empty! Similarity should be 0.99\"\n        \n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n        \n        with step(\"[Action] Search '\\\\' in library and capture screenshot of library detail view\"):\n            media_room_page.search_library(\"\\\\\")\n            search_3_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)\n\n        with step(\"[Verify] Check preview is the same as empty search preview due to no search results\"):\n            if not main_page.compare(empty_search_preview, search_3_preview, similarity=0.99):\n                assert False, \"Search results for '\\\\' are not empty! Similarity should be 0.99\"\n        assert True"
    },
    {
        "name": "test_search_media_func_15_15",
        "tags": [
            "search_media_func",
            "content_pack",
            "pip_room"
        ],
        "marked_name": "test_search_media_func_15_15",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Tap [PiP Room] hotkey to enter PiP Room > Click search filed (L.media_room.input_search) to Unfold suggestion keyword",
            "2. Click [Close] button of (First recently searched)",
            "3. Verify search filed is updated"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.content_pack\n    @pytest.mark.pip_room\n    @pytest.mark.name(\"[test_search_media_func_15_15] Check Search filed in PiP Room\")\n    def test_search_media_func_15_15(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Tap [PiP Room] hotkey to enter PiP Room > Click search filed (L.media_room.input_search) to Unfold suggestion keyword\n        2. Click [Close] button of (First recently searched)\n        3. Verify search filed is updated\n        '''\n# [L212] 2.3 Pip Room > Search IAD > click \"x\" button of \"recent searched\"\n        # with uuid(\"bf9d047b-f868-4c22-9fa3-a0fb9f79f5ed\") as case:\n\n        with step('[Action] Tap [PiP Room] hotkey to enter PiP Room'):\n            # Click Hotkey F5 to enter Pip Room\n            main_page.tap_PiPRoom_hotkey()\n            time.sleep(DELAY_TIME)\n\n            # click search filed to Unfold suggestion keyword\n            main_page.click(L.media_room.input_search)\n            time.sleep(DELAY_TIME )\n\n        with step('[Action] Click [Close] button of (First recently searched)'):\n            # Click the Close button of (First recently searched)\n            target = main_page.exist(L.pip_room.suggestion_keyword)\n            # Click [X] in recently used keyword 'love'\n            x, y = target[1].AXPosition\n            w, h = target[1].AXSize\n            new_x = x + w + 8\n            new_y = y + (h * 0.5)\n            main_page.mouse.move(new_x, new_y)\n            main_page.mouse.click()\n\n        with step('[Verify] Verify search filed is updated'):\n            # Verify step:\n            # get search filed size / position\n            search_object = main_page.exist(L.media_room.input_search)\n\n            w, h = search_object.AXSize\n            x, y = search_object.AXPosition\n\n            # snapshot region (Region: From import button to My Favorites)\n            new_x = x\n            new_y = y\n            new_w = w + 5\n            new_h = h * 8.5\n            all_search_result = main_page.screenshot(file_name=Auto_Ground_Truth_Folder + 'L212_all_search.png', w=new_w, x=new_x, y=new_y, h=new_h)\n            if not main_page.compare(Ground_Truth_Folder + 'L212_all_search.png', all_search_result):\n                assert False, \"Preview does not match (Ground_Truth_Folder + L212_all_search.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_search_media_func_15_16",
        "tags": [
            "search_media_func",
            "search_library",
            "content_pach",
            "title_room",
            "title_designer",
            "timeline"
        ],
        "marked_name": "[test_search_media_func_15_16] Add Title (Default) to timeline and enter Title designer",
        "description": [
            "1. start app and enter room (Title Room)(1)",
            "2. Select Library Room category (Plain Text)",
            "3. Click timeline track3",
            "4. Select media ('Default') by library icon view and click (L.main.tips_area.btn_insert_to_selected_track) to insert",
            "5. Add media to timeline and Double click to enter Title designer",
            "6. Check that title designer is opened with title 'Title Designer | My Title'"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.content_pach\n    @pytest.mark.title_room\n    @pytest.mark.title_designer\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_search_media_func_15_16] Add Title (Default) to timeline and enter Title designer')\n    def test_search_media_func_15_16(self):\n    '''\n        1. start app and enter room (Title Room)(1)\n        2. Select Library Room category (Plain Text)\n        3. Click timeline track3\n        4. Select media ('Default') by library icon view and click (L.main.tips_area.btn_insert_to_selected_track) to insert\n        5. Add media to timeline and Double click to enter Title designer\n        6. Check that title designer is opened with title 'Title Designer | My Title'\n        '''\n# [L217] 2.3 Title > Add each kind of template to timeline  > General Title\n        # with uuid(\"84ed9ced-d8bc-49a9-ad78-01a5dd0083b1\") as case:\n\n        with step(\"[Action] Start app and enter Title Room\"):\n            main_page.close_and_restart_app()\n            main_page.enter_room(1)\n\n        with step(\"[Action] Select Library Room category (Plain Text)\"):\n            main_page.select_LibraryRoom_category('Plain Text')\n\n        with step(\"[Action] Click timeline track3\"):\n            main_page.timeline_select_track(3)\n\n        with step(\"[Action] Select media 'Default' and click to insert\"):\n            main_page.select_library_icon_view_media('Default')\n            main_page.click(L.main.tips_area.btn_insert_to_selected_track)\n\n        with step(\"[Action] Add media to timeline and Double click to enter Title designer\"):\n            timeline_operation_page.select_timeline_media(track_index=4, clip_index=0)\n            main_page.double_click()\n\n        with step(\"[Verify] Check that title designer is opened with title 'Title Designer | My Title'\"):\n            actual_title = title_designer_page.get_full_title()\n            assert actual_title == 'Title Designer | My Title', f\"Expected title 'Title Designer | My Title', got '{actual_title}'\""
    },
    {
        "name": "test_search_media_func_15_17",
        "tags": [
            "search_media_func",
            "title_designer",
            "particle"
        ],
        "marked_name": "[test_search_media_func_15_17] Insert particle and verify text content",
        "description": [
            "0. Ensure the dependency test ('test_search_media_func_15_16') is run and passed",
            "1. Switch to Advanced mode (2) in title designer",
            "2. Click [Insert particle] button and insert particle (Nature > Love)(menu_index=7, particle_index=0)",
            "3. Check (L.title_designer.area.edittext_text_content).AXValue is 'Kisses'"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.particle\n    @pytest.mark.name('[test_search_media_func_15_17] Insert particle and verify text content')\n    def test_search_media_func_15_17(self):\n    '''\n        0. Ensure the dependency test ('test_search_media_func_15_16') is run and passed\n        1. Switch to Advanced mode (2) in title designer\n        2. Click [Insert particle] button and insert particle (Nature > Love)(menu_index=7, particle_index=0)\n        3. Check (L.title_designer.area.edittext_text_content).AXValue is 'Kisses'\n        '''\n# Ensure the dependency test is run and passed\n        self.ensure_dependency(\"test_search_media_func_15_16\")\n\n        # [L350] 3.2 Title designer (general template) > Move, resize and rotate\n        # with uuid(\"8b1ebdc6-8076-4b6b-849d-3e1a6f72b20b\") as case:\n\n        with step(\"[Action] Switch to Advanced mode (2) in title designer\"):\n             title_designer_page.switch_mode(2)\n\n        with step(\"[Action] Click [Insert particle] button and insert particle (Nature > Love)\"):\n            title_designer_page.click_insert_particle_btn()\n            title_designer_page.insert_particle(menu_index=7, particle_index=0)\n\n        with step(\"[Verify] Check that the edit text content is 'Kisses'\"):\n            elem = main_page.exist(L.title_designer.area.edittext_text_content)\n            assert elem.AXValue == \"Kisses\", f\"Expected text content to be 'Kisses', got '{elem.AXValue}'\""
    },
    {
        "name": "test_search_media_func_15_18",
        "tags": [
            "search_media_func",
            "title_designer",
            "particle",
            "canva"
        ],
        "marked_name": "test_search_media_func_15_18",
        "description": [
            "0. Ensure the dependency test ('test_search_media_func_15_17') is run and passed",
            "1. Set timecode to '00_00_02_13' in title designer > switch to Advanced mode (2) > screenshot (locator=L.title_designer.area.frame_video_preview)",
            "2. Move [Particle] to left (x=100) > screenshot (locator=L.title_designer.area.frame_video_preview)",
            "3. Check similarity between 2 screenshots is within 0.95~0.985"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.particle\n    @pytest.mark.canva\n    @pytest.mark.name(\"[test_search_media_func_15_18] Set timecode, move particle, and verify preview similarity\")\n    def test_search_media_func_15_18(self):\n    '''\n        0. Ensure the dependency test ('test_search_media_func_15_17') is run and passed\n        1. Set timecode to '00_00_02_13' in title designer > switch to Advanced mode (2) > screenshot (locator=L.title_designer.area.frame_video_preview)\n        2. Move [Particle] to left (x=100) > screenshot (locator=L.title_designer.area.frame_video_preview)\n        3. Check similarity between 2 screenshots is within 0.95~0.985\n        '''\ndependency_test = \"test_search_media_func_15_17\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Set timecode to '00_00_02_13' in title designer and switch to Advanced mode (2) then capture screenshot\"):\n            title_designer_page.set_timecode('00_00_02_13')\n            title_designer_page.switch_mode(2)\n            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n\n        with step(\"[Action] Move [Particle] to left (x=100) and capture screenshot of title designer preview\"):\n            title_designer_page.adjust_title_on_canvas.drag_move_particle_to_left(x=100)\n            after_move_particle_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)\n\n        with step(\"[Verify] Check similarity between the two screenshots is within 0.95 ~ 0.985\"):\n            if not main_page.compare(before_preview, after_move_particle_preview, similarity=0.95):\n                # Similarity should be greater than 0.95\n                assert False, \"Similarity is lower than expected! Similarity should > 0.95\"\n            if main_page.compare(before_preview, after_move_particle_preview, similarity=0.985):\n                # Similarity should be less than 0.985\n                assert False, \"Similarity is higher than expected! Similarity should < 0.985\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_19",
        "tags": [
            "search_media_func",
            "title_designer",
            "particle",
            "canva"
        ],
        "marked_name": "test_search_media_func_15_19",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Switch to editing object by click (L.title_designer.area.view_title)",
            "2. Tap [Select All] via hotkey",
            "3. Unfold Border menu by click (L.title_designer.border.btn_border)",
            "4. Check [Border depth direction] is exist and disabled (L.title_designer.border.value_box_depth)"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.particle\n    @pytest.mark.canva\n    @pytest.mark.name(\"[test_search_media_func_15_19] Verify Border depth direction element exists and is disabled\")\n    def test_search_media_func_15_19(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Switch to editing object by click (L.title_designer.area.view_title)\n        2. Tap [Select All] via hotkey\n        3. Unfold Border menu by click (L.title_designer.border.btn_border)\n        4. Check [Border depth direction] is exist and disabled (L.title_designer.border.value_box_depth)\n        '''\ndependency_test = \"test_search_media_func_15_18\"\n        self.ensure_dependency(dependency_test)\n\n        # [L352] 3.2 Title designer (general template) > Advanced mode > Border depth > Default disable\n        # with uuid(\"0136f478-abeb-429a-bf88-1719e4221862\") as case:\n\n        with step(\"[Action] Switch to editing object by clicking view title\"):\n            # title_designer_page.click_object_tab()\n            main_page.click(L.title_designer.area.view_title)\n            time.sleep(DELAY_TIME)\n\n        with step(\"[Action] Tap [Select All] via hotkey\"):\n            main_page.tap_SelectAll_hotkey()\n\n        with step(\"[Action] Unfold Border menu by clicking border button\"):\n           main_page.click(L.title_designer.border.btn_border)\n\n        with step(\"[Verify] Check [Border depth direction] exists and is disabled\"):\n            element = main_page.exist(L.title_designer.border.value_box_depth)\n            if not element:\n                assert False, \"Border depth direction element does not exist!\"\n            # Assuming the element has an is_enabled() method to verify its state.\n            if main_page.exist(L.title_designer.border.value_box_depth).AXEnabled:\n                assert False, \"Border depth direction element is not disabled!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_20",
        "tags": [
            "search_media_func",
            "title_designer"
        ],
        "marked_name": "test_search_media_func_15_20",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enable Border in title designer",
            "2. Set Title border depth = 40",
            "3. Verify preview (locator=L.title_designer.area.frame_video_preview) is the same as GT (Auto_Ground_Truth_Folder + 'L351_title.png') (similarity=0.93)"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.name(\"[test_search_media_func_15_20] Verify title border depth and preview match GT\")\n    def test_search_media_func_15_20(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enable Border in title designer\n        2. Set Title border depth = 40\n        3. Verify preview (locator=L.title_designer.area.frame_video_preview) is the same as GT (Auto_Ground_Truth_Folder + 'L351_title.png') (similarity=0.93)\n        '''\ndependency_test = \"test_search_media_func_15_19\"\n        self.ensure_dependency(dependency_test)\n\n        # [L351] 3.2 Title designer (general template) > Advanced mode > Border depth\n        # with uuid(\"847e1d95-b03d-4180-816d-a8e538e0ffa2\") as case:\n\n        with step(\"[Action] Enable Border in title designer\"):\n            title_designer_page.apply_border(bApply=1)\n\n        with step(\"[Action] Set Title border depth = 40\"):\n            title_designer_page.drag_border_depth_slider(40)\n\n        with step(\"[Verify] Verify preview matches GT (L351_title.png)\"):\n            preview = main_page.snapshot(\n                locator=L.title_designer.area.frame_video_preview,\n                file_name=Auto_Ground_Truth_Folder + 'L351_title.png'\n            )\n            check_preview = main_page.compare(\n                Auto_Ground_Truth_Folder + 'L351_title.png',\n                preview,\n                similarity=0.93\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.93 for matching preview\n                assert False, \"Preview does not match Ground Truth (L351_title.png)! Similarity should > 0.93\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_21",
        "tags": [
            "search_media_func",
            "title_designer"
        ],
        "marked_name": "test_search_media_func_15_21",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set Border Depth by Value = 207",
            "2. Check that Border Depth (L.title_designer.border.edittext_depth) is updated to 20"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.name(\"[test_search_media_func_15_21] Verify Border Depth update by value\")\n    def test_search_media_func_15_21(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set Border Depth by Value = 207\n        2. Check that Border Depth (L.title_designer.border.edittext_depth) is updated to 20\n        '''\ndependency_test = \"test_search_media_func_15_20\"\n        self.ensure_dependency(dependency_test)\n\n        # [L353] 3.2 Title designer (general template) > Advanced mode > Border depth > Can edit direction\n        # with uuid(\"bd771098-43b3-4c0c-ade2-ca443681e98f\") as case:\n\n        with step(\"[Action] Set Border Depth by Value to 207\"):\n            title_designer_page.input_border_depth_value(207)\n\n        with step(\"[Verify] Check that Border Depth is updated to 207\"):\n            element = main_page.exist(L.title_designer.border.edittext_depth)\n            if element.AXValue != \"207\":\n                assert False, f\"Border Depth is not updated to 207! Expected: 207, Got: {element.AXValue}\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_22",
        "tags": [
            "search_media_func",
            "title_designer",
            "pip_room",
            "timeline",
            "timecode"
        ],
        "marked_name": "test_search_media_func_15_22",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Fold Border menu and switch to Basic Mode in title designer",
            "2. Save template as 'Title_and_Particle_save' in title designer",
            "3. Click [OK] to back to timeline",
            "4. Enter [Pip] Room (4) and enter category (Shape)",
            "5. Select timeline track 2 and select media (Shape 004) by library icon view",
            "6. Click insert button to insert media",
            "7. Set timecode to '00_00_03_03' at main page",
            "8. Verify preview is the same as GT (Ground_Truth_Folder + 'L222_shape.png') with similarity=0.95"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.title_designer\n    @pytest.mark.pip_room\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.name(\"[test_search_media_func_15_22] Verify preview update in Pip Room after inserting saved title template\")\n    def test_search_media_func_15_22(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Fold Border menu and switch to Basic Mode in title designer\n        2. Save template as 'Title_and_Particle_save' in title designer\n        3. Click [OK] to back to timeline\n        4. Enter [Pip] Room (4) and enter category (Shape)\n        5. Select timeline track 2 and select media (Shape 004) by library icon view\n        6. Click insert button to insert media\n        7. Set timecode to '00_00_03_03' at main page\n        8. Verify preview is the same as GT (Ground_Truth_Folder + 'L222_shape.png') with similarity=0.95\n        '''\ndependency_test = \"test_search_media_func_15_21\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Fold Border menu and switch to Basic Mode in title designer\"):\n            main_page.click(L.title_designer.border.btn_border)\n            title_designer_page.switch_mode(1)\n\n        with step(\"[Action] Save template as 'Title_and_Particle_save' in title designer\"):\n            main_page.click(L.title_designer.btn_save_as)\n            title_designer_page.click_custom_name_ok('Title_and_Particle_save')\n\n        with step(\"[Action] Click [OK] to back to timeline\"):\n            title_designer_page.click_ok()\n\n        # [L222] 2.3 Pip > Add each kind of template to timeline  > Pip / Shape\n        # with uuid(\"cc6ddcb5-e490-4fd7-85df-cbf4571c4905\") as case:\n        \n        with step(\"[Action] Enter [Pip] Room (4) and enter category (Shape)\"):\n            main_page.enter_room(4)\n            main_page.select_LibraryRoom_category('Shape')\n\n        with step(\"[Action] Select timeline track 2 and select media (Shape 004) by library icon view\"):\n            main_page.timeline_select_track(2)\n            main_page.select_library_icon_view_media(\"Shape 004\")\n\n        with step(\"[Action] Click insert button to insert media\"):\n            main_page.click(L.main.tips_area.btn_insert_to_selected_track)\n\n        with step(\"[Action] Set timecode to '00_00_03_03' at main page\"):\n            main_page.set_timeline_timecode(\"00_00_03_03\")\n\n        with step(\"[Verify] Check preview is updated\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.only_mtk_view,\n                file_name=Ground_Truth_Folder + \"L222_shape.png\"\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + \"L222_shape.png\",\n                preview,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L222_shape.png)! Similarity should > 0.95\"\n        assert True"
    },
    {
        "name": "test_search_media_func_15_23",
        "tags": [
            "search_media_func",
            "search_library",
            "import_media",
            "media_room"
        ],
        "marked_name": "test_search_media_func_15_23",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Room (Media)(0)",
            "2. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/デスクトップ.jpg')",
            "3. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/斑馬.jpg')",
            "4. Search library with keyword 'デスクトップ'",
            "5. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_JPN.png')"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.import_media\n    @pytest.mark.media_room\n    @pytest.mark.name(\"[test_search_media_func_15_23] Verify preview matches GT after importing and searching media in JPN\")\n    def test_search_media_func_15_23(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Room (Media)(0)\n        2. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/デスクトップ.jpg')\n        3. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/斑馬.jpg')\n        4. Search library with keyword 'デスクトップ'\n        5. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_JPN.png')\n        '''\ndependency_test = \"test_search_media_func_15_22\"\n        self.ensure_dependency(dependency_test)\n\n        # [L134] 2.1 Media Room > Media Content > Search > Input double character\n        # with uuid(\"83f07c24-689f-4d83-bc3f-5e128f12b291\") as case:\n\n        with step(\"[Action] Enter Room (Media)(0)\"):\n            main_page.enter_room(0)\n\n        with step(\"[Action] Import media file (Test_Material_Folder + 'BFT_21_Stage1/デスクトップ.jpg')\"):\n            media_room_page.import_media_file(Test_Material_Folder + \"BFT_21_Stage1/デスクトップ.jpg\")\n\n        with step(\"[Action] Import media file (Test_Material_Folder + 'BFT_21_Stage1/斑馬.jpg')\"):\n            media_room_page.import_media_file(Test_Material_Folder + \"BFT_21_Stage1/斑馬.jpg\")\n\n        with step(\"[Action] Search library with keyword 'デスクトップ'\"):\n            media_room_page.search_library(\"デスクトップ\")\n\n        with step(\"[Verify] Check that preview matches GT (L134_JPN.png)\"):\n            preview = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Ground_Truth_Folder + \"L134_JPN.png\"\n            )\n            if main_page.compare(Ground_Truth_Folder + \"L134_JPN.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L134_JPN.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_24",
        "tags": [
            "search_media_func",
            "search_library",
            "media_room"
        ],
        "marked_name": "test_search_media_func_15_24",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Cancel] button in search library",
            "2. Search library with keyword '斑馬'",
            "3. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_CHT.png')"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.media_room\n    @pytest.mark.name(\"[test_search_media_func_15_24] Verify preview after searching media in CHT\")\n    def test_search_media_func_15_24(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Cancel] button in search library\n        2. Search library with keyword '斑馬'\n        3. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_CHT.png')\n        '''\ndependency_test = \"test_search_media_func_15_23\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search library with keyword '斑馬'\"):\n            media_room_page.search_library(\"斑馬\")\n\n        with step(\"[Verify] Check that preview matches GT (L134_CHT.png)\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Ground_Truth_Folder + \"L134_CHT.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"L134_CHT.png\", preview_snapshot, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L134_CHT.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_25",
        "tags": [
            "search_media_func",
            "search_library",
            "media_room"
        ],
        "marked_name": "test_search_media_func_15_25",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Cancel] button in search library",
            "2. Search library with keyword '&^$%'",
            "3. Check that 'No results found' text (L.media_room.txt_no_results_for_special_character) is displayed"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.search_library\n    @pytest.mark.media_room\n    @pytest.mark.name(\"[test_search_media_func_15_25] Verify no results found text for special characters search\")\n    def test_search_media_func_15_25(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Cancel] button in search library\n        2. Search library with keyword '&^$%'\n        3. Check that 'No results found' text (L.media_room.txt_no_results_for_special_character) is displayed\n        '''\ndependency_test = \"test_search_media_func_15_24\"\n        self.ensure_dependency(dependency_test)\n\n        # [L135] 2.1 Media Room > Media Content > Search > Input special character\n        # with uuid(\"908d111a-cf81-47d0-a83f-73af949a3c7e\") as case:\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search library with keyword '&^$%'\"):\n            media_room_page.search_library(\"&^$%\")\n\n        with step(\"[Verify] Check that 'No results found' text is displayed\"):\n            if not main_page.is_exist(L.media_room.txt_no_results_for_special_character):\n                assert False, \"'No results found' text is not displayed!\"\n\n        assert True"
    },
    {
        "name": "test_search_media_func_15_26",
        "tags": [
            "search_media_func",
            "effect_room",
            "search_library"
        ],
        "marked_name": "test_search_media_func_15_26",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Room (Effect)(3)",
            "2. Select Library Room category (Popular) and check result",
            "3. Select media ('Lens Flare 01') by library icon view and check result"
        ],
        "full_code": "@pytest.mark.search_media_func\n    @pytest.mark.effect_room\n    @pytest.mark.search_library\n    @pytest.mark.name(\"[test_search_media_func_15_26] Verify media selection in Popular category in Effect Room\")\n    def test_search_media_func_15_26(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Room (Effect)(3)\n        2. Select Library Room category (Popular) and check result\n        3. Select media ('Lens Flare 01') by library icon view and check result\n        '''\ndependency_test = \"test_search_media_func_15_25\"\n        self.ensure_dependency(dependency_test)\n\n        # [L226] 2.3 Effect Room > Support Most popular category\n        # with uuid(\"afa3c4f9-1134-40d3-9536-0515cd71b1c8\") as case:\n\n        with step(\"[Action] Enter Room (Effect)(3)\"):\n            main_page.enter_room(3)\n\n        with step(\"[Action] Select Library Room category (Popular) and check result\"):\n            if not main_page.select_LibraryRoom_category(\"Popular\"):\n                assert False, \"Failed to select Library Room category 'Popular'\"\n\n        with step(\"[Action] Select media ('Lens Flare 01') by library icon view and check result\"):\n            if not main_page.select_library_icon_view_media(\"Lens Flare 01\"):\n                assert False, \"Failed to select media 'Lens Flare 01' by library icon view\"\n\n        assert True"
    },
    {
        "name": "test_recent_project_func_16_1",
        "tags": [
            "recent_project_func",
            "recent_project",
            "open_project",
            "launch"
        ],
        "marked_name": "[test_recent_project_func_16_1] Open pack project and verify recent project exists on launcher",
        "description": [
            "1. Launch APP and open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)",
            "2. Click [Close] button to back to launcher",
            "3. Check there is recent project by (L.base.launcher_window.txt_no_recent_project) is not exsit",
            "4. Check preview as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png') with similarity=0.88"
        ],
        "full_code": "@pytest.mark.recent_project_func\n    @pytest.mark.recent_project\n    @pytest.mark.open_project\n    @pytest.mark.launch\n    @pytest.mark.name('[test_recent_project_func_16_1] Open pack project and verify recent project exists on launcher')\n    def test_recent_project_func_16_1(self):\n    '''\n        1. Launch APP and open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)\n        2. Click [Close] button to back to launcher\n        3. Check there is recent project by (L.base.launcher_window.txt_no_recent_project) is not exsit\n        4. Check preview as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png') with similarity=0.88\n        '''\n# [L40] 1.3 New Launcher > Project Area > Recent Project > Click del button\n        # with uuid(\"d456b735-21d5-4427-a935-e445e60cc3f4\") as case:\n\n        with step(\"[Action] Open APP and open packed project\"):\n            main_page.start_app()\n            project_name = 'Packed_Project/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk'\n            save_name = 'Extracted_Folder/test_recent_project_func_16_1'\n            self.open_packed_project(project_name, save_name)\n\n        with step(\"[Action] Click [Close] button to back to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n        \n        with step(\"[Verify] Check that recent project exists\"):\n            # Assert that the locator for 'No Recent Project' is not present, meaning a recent project is available.\n            if main_page.is_not_exist(L.base.launcher_window.txt_no_recent_project):\n                assert False, \"[no recent project] is found! Expected no [no recent project] string.\"\n\n        with step(\"[Verify] Check preview as GT\"):\n            recent_project_first_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon, file_name=Auto_Ground_Truth_Folder + 'L40_recent_project_first_icon.png')\n            check_first_icon = main_page.compare(Ground_Truth_Folder + 'L40_recent_project_first_icon.png', recent_project_first_icon, similarity=0.88)\n            if not check_first_icon:\n                # Similarity should be greater than 0.88\n                assert False, \"Recent project icon does not match GT (L40_recent_project_first_icon.png)! Similarity should > 0.88\"\n        \n        assert True"
    },
    {
        "name": "test_recent_project_func_16_2",
        "tags": [
            "recent_project_func",
            "recent_project"
        ],
        "marked_name": "[test_recent_project_func_16_2] Delete 1st recent project and verify \"No Recent Project\" is shown",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Delete 1st recent project",
            "2. Check (L.base.launcher_window.txt_no_recent_project) is shown"
        ],
        "full_code": "@pytest.mark.recent_project_func\n    @pytest.mark.recent_project\n    @pytest.mark.name('[test_recent_project_func_16_2] Delete 1st recent project and verify \"No Recent Project\" is shown')\n    def test_recent_project_func_16_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Delete 1st recent project\n        2. Check (L.base.launcher_window.txt_no_recent_project) is shown\n        '''\ndependency_test = \"test_recent_project_func_16_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Delete 1st recent project\"):\n            main_page.delete_first_recently_project()\n\n        with step(\"[Verify] Check that 'No Recent Project' is shown\"):\n            if not main_page.is_exist(L.base.launcher_window.txt_no_recent_project):\n                assert False, \"'No Recent Project' text is not displayed!\"\n\n        assert True"
    },
    {
        "name": "test_recent_project_func_16_3",
        "tags": [
            "recent_project_func",
            "recent_project",
            "open_project"
        ],
        "marked_name": "[test_recent_project_func_16_3] Open project via launcher and verify recent project list and icon as GT",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Open project by launch via click (L.base.launcher_window.btn_open_project) and deal with [Open Project] dialog (Test_Material_Folder + 'BFT_21_Stage1/can_del.pds')",
            "2. Click [Close] button to back to launcher",
            "3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] as Auto_Ground_Truth_Folder + 'L38_recent_project_list.png' and check as GT",
            "4. Screenshot (L.base.launcher_window.img_recently_icon) as Auto_Ground_Truth_Folder + 'L38_recent_project_first_icon.png' and check as GT"
        ],
        "full_code": "@pytest.mark.recent_project_func\n    @pytest.mark.recent_project\n    @pytest.mark.open_project\n    @pytest.mark.name('[test_recent_project_func_16_3] Open project via launcher and verify recent project list and icon as GT')\n    def test_recent_project_func_16_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Open project by launch via click (L.base.launcher_window.btn_open_project) and deal with [Open Project] dialog (Test_Material_Folder + 'BFT_21_Stage1/can_del.pds')\n        2. Click [Close] button to back to launcher\n        3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] as Auto_Ground_Truth_Folder + 'L38_recent_project_list.png' and check as GT\n        4. Screenshot (L.base.launcher_window.img_recently_icon) as Auto_Ground_Truth_Folder + 'L38_recent_project_first_icon.png' and check as GT\n        '''\ndependency_test = \"test_recent_project_func_16_2\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L38] 1.3 New Launcher > Recent Project > Check each project item\n        # with uuid(\"549406d6-e519-4b02-8bbd-e9c167fdce05\") as case:\n\n        with step(\"[Action] Open project via launcher and handle open project dialog\"):\n            main_page.click(L.base.launcher_window.btn_open_project)\n            # Wait for the dialog to be ready\n            time.sleep(DELAY_TIME * 2)\n            main_page.handle_open_project_dialog(Test_Material_Folder + \"BFT_21_Stage1/can_del.pds\")\n        \n        with step(\"[Action] Click [Close] button to return to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n        \n        with step(\"[Verify] Check recent project list screenshot as GT\"):\n            # Capture screenshot of the second element in launcher scroll area list\n            element = main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1]\n            screenshot_list = main_page.snapshot(element, file_name=Auto_Ground_Truth_Folder + \"L38_recent_project_list.png\")\n            check_list = main_page.compare(Ground_Truth_Folder + \"L38_recent_project_list.png\", screenshot_list, similarity=0.94)\n            if not check_list:\n                assert False, \"Recent project list does not match GT! Similarity should > 0.94\"\n        \n        with step(\"[Verify] Check recent project first icon screenshot as GT\"):\n            screenshot_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon, file_name=Auto_Ground_Truth_Folder + \"L38_recent_project_first_icon.png\")\n            check_icon = main_page.compare(Ground_Truth_Folder + \"L38_recent_project_first_icon.png\", screenshot_icon, similarity=0.94)\n            if not check_icon:\n                assert False, \"Recent project icon does not match GT! Similarity should > 0.94\"\n        assert True"
    },
    {
        "name": "test_recent_project_func_16_4",
        "tags": [
            "recent_project_func",
            "preferences"
        ],
        "marked_name": "[test_recent_project_func_16_4] Set Recently Used Projects value to 1 and verify",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [New Project] button on Launcher",
            "2. Click [Set User Preferences] > Switch to [Project] tab",
            "3. Set [Numbers of Recently Used Projects] to value (1)",
            "4. Get [Numbers of Recently Used Projects] value and verify it is '1'",
            "5. Click [OK] button to leave [Preferences page]"
        ],
        "full_code": "@pytest.mark.recent_project_func\n    @pytest.mark.preferences\n    @pytest.mark.name('[test_recent_project_func_16_4] Set Recently Used Projects value to 1 and verify')\n    def test_recent_project_func_16_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [New Project] button on Launcher\n        2. Click [Set User Preferences] > Switch to [Project] tab\n        3. Set [Numbers of Recently Used Projects] to value (1)\n        4. Get [Numbers of Recently Used Projects] value and verify it is '1'\n        5. Click [OK] button to leave [Preferences page]\n        '''\ndependency_test = \"test_recent_project_func_16_3\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L37] 1.3 New Launcher > Recent Project > Check total project item\n        # with uuid(\"8007768c-e38d-4a9e-a9b9-f365f0f71bbb\") as case:\n\n        with step(\"[Action] Click [New Project] button on Launcher\"):\n            main_page.click_new_project_on_launcher()\n        \n        with step(\"[Action] Open User Preferences and switch to Project tab\"):\n            main_page.click_set_user_preferences()\n            preferences_page.switch_to_project()\n        \n        with step(\"[Action] Set Numbers of Recently Used Projects to 1\"):\n            preferences_page.project.numbers_of_recently_used_project_set_value(1)\n            time.sleep(DELAY_TIME*0.5)\n        \n        with step(\"[Verify] Verify Numbers of Recently Used Projects is set to 1\"):\n            value = preferences_page.project.numbers_of_recently_used_project_get_value()\n            if str(value) != '1':\n                assert False, f\"Numbers of Recently Used Projects value mismatch! Expected '1', got '{value}'\"\n        \n        with step(\"[Action] Click [OK] button to leave Preferences page\"):\n            preferences_page.click_ok()\n        \n        assert True"
    },
    {
        "name": "test_recent_project_func_16_5",
        "tags": [
            "recent_project_func",
            "recent_project",
            "open_project"
        ],
        "marked_name": "[test_recent_project_func_16_5] Open packed project and verify recent project list and icon as GT",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)",
            "2. Click [Close] button to back to launcher",
            "3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] and check as GT (Ground_Truth_Folder + 'L38_recent_project_list.png')(similarity=0.99)",
            "4. Screenshot (L.base.launcher_window.img_recently_icon) and check as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png')(similarity=0.85)"
        ],
        "full_code": "@pytest.mark.recent_project_func\n    @pytest.mark.recent_project\n    @pytest.mark.open_project\n    @pytest.mark.name('[test_recent_project_func_16_5] Open packed project and verify recent project list and icon as GT')\n    def test_recent_project_func_16_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)\n        2. Click [Close] button to back to launcher\n        3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] and check as GT (Ground_Truth_Folder + 'L38_recent_project_list.png')(similarity=0.99)\n        4. Screenshot (L.base.launcher_window.img_recently_icon) and check as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png')(similarity=0.85)\n        '''\ndependency_test = \"test_recent_project_func_16_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Open packed project\"):\n            project_name = 'Packed_Project/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk'\n            save_name = 'Extracted_Folder/test_recent_project_func_16_1'\n            self.open_packed_project(project_name, save_name)\n\n        with step(\"[Action] Click [Close] button to back to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n\n        with step(\"[Verify] Check recent project list screenshot as GT\"):\n            element = main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1]\n            screenshot_list = main_page.snapshot(element)\n            check_list = main_page.compare(Ground_Truth_Folder + 'L38_recent_project_list.png', screenshot_list, similarity=0.99)\n            if check_list:\n                assert False, \"Recent project list screenshot does not match GT! Similarity should < 0.99\"\n\n        with step(\"[Verify] Check recent project first icon screenshot as GT\"):\n            screenshot_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon)\n            check_icon = main_page.compare(Ground_Truth_Folder + 'L40_recent_project_first_icon.png', screenshot_icon, similarity=0.85)\n            if not check_icon:\n                # Similarity should be greater than 0.85\n                assert False, \"Recent project icon does not match GT! Similarity should > 0.85\"\n        assert True"
    },
    {
        "name": "test_launcher_func_17_1",
        "tags": [
            "launcher_func",
            "launch",
            "media_room",
            "search_library"
        ],
        "marked_name": "[test_launcher_func_17_1] Search (\\) in library",
        "description": [
            "1. Clear cache and start APP",
            "2. Screenshot (locator=main_page.area.library_icon_view)",
            "3. Search '\\' in library and verify (L.media_room.txt_no_results_for_backslash) is shown",
            "4. Check preview is updated (similarity=0.55)",
            "5. Click [Cancel] button in search library"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launch\n    @pytest.mark.media_room\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_launcher_func_17_1] Search (\\) in library')\n    def test_launcher_func_17_1(self):\n    '''\n        1. Clear cache and start APP\n        2. Screenshot (locator=main_page.area.library_icon_view)\n        3. Search '\\' in library and verify (L.media_room.txt_no_results_for_backslash) is shown\n        4. Check preview is updated (similarity=0.55)\n        5. Click [Cancel] button in search library\n        '''\nwith step(\"[Action] Clear cache and start APP\"):\n            main_page.clear_cache()\n            main_page.start_app()\n\n        # [L137] 2.1 Media Room > Search > Input \"\\\" character\n        # with uuid(\"724e6ae1-8e88-4304-9ae8-e327dc38ed8c\") as case:\n\n        with step(\"[Action] Capture screenshot of library icon view\"):\n            library_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view, file_name=Auto_Ground_Truth_Folder + 'L137.png')\n\n        with step(\"[Action] Search backslash in library\"):\n            media_room_page.search_library('\\\\')\n\n        with step(\"[Verify] Verify no results text is shown\"):\n            if not main_page.is_exist(L.media_room.txt_no_results_for_backslash):\n                assert False, \"No results text for backslash search is not displayed!\"\n\n        with step(\"[Verify] Check preview is updated\"):\n            preview_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)\n            if main_page.compare(library_snapshot, preview_snapshot, similarity=0.55):\n                assert False, \"Preview did not update as expected! Similarity should < 0.55\"\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_2",
        "tags": [
            "launcher_func",
            "media_room",
            "search_library"
        ],
        "marked_name": "[test_launcher_func_17_2] Search (.) in library and verify no results",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Search '.' in library and verify no results",
            "2. Check preview (locator=main_page.area.library_icon_view) is as (Auto_Ground_Truth_Folder + 'L137.png') (similarity=0.99)"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.media_room\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_launcher_func_17_2] Search (.) in library and verify no results')\n    def test_launcher_func_17_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Search '.' in library and verify no results\n        2. Check preview (locator=main_page.area.library_icon_view) is as (Auto_Ground_Truth_Folder + 'L137.png') (similarity=0.99)\n        '''\ndependency_test = \"test_launcher_func_17_1\"\n        self.ensure_dependency(dependency_test)\n\n        # [L136] 2.1 Media Room > Search > Input \".\" character\n        # with uuid(\"53f02d9c-36a4-42a6-8990-1f5d996130cc\") as case:\n\n        with step(\"[Action] Search '.' in library\"):\n            media_room_page.search_library(\".\")\n\n            # search .\n            # main_page.click(L.media_room.input_search)\n            # main_page.keyboard.send(\".\")\n            # time.sleep(DELAY_TIME)\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            # main_page.move_mouse_to_0_0()\n            # time.sleep(DELAY_TIME)\n\n        with step(\"[Verify] Check preview against GT (L137.png)\"):\n            preview_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)\n            check_preview = main_page.compare(\n                Auto_Ground_Truth_Folder + \"L137.png\",\n                preview_snapshot,\n                similarity=0.99\n            )\n            if not check_preview:\n                assert False, \"Preview does not match (Auto_Ground_Truth_Folder + L137.png)! Similarity should > 0.99\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_3",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_3] Hover on launcher button  [Video Stabilizer] and verify showcase title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Close] button to back to launcher",
            "2. Hover on btn (Video Stabilizer)(L.base.launcher_window.btn_video_stabilizer) on launcher",
            "3. Verify title is 'Video Stabilizer'",
            "4. Verify description is 'Eliminate unwanted camera shakiness and jitters.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_3] Hover on launcher button  [Video Stabilizer] and verify showcase title and description')\n    def test_launcher_func_17_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Close] button to back to launcher\n        2. Hover on btn (Video Stabilizer)(L.base.launcher_window.btn_video_stabilizer) on launcher\n        3. Verify title is 'Video Stabilizer'\n        4. Verify description is 'Eliminate unwanted camera shakiness and jitters.'\n        '''\ndependency_test = \"test_launcher_func_17_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L17] 1.3 New Launcher > Showcase > Video Stabilizer > Caption & Text\n        # with uuid(\"83fce6dc-f677-4686-bb9b-52d3c90e35c6\") as case:\n\n        with step(\"[Action] Click [Close] button to back to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n\n        with step(\"[Action] Hover on btn (Video Stabilizer) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_stabilizer)\n\n        with step(\"[Verify] Check that show case title is 'Video Stabilizer'\"):\n            # Verify that the title value equals the expected string\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'Video Stabilizer':\n                assert False, f\"Show case title does not match expected value! Expected 'Video Stabilizer', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Eliminate unwanted camera shakiness and jitters.'\"):\n            # Verify that the description value equals the expected string\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Eliminate unwanted camera shakiness and jitters.':\n                assert False, f\"Show case description does not match expected value! Expected 'Eliminate unwanted camera shakiness and jitters.', got '{target.AXValue}'\"\n        assert True"
    },
    {
        "name": "test_launcher_func_17_4",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_4] Hover on launcher button [AI Audio Denoise] and verify showcase title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise) on launcher",
            "2. Verify title is 'AI Audio Denoise'",
            "3. Verify description is 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_4] Hover on launcher button [AI Audio Denoise] and verify showcase title and description')\n    def test_launcher_func_17_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise) on launcher\n        2. Verify title is 'AI Audio Denoise'\n        3. Verify description is 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.'\n        '''\ndependency_test = \"test_launcher_func_17_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L32] 1.3 New Launcher > Showcase > AI Audio Denoise > Caption & Text\n        # with uuid(\"b8135996-1a91-48ef-9502-57f59dad32c0\") as case:\n        with step(\"[Action] Hover on btn (AI Audio Denoise) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_audio_denoise)\n\n        with step(\"[Verify] Check that show case title is 'AI Audio Denoise'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'AI Audio Denoise':\n                assert False, f\"Show case title does not match expected value! Expected 'AI Audio Denoise', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.':\n                assert False, f\"Show case description does not match expected value! Expected 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_5",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_5] Hover on launcher button [AI Body Effect] and verify showcase title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect) on launcher",
            "2. Verify title is 'AI Body Effects'",
            "3. Verify description is 'Instantly apply visual effects to moving people and objects.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_5] Hover on launcher button [AI Body Effect] and verify showcase title and description')\n    def test_launcher_func_17_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect) on launcher\n        2. Verify title is 'AI Body Effects'\n        3. Verify description is 'Instantly apply visual effects to moving people and objects.'\n        '''\ndependency_test = \"test_launcher_func_17_4\"\n        self.ensure_dependency(dependency_test)\n\n        \n        # [L14] 1.3 New Launcher > Showcase > Body Effect > Caption & Text\n        # with uuid(\"a316905c-e8b5-4271-9dc1-1f4485c684a8\") as case:\n\n        with step(\"[Action] Hover on btn (AI Body Effect) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)\n\n        with step(\"[Verify] Check that show case title is 'AI Body Effects'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'AI Body Effects':\n                assert False, f\"Show case title does not match expected value! Expected 'AI Body Effects', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Instantly apply visual effects to moving people and objects.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Instantly apply visual effects to moving people and objects.':\n                assert False, f\"Show case description does not match expected value! Expected 'Instantly apply visual effects to moving people and objects.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_6",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_6] Hover on launcher button [AI Wind Removal] and verify showcase title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher button (AI Wind Removal)(L.base.launcher_window.btn_wind_removal)",
            "2. Verify title is 'AI Wind Removal'",
            "3. Verify description is 'Detect and reduce wind noises for crisp, clean audio.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_6] Hover on launcher button [AI Wind Removal] and verify showcase title and description')\n    def test_launcher_func_17_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher button (AI Wind Removal)(L.base.launcher_window.btn_wind_removal)\n        2. Verify title is 'AI Wind Removal'\n        3. Verify description is 'Detect and reduce wind noises for crisp, clean audio.'\n        '''\ndependency_test = \"test_launcher_func_17_5\"\n        self.ensure_dependency(dependency_test)\n\n        # [L23] 1.3 New Launcher > Showcase > AI Wind Removal > Caption & Text\n        # with uuid(\"4735b0f6-2ee7-4ded-a083-6e7abb84fb40\") as case:\n\n        with step(\"[Action] Hover on launcher button [AI Wind Removal] on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_wind_removal)\n\n        with step(\"[Verify] Check that show case title is 'AI Wind Removal'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'AI Wind Removal':\n                assert False, f\"Show case title does not match expected value! Expected 'AI Wind Removal', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Detect and reduce wind noises for crisp, clean audio.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Detect and reduce wind noises for crisp, clean audio.':\n                assert False, f\"Show case description does not match expected value! Expected 'Detect and reduce wind noises for crisp, clean audio.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_7",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_7] Hover on launcher btn [AI Audio Denoise] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_7] Hover on launcher btn [AI Audio Denoise] and verify intro video is playing')\n    def test_launcher_func_17_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_launcher_func_17_6\"\n        self.ensure_dependency(dependency_test)\n\n        # [L33] 1.3 New Launcher > Showcase > AI Audio Denoise > Video\n        # with uuid(\"c7390426-3098-479c-b2bb-dd158f77b08a\") as case:\n\n        with step(\"[Action] Hover on launcher btn (AI Audio Denoise) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_audio_denoise)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n            \n        assert True"
    },
    {
        "name": "test_launcher_func_17_8",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_8] Hover on launcher btn [Greener Grass] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)",
            "2. Verify intro video is playin"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_8] Hover on launcher btn [Greener Grass] and verify intro video is playing')\n    def test_launcher_func_17_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)\n        2. Verify intro video is playin\n        '''\ndependency_test = \"test_launcher_func_17_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L27] 1.3 New Launcher > Showcase > Greener Grass > Video\n        # with uuid(\"0e0facdb-bc69-4595-94dc-cc05fe2521f7\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Greener Grass) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_9",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_9] Hover on launcher btn [Video Denoise] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (Video Denoise)(L.base.launcher_window.btn_video_denoise)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_9] Hover on launcher btn [Video Denoise] and verify intro video is playing')\n    def test_launcher_func_17_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (Video Denoise)(L.base.launcher_window.btn_video_denoise)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_launcher_func_17_8\"\n        self.ensure_dependency(dependency_test)\n\n        # [L21] 1.3 New Launcher > Showcase > Video Denoise > Video\n        # with uuid(\"33f8faac-3ae8-4556-a195-5b1e6486e856\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Video Denoise) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_denoise)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_10",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_10] Hover on launcher btn [AI Body Effect] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_10] Hover on launcher btn [AI Body Effect] and verify intro video is playing')\n    def test_launcher_func_17_10(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_launcher_func_17_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L15] 1.3 New Launcher > Showcase > Body Effect > Video\n        # with uuid(\"5b1b5a5f-4fb7-42c7-b2b1-9e20b9731c84\") as case:\n\n        with step(\"[Action] Hover on launcher btn (AI Body Effect) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_11",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_11] Hover on launcher btn [Wind Removal] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (Wind Removal)(L.base.launcher_window.btn_wind_removal)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_11] Hover on launcher btn [Wind Removal] and verify intro video is playing')\n    def test_launcher_func_17_11(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (Wind Removal)(L.base.launcher_window.btn_wind_removal)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_launcher_func_17_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L24] 1.3 New Launcher > Showcase > Wind Removal > Video\n        # with uuid(\"4c5e99ad-46bd-413f-be95-c56c45f80fb7\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Wind Removal) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_12",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_12] Hover on launcher btn [Greener Grass], click intro video area, check import dialog, and press ESC to close",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)",
            "2. Click intro video area",
            "3. Check that import dialog is shown with title 'Greener Grass'",
            "4. Press [ESC] key to close import dialog"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_12] Hover on launcher btn [Greener Grass], click intro video area, check import dialog, and press ESC to close')\n    def test_launcher_func_17_12(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)\n        2. Click intro video area\n        3. Check that import dialog is shown with title 'Greener Grass'\n        4. Press [ESC] key to close import dialog\n        '''\ndependency_test = \"test_launcher_func_17_11\"\n        self.ensure_dependency(dependency_test)\n\n        # [L28] 1.3 New Launcher > Showcase > Greener Grass > Single click on banner area\n        # with uuid(\"72234195-e74c-4ad4-a61c-572ed387a661\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Greener Grass) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)\n\n        with step(\"[Action] Click intro video area\"):\n            main_page.click(L.base.launcher_window.show_case_video_area)\n\n        with step(\"[Verify] Check that import dialog is shown with title 'Greener Grass'\"):\n            dialog = main_page.exist(L.base.launcher_window.import_dialog)\n            if dialog.AXTitle != 'Greener Grass':\n                assert False, f\"Import dialog title does not match expected value! Expected 'Greener Grass', got '{dialog.AXTitle}'\"\n\n        with step(\"[Action] Press [ESC] key to close import dialog\"):\n            main_page.press_esc_key()\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_13",
        "tags": [
            "launcher_func",
            "pip_room",
            "search_library",
            "content_pack"
        ],
        "marked_name": "[test_launcher_func_17_13] Click [New Project] > Search object in pip room",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [New Project] button on Launcher",
            "2. Enter room (pip room)(4)",
            "3. Click search field (L.media_room.input_search) > Click [Arrow Down] by input keyboard > Click [Enter]",
            "4. Verify that search field is updated with 'love'",
            "5. Verify able to select media ('Love Sticker 06') by library icon view"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.pip_room\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_launcher_func_17_13] Click [New Project] > Search object in pip room')\n    def test_launcher_func_17_13(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [New Project] button on Launcher\n        2. Enter room (pip room)(4)\n        3. Click search field (L.media_room.input_search) > Click [Arrow Down] by input keyboard > Click [Enter]\n        4. Verify that search field is updated with 'love'\n        5. Verify able to select media ('Love Sticker 06') by library icon view\n        '''\ndependency_test = \"test_search_media_func_17_12\"\n        self.ensure_dependency(dependency_test)\n\n        # [L207] 2.3 Pip Room > Search IAD > by suggestion keyword\n        # with uuid(\"a095de47-8e47-44b3-8030-5f1a08c621ee\") as case:\n\n        with step(\"[Action] Click [New Project] button on Launcher\"):\n            main_page.click_new_project_on_launcher()\n\n        with step(\"[Action] Enter pip room with parameter 4\"):\n            main_page.enter_room(4)\n\n        with step(\"[Action] Click search field (L.media_room.input_search) > Click [Arrow Down] by input keyboard > Click [Enter]\"):\n            # click search filed\n            main_page.click(L.media_room.input_search)\n            time.sleep(DELAY_TIME)\n            # click arrow down > click [Enter]\n            main_page.input_keyboard(main_page.keyboard.key.down)\n            time.sleep(DELAY_TIME)\n            main_page.press_enter_key()\n            time.sleep(DELAY_TIME)\n\n        with step(\"[Verify] Check that search field is updated with 'love'\"):\n            search_field = main_page.exist(L.media_room.input_search)\n            if search_field.AXValue.lower() != 'love':\n                assert False, f\"Search field value is not 'love'! Expected: 'love', Got '{search_field.AXValue}'\"\n\n        with step(\"[Verify] Select media 'Love Sticker 06' by library icon view\"):\n            if not main_page.select_library_icon_view_media('Love Sticker 06'):\n                assert False, \"Unable to select media 'Love Sticker 06' by library icon view\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_14",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_14] Hover on launcher button [Video Denoise] and verify title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Close] Button to back to launcher",
            "2. Hover on launcher button (Video Denoise)(L.base.launcher_window.btn_video_denoise)",
            "3. Verify title is 'Video Denoise'",
            "4. Verify description is 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_14] Hover on launcher button [Video Denoise] and verify title and description')\n    def test_launcher_func_17_14(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Close] Button to back to launcher\n        2. Hover on launcher button (Video Denoise)(L.base.launcher_window.btn_video_denoise)\n        3. Verify title is 'Video Denoise'\n        4. Verify description is 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.'\n        '''\ndependency_test = \"test_launcher_func_17_13\"\n        self.ensure_dependency(dependency_test)\n\n        # [L20] 1.3 New Launcher > Showcase > Video Denoise > Caption & Text\n        # with uuid(\"aa3f348a-5d1d-4fbd-984f-82386e38edb6\") as case:\n\n        with step(\"[Action] Click [Close] Button to back to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n\n        with step(\"[Action] Hover on launcher button (Video Denoise) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_denoise)\n\n        with step(\"[Verify] Check that show case title is 'Video Denoise'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'Video Denoise':\n                assert False, f\"Show case title does not match expected value! Expected 'Video Denoise', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.':\n                assert False, f\"Show case description does not match expected value! Expected 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_15",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_15] Hover on launcher btn [Greener Grass] and verify title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher button (Greener Grass)(L.base.launcher_window.btn_greener_grass)",
            "2. Verify title is 'Greener Grass'",
            "3. Verify description is 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.'"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_15] Hover on launcher btn [Greener Grass] and verify title and description')\n    def test_launcher_func_17_15(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher button (Greener Grass)(L.base.launcher_window.btn_greener_grass)\n        2. Verify title is 'Greener Grass'\n        3. Verify description is 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.'\n        '''\ndependency_test = \"test_launcher_func_17_14\"\n        self.ensure_dependency(dependency_test)\n\n        # [L26] 1.3 New Launcher > Showcase > Greener Grass > Caption & Text\n        # with uuid(\"44398a76-c9e5-469b-ba2a-3df16d5b6e55\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Greener Grass) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)\n\n        with step(\"[Verify] Check that show case title is 'Greener Grass'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != 'Greener Grass':\n                assert False, f\"Show case title does not match expected value! Expected 'Greener Grass', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.':\n                assert False, f\"Show case description does not match expected value! Expected 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_16",
        "tags": [
            "launcher_func",
            "launcher"
        ],
        "marked_name": "[test_launcher_func_17_16] Hover on launcher btn [AI Background Remover] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_launcher_func_17_16] Hover on launcher btn [AI Background Remover] and verify intro video is playing')\n    def test_launcher_func_17_16(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_launcher_func_17_15\"\n        self.ensure_dependency(dependency_test)\n\n        # [L30] 1.3 New Launcher > Showcase > AI Background Remover > Video\n        # with uuid(\"0b931129-a8f2-410d-b753-04af2d95997b\") as case:\n\n        with step(\"[Action] Hover on launcher btn (AI Background Remover) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_bg_remover)\n\n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n\n        assert True"
    },
    {
        "name": "test_launcher_func_17_17",
        "tags": [
            "launcher_func",
            "launcher",
            "aspect_ratio"
        ],
        "marked_name": "[test_launcher_func_17_17] Verify aspect ratio update on launcher and main page",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set [Aspect Ratio] to (16:9) on launcher",
            "2. Choose [Aspect Ratio] to (9:16) on launcher",
            "3. Click [New Project] button on Launcher",
            "4. Click [Aspect Ratio] button on main page",
            "5. Verify [Aspect Ratio] is set to (9:16) by (L.main.option_project_aspect_ratio_9_16).AXMenuItemMarkChar == '✓'",
            "6. Click [Aspect Ratio] button on main page > Move mouse to 0_0 > Set [Aspect Ratio] to (16:9) at main page"
        ],
        "full_code": "@pytest.mark.launcher_func\n    @pytest.mark.launcher\n    @pytest.mark.aspect_ratio\n    @pytest.mark.name('[test_launcher_func_17_17] Verify aspect ratio update on launcher and main page')\n    def test_launcher_func_17_17(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set [Aspect Ratio] to (16:9) on launcher\n        2. Choose [Aspect Ratio] to (9:16) on launcher\n        3. Click [New Project] button on Launcher\n        4. Click [Aspect Ratio] button on main page\n        5. Verify [Aspect Ratio] is set to (9:16) by (L.main.option_project_aspect_ratio_9_16).AXMenuItemMarkChar == '✓'\n        6. Click [Aspect Ratio] button on main page > Move mouse to 0_0 > Set [Aspect Ratio] to (16:9) at main page\n        '''\ndependency_test = \"test_launcher_func_17_16\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L35] 1.3 New Launcher > Project Area > Aspect ratio + New Project\n        # with uuid(\"9a9308ae-4b0f-41b4-8931-bd0bff3e12c3\") as case:\n\n        with step(\"[Action] Set [Aspect Ratio] to (16:9) on launcher\"):\n            main_page.click(L.base.launcher_window.btn_aspect_ratio_16_9)\n            time.sleep(DELAY_TIME * 2)\n\n        with step(\"[Action] Choose [Aspect Ratio] to (9:16) on launcher\"):\n            items = main_page.exist(L.base.launcher_window.aspect_ratio_list)\n            for item in items:\n                if item.AXValue.strip() == '9:16':\n                    main_page.mouse.click(*item.center)\n\n        with step(\"[Action] Click [New Project] button on Launcher\"):\n            main_page.click_new_project_on_launcher()\n\n        with step(\"[Action] Click [Aspect Ratio] button on main page\"):\n            main_page.click(L.main.btn_project_aspect_ratio)\n\n        with step(\"[Verify] Check that [Aspect Ratio] is set to (9:16)\"):\n            target = main_page.exist(L.main.option_project_aspect_ratio_9_16)\n            if target.AXMenuItemMarkChar != '✓':\n                assert False, \"Aspect ratio is not set to (9:16) as expected\"\n\n        with step(\"[Action] Change [Aspect Ratio] to (16:9) on main page\"):\n            main_page.click(L.main.btn_project_aspect_ratio)\n            main_page.move_mouse_to_0_0()\n            main_page.set_project_aspect_ratio_16_9()\n\n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_1",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "preferences",
            "title_designer",
            "search_library",
            "content_pack",
            "launch",
            "open_project",
            "timecode"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_1] Title Particle Cross Function Test",
        "description": [
            "1. Start App",
            "2. Set User Preferences: Switch to Editing tab, set default Title duration to 10.0, and click OK to leave Preferences page",
            "3. Open packed project ('Packed_Project/test_title_particle_effect_launcher_cross_func_18_1.pdk', 'Extracted_Folder/test_title_particle_effect_launcher_cross_func_18_1')",
            "4. Set timeline timecode to '00_00_27_07'",
            "5. Enter room (Title Room) with index 1",
            "6. Search for component 'Windshield' in library, select media by library icon view, and insert media to selected track",
            "7. Open designer window via tips area and switch to express mode (Mode=1)",
            "8. Mouse click on the title designer frame preview, double click to enable modify, and edit Title to '恭ぱ囧＠'",
            "9. Get Title Text Content and verify it equals '恭ぱ囧＠'"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.preferences\n    @pytest.mark.title_designer\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_1] Title Particle Cross Function Test')\n    def test_title_particle_effect_launcher_cross_func_18_1(self):\n    '''\n        1. Start App\n        2. Set User Preferences: Switch to Editing tab, set default Title duration to 10.0, and click OK to leave Preferences page\n        3. Open packed project ('Packed_Project/test_title_particle_effect_launcher_cross_func_18_1.pdk', 'Extracted_Folder/test_title_particle_effect_launcher_cross_func_18_1')\n        4. Set timeline timecode to '00_00_27_07'\n        5. Enter room (Title Room) with index 1\n        6. Search for component 'Windshield' in library, select media by library icon view, and insert media to selected track\n        7. Open designer window via tips area and switch to express mode (Mode=1)\n        8. Mouse click on the title designer frame preview, double click to enable modify, and edit Title to '恭ぱ囧＠'\n        9. Get Title Text Content and verify it equals '恭ぱ囧＠'\n        '''\nwith step(\"[Action] Start App\"):\n            main_page.start_app()\n\n        with step(\"[Action] Set User Preferences to Editing and set default Title duration to 10.0\"):\n            # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)\n            main_page.click_set_user_preferences()\n            preferences_page.switch_to_editing()\n            preferences_page.editing.durations_title_set_value('10.0')\n            preferences_page.click_ok()\n\n        with step(\"[Action] Open packed project\"):\n            self.open_packed_project('Packed_Project/test_title_particle_effect_launcher_cross_func_18_1.pdk',\n                                    'Extracted_Folder/test_title_particle_effect_launcher_cross_func_18_1')\n\n        with step(\"[Action] Set timeline timecode to '00_00_27_07'\"):\n            main_page.set_timeline_timecode('00_00_27_07')\n\n        # [L73] 2.3 Title Room > Designer Entry > Modify Title template\n        # with uuid(\"2e04cf5c-c013-4165-97b5-30463bf82f88\") as case:\n\n        with step(\"[Action] Enter Title Room\"):\n            main_page.enter_room(1)\n\n        with step(\"[Action] Search for 'Windshield' and insert media\"):\n            media_room_page.search_library('Windshield')\n            # Input search Windshield\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Windshield')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            main_page.select_library_icon_view_media('Windshield')\n            main_page.tips_area_insert_media_to_selected_track()\n\n        with step(\"[Action] Open designer window and switch to express mode (Mode=1)\"):\n            main_page.tips_area_click_designer(check_designer=1)\n            title_designer_page.switch_mode()\n\n        with step(\"[Action] Modify title in designer window\"):\n            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)\n            main_page.mouse.click(*canvas_elem.center)\n            main_page.double_click()\n            title_designer_page.edit_object_title('恭ぱ囧＠')\n\n        with step(\"[Verify] Check title text content is '恭ぱ囧＠'\"):\n            actual_title = title_designer_page.get_title_text_content()\n            assert actual_title == '恭ぱ囧＠', f\"Expected title '恭ぱ囧＠', got '{actual_title}'\"\n\n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_2",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "title_designer"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_2] Verify title text to 2 lines and preview match GT",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set text string to Two line by clicking on the text content area, pressing Enter, and inputting 'ｶﾞヂョたりポｶﾞ'",
            "2. Check preview (locator=L.title_designer.area.frame_video_preview) matches GT (Ground_Truth_Folder + 'L73.png') with similarity=0.95",
            "3. Click OK to leave title designer"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.title_designer\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_2] Verify title text to 2 lines and preview match GT')\n    def test_title_particle_effect_launcher_cross_func_18_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set text string to Two line by clicking on the text content area, pressing Enter, and inputting 'ｶﾞヂョたりポｶﾞ'\n        2. Check preview (locator=L.title_designer.area.frame_video_preview) matches GT (Ground_Truth_Folder + 'L73.png') with similarity=0.95\n        3. Click OK to leave title designer\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_1\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Set text string to Two line\"):\n            title_text_elem = main_page.exist(L.title_designer.area.edittext_text_content)\n            main_page.mouse.click(*title_text_elem.center)\n            main_page.press_enter_key()\n            main_page.input_text('ｶﾞヂョたりポｶﾞ')\n        \n        with step(\"[Verify] Check preview matches GT (L73.png)\"):\n            preview = main_page.snapshot(\n                locator=L.title_designer.area.frame_video_preview,\n                file_name=Auto_Ground_Truth_Folder + 'L73.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L73.png',\n                preview,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match Ground Truth (L73.png)! Similarity should > 0.95\"\n        \n        with step(\"[Action] Click OK to leave title designer\"):\n            title_designer_page.click_ok()\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_3",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "play_video"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_3] Verify preview update and stop in playback window",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click preview operation (Play) in playback window",
            "2. Check preview window is different from the previous state (main_page.area.preview.main, sec=2.5)",
            "3. Click preview operation (STOP) in playback window"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.play_video\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_3] Verify preview update and stop in playback window')\n    def test_title_particle_effect_launcher_cross_func_18_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click preview operation (Play) in playback window\n        2. Check preview window is different from the previous state (main_page.area.preview.main, sec=2.5)\n        3. Click preview operation (STOP) in playback window\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_2\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click preview operation (Play) in playback window\"):\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Play\")\n\n        with step(\"[Verify] Check preview window is different after 2.5 secs\"):\n            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=2.5)\n            if not preview_changed:\n                # Similarity should be greater than expected threshold when preview updates\n                assert False, \"Preview is not updated when playing video in 2.5 secs!\"\n\n        with step(\"[Action] Click preview operation (STOP) in playback window\"):\n            playback_window_page.Edit_Timeline_PreviewOperation(\"Stop\")\n\n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_4",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "timecode",
            "timeline",
            "content_pack"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_4] Insert media and verify preview update with Motion Graphics",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Set Timecode to ('00_00_37_07') at main page",
            "2. Select timeline track 3",
            "3. Select category 'Motion Graphics' in Library Room",
            "4. Select media 'Motion Graphics 007' in Library Room by icon view",
            "5. Insert media to selected track from tip area",
            "6. Set Timecode to ('00_00_06_16') at main page",
            "7. Check preview is as GT (Ground_Truth_Folder + 'L65.png') (similarity=0.95)",
            "8. Click [STOP] in playback window to return (00:00:00:00)"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.timecode\n    @pytest.mark.timeline\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_4] Insert media and verify preview update with Motion Graphics')\n    def test_title_particle_effect_launcher_cross_func_18_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Set Timecode to ('00_00_37_07') at main page\n        2. Select timeline track 3\n        3. Select category 'Motion Graphics' in Library Room\n        4. Select media 'Motion Graphics 007' in Library Room by icon view\n        5. Insert media to selected track from tip area\n        6. Set Timecode to ('00_00_06_16') at main page\n        7. Check preview is as GT (Ground_Truth_Folder + 'L65.png') (similarity=0.95)\n        8. Click [STOP] in playback window to return (00:00:00:00)\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_3\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Set Timecode to '00_00_37_07' at main page\"):\n            main_page.set_timeline_timecode('00_00_37_07')\n        \n        # [L65] 2.3 Title Room > Add Built-In templates to timeline & Preview >  Motion Graphic 007, Clover_04, Windshield\n        # with uuid(\"e99fa28d-f1cd-4d28-8a93-acb64c81441b\") as case:\n\n        with step(\"[Action] Select timeline track 3\"):\n            main_page.timeline_select_track(3)\n        \n        with step(\"[Action] Select category 'Motion Graphics' in Library Room\"):\n            main_page.select_LibraryRoom_category('Motion Graphics')\n        \n        with step(\"[Action] Select media 'Motion Graphics 007' by library icon view\"):\n            main_page.select_library_icon_view_media('Motion Graphics 007')\n        \n        with step(\"[Action] Insert media to selected track\"):\n            main_page.tips_area_insert_media_to_selected_track()\n        \n        with step(\"[Action] Set Timecode to '00_00_06_16' at main page\"):\n            main_page.set_timeline_timecode('00_00_06_16')\n        \n        with step(\"[Verify] Check preview matches GT (L65.png)\"):\n            preview = main_page.snapshot(locator=main_page.area.preview.main,\n                                            file_name=Auto_Ground_Truth_Folder + 'L65.png')\n            if not main_page.compare(Ground_Truth_Folder + 'L65.png', preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match Ground Truth (L65.png)! Similarity should > 0.95\"\n        \n        with step(\"[Action] Click [STOP] in playback window\"):\n            playback_window_page.Edit_Timeline_PreviewOperation('Stop')\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_5",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "search_library",
            "content_pack"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_5] Search Maple in Particle Room and verify preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Room (Particle Room) (index 5)",
            "2. Search conponent 'Maple' in library",
            "3. Select track 2, select media 'Maple' by library icon view, and insert media to selected track from tip area",
            "4. Set timecode to ('00_00_02_28') and Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L69.png') with similarity=0.95"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_5] Search Maple in Particle Room and verify preview')\n    def test_title_particle_effect_launcher_cross_func_18_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Room (Particle Room) (index 5)\n        2. Search conponent 'Maple' in library\n        3. Select track 2, select media 'Maple' by library icon view, and insert media to selected track from tip area\n        4. Set timecode to ('00_00_02_28') and Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L69.png') with similarity=0.95\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_4\"\n        self.ensure_dependency(dependency_test)\n        \n        \n        # [L69] 2.3 Title Room > Add Built-In templates to timeline & Preview >  Maple\n        # with uuid(\"b8589cce-cb99-4c02-8edd-bb81daf86604\") as case:\n\n        with step(\"[Action] Enter Particle Room (Room index 5)\"):\n            main_page.enter_room(5)\n        \n        with step(\"[Action] Search 'Maple' in library\"):\n            # # Input search Maple\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Maple')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library('Maple')\n        \n        with step(\"[Action] Select track 2, select media 'Maple' and insert media\"):\n            main_page.timeline_select_track(2)\n            main_page.select_library_icon_view_media('Maple')\n            main_page.tips_area_insert_media_to_selected_track()\n        \n        with step(\"[Verify] Check preview matches GT (L69.png)\"):\n            main_page.set_timeline_timecode('00_00_02_28')\n            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L69.png')\n            if not main_page.compare(Ground_Truth_Folder + 'L69.png', preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match Ground Truth (L69.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_6",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "particle_designer",
            "properties"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_6] Verify particle designer adjustments and preview match GT",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Do 3 times:",
            "- Click [Designer] from the tips area with check_designer=2",
            "- Drag the [Size] slider to 186283 in express mode",
            "- Click [OK] to leave particle designer",
            "2. Check Preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L76.png') with similarity=0.95"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.particle_designer\n    @pytest.mark.properties\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_6] Verify particle designer adjustments and preview match GT')\n    def test_title_particle_effect_launcher_cross_func_18_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Do 3 times:\n            - Click [Designer] from the tips area with check_designer=2\n            - Drag the [Size] slider to 186283 in express mode\n            - Click [OK] to leave particle designer\n        2. Check Preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L76.png') with similarity=0.95\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_5\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L76] 2.3 Particle Room > Designer Entry > Modify Particle template\n        # with uuid(\"54220852-77ba-4003-87cb-b106f9afcb51\") as case:\n\n        with step('[Action] Re-enter [Particle Designer] for 3 times and Drag [Size] slider to (186283) in express mode'):\n            for _ in range(3):\n                with step(\"[Action] Click [Designer] from tips area with check_designer=2\"):\n                    main_page.tips_area_click_designer(check_designer=2)\n                with step(\"[Action] Drag [Size] slider to (186283) in express mode\"):\n                    particle_designer_page.express_mode.drag_Size_slider(186283)\n                with step(\"[Action] Click [OK] to leave particle designer\"):\n                    particle_designer_page.click_OK()\n        \n        with step(\"[Verify] Check preview matches GT (L76.png)\"):\n            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L76.png')\n            if not main_page.compare(Ground_Truth_Folder + 'L76.png', preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L76.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_7",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "search_library",
            "effect_room"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_7] Verify timeline insertion and preview for Analog Film",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select timeline track 1",
            "2. Click [STOP] in playback window",
            "3. Enter Room (Effect Room) (index 3)",
            "4. Search for 'Analog' in library",
            "5. Drag media ('Analog Film') to timeline playhead position",
            "6. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main,",
            "file_name=Auto_Ground_Truth_Folder + 'L67_analog.png') matches GT (Ground_Truth_Folder + 'L67_analog.png') with similarity=0.95"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.search_library\n    @pytest.mark.effect_room\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_7] Verify timeline insertion and preview for Analog Film')\n    def test_title_particle_effect_launcher_cross_func_18_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select timeline track 1\n        2. Click [STOP] in playback window\n        3. Enter Room (Effect Room) (index 3)\n        4. Search for 'Analog' in library\n        5. Drag media ('Analog Film') to timeline playhead position\n        6. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main,\n        file_name=Auto_Ground_Truth_Folder + 'L67_analog.png') matches GT (Ground_Truth_Folder + 'L67_analog.png') with similarity=0.95\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_6\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L67] 2.3 Add build-in template to timeline > Effect : back light, Analog film\n        # with uuid(\"97b588be-0e89-402e-9bda-259f71152dd7\") as case:\n            \n        with step(\"[Action] Select timeline track 1\"):\n            main_page.timeline_select_track(1)\n        \n        with step(\"[Action] Click [STOP] in playback window\"):\n            playback_window_page.Edit_Timeline_PreviewOperation('Stop')\n        \n        with step(\"[Action] Enter Room (Effect Room) with index 3\"):\n            main_page.enter_room(3)\n        \n        with step(\"[Action] Search for 'Analog' in library\"):\n            # # Input search Analog\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Analog')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library(\"Analog\")\n        \n        with step(\"[Action] Drag media 'Analog Film' to timeline playhead position\"):\n            main_page.drag_media_to_timeline_playhead_position(\"Analog Film\")\n        \n        with step(\"[Action] Set timecode to '00_00_04_10' at main page\"):\n            main_page.set_timeline_timecode('00_00_04_10')\n        \n        with step(\"[Verify] Check preview matches GT (L67_analog.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L67_analog.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L67_analog.png', preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L67_analog.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_8",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "timecode",
            "search_library",
            "content_pack",
            "effect_room"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_18_8] Verify Undo action and preview update for Back Light media",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter 'All Content' Category in Library Room and click [Undo] button",
            "2. Search for 'Back' in library and drag media 'Back Light' to timeline playhead position",
            "3. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L67_back.png')",
            "matches GT (Ground_Truth_Folder + 'L67_back.png') with similarity=0.95",
            "4. Set timecode to ('00_00_00_00') and save as project ('test_title_particle_effect_launcher_cross_18_8')"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.timecode\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.effect_room\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_18_8] Verify Undo action and preview update for Back Light media')\n    def test_title_particle_effect_launcher_cross_func_18_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter 'All Content' Category in Library Room and click [Undo] button\n        2. Search for 'Back' in library and drag media 'Back Light' to timeline playhead position\n        3. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L67_back.png')\n        matches GT (Ground_Truth_Folder + 'L67_back.png') with similarity=0.95\n        4. Set timecode to ('00_00_00_00') and save as project ('test_title_particle_effect_launcher_cross_18_8')\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_7\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enter 'All Content' Category in Library Room\"):\n            main_page.select_LibraryRoom_category('All Content')\n        \n        with step(\"[Action] Click [Undo] button\"):\n            main_page.click_undo()\n        \n        with step(\"[Action] Search for 'Back' in library\"):\n            # # Input search Back\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Back')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"Back\")\n        \n        with step(\"[Action] Drag media 'Back Light' to timeline playhead position\"):\n            main_page.drag_media_to_timeline_playhead_position(\"Back Light\", track_no=1)\n        \n        with step(\"[Action] Set timecode to '00_00_04_10' at main page\"):\n            main_page.set_timeline_timecode('00_00_04_10')\n        \n        with step(\"[Verify] Check preview matches GT (L67_back.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L67_back.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L67_back.png',\n                preview,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L67_back.png)! Similarity should > 0.95\"\n\n        with step(\"[Action] Set timecode to ('00_00_00_00') and save as project ('test_title_particle_effect_launcher_cross_18_8')\"):\n            main_page.set_timeline_timecode('00_00_00_00')\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_title_particle_effect_launcher_cross_18_8',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        \n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_9",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "launcher"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_9] Hover on launcher btn [AI Background Remover] and verify title and description",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Close] button to go back to launcher",
            "2. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)",
            "3. Verify title is 'AI Background Remover'",
            "4. Verify description is 'Instantly remove the background of your footage and replace it with a video clip or image.'"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_9] Hover on launcher btn [AI Background Remover] and verify title and description')\n    def test_title_particle_effect_launcher_cross_func_18_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Close] button to go back to launcher\n        2. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)\n        3. Verify title is 'AI Background Remover'\n        4. Verify description is 'Instantly remove the background of your footage and replace it with a video clip or image.'\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_9\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L29] 1.3 New Launcher > Showcase > AI Background Remover > Caption & Text\n        # with uuid(\"41f702aa-87ea-481c-b6b6-02c23b5639e1\") as case:\n\n        with step(\"[Action] Click [Close] button to go back to launcher\"):\n            main_page.click_close_then_back_to_launcher()\n        \n        with step(\"[Action] Hover on launcher btn (AI Background Remover)\"):\n            # Assuming the locator for AI Background Remover button is defined as below\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_bg_remover)\n\n        with step(\"[Verify] Check that show case title is 'AI Background Remover'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_title)\n            if target.AXValue != \"AI Background Remover\":\n                assert False, f\"Show case title does not match expected value! Expected 'AI Wind Removal', got '{target.AXValue}'\"\n\n        with step(\"[Verify] Check that show case description is 'Instantly remove the background of your footage and replace it with a video clip or image.'\"):\n            target = main_page.exist(L.base.launcher_window.show_case_description)\n            if target.AXValue != 'Instantly remove the background of your footage and replace it with a video clip or image.':\n                assert False, f\"Show case description does not match expected value! Expected 'Instantly remove the background of your footage and replace it with a video clip or image.', got '{target.AXValue}'\"\n\n        assert True"
    },
    {
        "name": "test_title_particle_effect_launcher_cross_func_18_10",
        "tags": [
            "title_particle_effect_launcher_cross_func",
            "launcher"
        ],
        "marked_name": "[test_title_particle_effect_launcher_cross_func_18_10] Hover on launcher btn [Video Stabilizer] and verify intro video is playing",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Hover on launcher btn (Video Stabilizer)",
            "2. Verify intro video is playing"
        ],
        "full_code": "@pytest.mark.title_particle_effect_launcher_cross_func\n    @pytest.mark.launcher\n    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_10] Hover on launcher btn [Video Stabilizer] and verify intro video is playing')\n    def test_title_particle_effect_launcher_cross_func_18_10(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Hover on launcher btn (Video Stabilizer)\n        2. Verify intro video is playing\n        '''\ndependency_test = \"test_title_particle_effect_launcher_cross_func_18_9\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L18] 1.3 New Launcher > Showcase > Video Stabilizer > Video\n        # with uuid(\"b672e064-b17a-4e17-82a1-34ea04dc35fb\") as case:\n\n        with step(\"[Action] Hover on launcher btn (Video Stabilizer) on launcher\"):\n            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_stabilizer)\n        \n        with step(\"[Verify] Check intro video is playing\"):\n            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):\n                assert False, \"Intro video is not playing!\"\n        \n        assert True"
    },
    {
        "name": "test_bg_music_func_19_1",
        "tags": [
            "bg_music_func",
            "background_music",
            "search_library",
            "content_pack",
            "launch",
            "open_project"
        ],
        "marked_name": "[test_bg_music_func_19_1] Download [Background Music] and verify timecode",
        "description": [
            "1. Start App",
            "2. Open packed project ('Packed_Project/test_bg_music_func_19_1.pdk', 'Extracted_Folder/test_bg_music_func_19_1')",
            "3. Enter [Background Music] Room",
            "4. Search for 'Hey Baby' in library",
            "5. Check download mark is shown for 'Hey Baby (Your Lullaby Song)'",
            "6. Click [Play] in playback window and verify timecode is '00:00:00:00'"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.background_music\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.name('[test_bg_music_func_19_1] Download [Background Music] and verify timecode')\n    def test_bg_music_func_19_1(self):\n    '''\n        1. Start App\n        2. Open packed project ('Packed_Project/test_bg_music_func_19_1.pdk', 'Extracted_Folder/test_bg_music_func_19_1')\n        3. Enter [Background Music] Room\n        4. Search for 'Hey Baby' in library\n        5. Check download mark is shown for 'Hey Baby (Your Lullaby Song)'\n        6. Click [Play] in playback window and verify timecode is '00:00:00:00'\n        '''\nwith step(\"[Action] Start App\"):\n            main_page.start_app()\n        \n        with step(\"[Action] Open packed project\"):\n            self.open_packed_project('Packed_Project/test_bg_music_func_19_1.pdk', \n                                     'Extracted_Folder/test_bg_music_func_19_1')\n        \n        # [L41] 2.1 Media Room > Background Music / Sound Clips > Sample preview\n        # with uuid(\"e071a716-a769-4153-9d27-98d183a98f31\") as case:\n\n        with step(\"[Action] Enter [Background Music] Room\"):\n            media_room_page.enter_background_music()\n        \n        with step(\"[Action] Search for 'Hey Baby' in library\"):\n            media_room_page.search_library(\"Hey Baby\")\n        \n        with step(\"[Verify] Check download mark for 'Hey Baby (Your Lullaby Song)'\"):\n            if not media_room_page.background_music_check_download_mark(\"Hey Baby (Your Lullaby Song)\"):\n                assert False, \"Download mark for 'Hey Baby (Your Lullaby Song)' is not displayed!\"\n        \n        with step(\"[Action] Click [Play] in playback window and verify timecode\"):\n            playback_window_page.Edit_Timeline_PreviewOperation('Play')\n            timecode = playback_window_page.get_timecode_slidebar()\n            if timecode != \"00:00:00:00\":\n                assert False, f\"Timecode is {timecode} but expected '00:00:00:00'!\"\n        \n        assert True"
    },
    {
        "name": "test_bg_music_func_19_2",
        "tags": [
            "bg_music_func",
            "media_room",
            "background_music",
            "content_pack"
        ],
        "marked_name": "[test_bg_music_func_19_2] Download and verify download mark for \"Hey Baby (Your Lullaby Song)\"",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select sound clip media \"Hey Baby (Your Lullaby Song)\" > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 8)",
            "2. Check [Download OK] mark is shown for \"Hey Baby (Your Lullaby Song)\""
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.media_room\n    @pytest.mark.background_music\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_bg_music_func_19_2] Download and verify download mark for \"Hey Baby (Your Lullaby Song)\"')\n    def test_bg_music_func_19_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select sound clip media \"Hey Baby (Your Lullaby Song)\" > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 8)\n        2. Check [Download OK] mark is shown for \"Hey Baby (Your Lullaby Song)\"\n        '''\ndependency_test = \"test_bg_music_func_19_1\"\n        self.ensure_dependency(dependency_test)\n        \n        \n        # [L42] 2.1 Media Room > Background Music / Sound Clips > Download\n        # with uuid(\"bf802ba9-50a6-4def-90a3-026036090f5a\") as case:\n\n        with step(\"[Action] Select sound clip 'Hey Baby (Your Lullaby Song)' and trigger Download\"):\n            media_room_page.sound_clips_select_media(\"Hey Baby (Your Lullaby Song)\")\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Download\")\n            time.sleep(DELAY_TIME * 8)  # wait for download to complete\n        \n        with step(\"[Verify] Check [Download OK] mark for 'Hey Baby (Your Lullaby Song)'\"):\n            if not media_room_page.background_music_check_download_ok_mark(\"Hey Baby (Your Lullaby Song)\"):\n                assert False, \"Download OK mark is not displayed for 'Hey Baby (Your Lullaby Song)'!\"\n        \n        assert True"
    },
    {
        "name": "test_bg_music_func_19_3",
        "tags": [
            "bg_music_func",
            "background_music"
        ],
        "marked_name": "[test_bg_music_func_19_3] Verify preview update after media insertion",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Screenshot current preview (locator=main_page.area.preview.main)",
            "2. Insert media to selected track from tip area",
            "3. Check preview is updated after insertion (similarity=0.95)"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.background_music\n    @pytest.mark.name('[test_bg_music_func_19_3] Verify preview update after media insertion')\n    def test_bg_music_func_19_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Screenshot current preview (locator=main_page.area.preview.main)\n        2. Insert media to selected track from tip area\n        3. Check preview is updated after insertion (similarity=0.95)\n        '''\ndependency_test = \"test_bg_music_func_19_2\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L43] 2.1 Media Room > Background Music / Sound Clips > Timeline preview\n        # with uuid(\"a29435e4-7b6a-4942-abfd-1a57ec862f6a\") as case:\n\n        with step(\"[Action] Screenshot current preview\"):\n            before_preview = main_page.snapshot(locator=main_page.area.preview.main)\n        \n        with step(\"[Action] Insert media to selected track from tip area\"):\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n        \n        with step(\"[Verify] Check preview is updated after insertion\"):\n            after_preview = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(before_preview, after_preview, similarity=0.95):\n                # Similarity should be less than 0.95 for an updated preview\n                assert False, \"Preview did not update after inserting media! Similarity should < 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_bg_music_func_19_4",
        "tags": [
            "bg_music_func",
            "background_music"
        ],
        "marked_name": "[test_bg_music_func_19_4] Delete \"Hey Baby (Your Lullaby Song)\" and verify download ok mark is removed",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page",
            "2. Select sound clip media \"Hey Baby (Your Lullaby Song)\", right click, select \"Delete from Disk\", and confirm deletion",
            "3. Verify that the download OK icon does not exist"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.background_music\n    @pytest.mark.name('[test_bg_music_func_19_4] Delete \"Hey Baby (Your Lullaby Song)\" and verify download ok mark is removed')\n    def test_bg_music_func_19_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page\n        2. Select sound clip media \"Hey Baby (Your Lullaby Song)\", right click, select \"Delete from Disk\", and confirm deletion\n        3. Verify that the download OK icon does not exist\n        '''\ndependency_test = \"test_bg_music_func_19_3\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L44] 2.1 Media Room > Background Music / Sound Clips > Delete from Disk\n        # with uuid(\"8312130f-2873-4609-8cb7-4b4ed2dd3cc9\") as case:\n\n        with step(\"[Action] Click [Undo] button on main page\"):\n            main_page.click_undo()\n        \n        with step(\"[Action] Delete 'Hey Baby (Your Lullaby Song)' from disk\"):\n            media_room_page.sound_clips_select_media(\"Hey Baby (Your Lullaby Song)\")\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Delete from Disk\")\n            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)\n        \n        with step(\"[Verify] Check that download OK icon does not exist\"):\n            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):\n                assert False, \"Download OK icon exists; deletion did not reset download mark to default status!\"\n        \n        assert True"
    },
    {
        "name": "test_bg_music_func_19_5",
        "tags": [
            "bg_music_func",
            "background_music",
            "media_room",
            "content_pack"
        ],
        "marked_name": "[test_bg_music_func_19_5] Download and Delete \"2400Hz Noise\" and verify download mark",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Sound Clip] Category and wait for (DELAY_TIME * 8)",
            "2. Search conponent ('2400Hz') in Media Room (Sound Effects) category",
            "3. Select specific sound clips ('2400Hz Noise') in library by name > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 5)",
            "4. Check [Download OK] mark if shown on BG music for specific music ('2400Hz Noise')",
            "5. Select specific sound clips ('2400Hz Noise') in library by name > right click > click \"Delete from Disk\" on the right-click menu > click \"Yes\" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog",
            "6. Check [Download OK] mark (L.media_room.scroll_area.table_view_text_field_download_ok) if not exist"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.background_music\n    @pytest.mark.media_room\n    @pytest.mark.content_pack\n    @pytest.mark.name('[test_bg_music_func_19_5] Download and Delete \"2400Hz Noise\" and verify download mark')\n    def test_bg_music_func_19_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Sound Clip] Category and wait for (DELAY_TIME * 8)\n        2. Search conponent ('2400Hz') in Media Room (Sound Effects) category\n        3. Select specific sound clips ('2400Hz Noise') in library by name > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 5)\n        4. Check [Download OK] mark if shown on BG music for specific music ('2400Hz Noise')\n        5. Select specific sound clips ('2400Hz Noise') in library by name > right click > click \"Delete from Disk\" on the right-click menu > click \"Yes\" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog\n        6. Check [Download OK] mark (L.media_room.scroll_area.table_view_text_field_download_ok) if not exist\n        '''\ndependency_test = \"test_bg_music_func_19_4\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Enter [Sound Clip] Category and wait for delay\"):\n            media_room_page.enter_sound_clips()\n            time.sleep(DELAY_TIME * 8)\n\n        with step(\"[Action] Search component '2400Hz' in Media Room (Sound Effects) category\"):\n            media_room_page.search_SFX_library('2400Hz')\n\n        with step(\"[Action] Select specific sound clips '2400Hz Noise' in library by name and download\"):\n            media_room_page.sound_clips_select_media('2400Hz Noise')\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Download\")\n            time.sleep(DELAY_TIME * 5)\n\n        with step(\"[Verify] Check [Download OK] mark if shown on BG music for specific music\"):\n            if not media_room_page.background_music_check_download_ok_mark('2400Hz Noise'):\n                assert False, \"Download OK mark not shown for '2400Hz Noise'\"\n\n        with step(\"[Action] Select specific sound clips '2400Hz Noise' in library by name and delete from disk\"):\n            media_room_page.sound_clips_select_media('2400Hz Noise')\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Delete from Disk\")\n            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)\n\n        with step(\"[Verify] Check [Download OK] mark does not exist\"):\n            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):\n                assert False, \"Download OK mark still exists for '2400Hz Noise'\"\n\n        assert True"
    },
    {
        "name": "test_bg_music_func_19_6",
        "tags": [
            "bg_music_func",
            "media_room",
            "background_music",
            "content_pack",
            "search_library"
        ],
        "marked_name": "test_bg_music_func_19_6",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter [Background Music (CL)] Category > Select specific category ('Atmosphere')",
            "2. Search conponent ('Condition Green') in library > wait for (DELAY_TIME * 4)",
            "3. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)",
            "4. Select specific sound clips ('Condition Green') in library by name > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 5)",
            "5. Check [Download OK] mark if shown on BG music for specific music ('Condition Green')",
            "6. Select specific sound clips ('Condition Green') in library by name > right click > click \"Delete from Disk\" on the right-click menu > click \"Yes\" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog",
            "7. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.media_room\n    @pytest.mark.background_music\n    @pytest.mark.content_pack\n    @pytest.mark.search_library\n    @pytest.mark.name(\"[test_bg_music_func_19_6] Verify 'Condition Green' download and delete workflow\")\n    def test_bg_music_func_19_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter [Background Music (CL)] Category > Select specific category ('Atmosphere')\n        2. Search conponent ('Condition Green') in library > wait for (DELAY_TIME * 4)\n        3. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)\n        4. Select specific sound clips ('Condition Green') in library by name > right click > click \"Download\" on the right-click menu > wait for (DELAY_TIME * 5)\n        5. Check [Download OK] mark if shown on BG music for specific music ('Condition Green')\n        6. Select specific sound clips ('Condition Green') in library by name > right click > click \"Delete from Disk\" on the right-click menu > click \"Yes\" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog\n        7. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)\n        '''\ndependency_test = \"test_bg_music_func_19_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Enter [Background Music (CL)] Category and select category 'Atmosphere'\"):\n            media_room_page.enter_background_music_CL()\n            media_room_page.select_specific_category(\"Atmosphere\")\n\n        # [L150] 2.1 Media Room > BGM (CL BGM) > Input ENU character\n        # with uuid(\"c3b5fd96-dc57-4455-aa9e-7b653de12a74\") as case:\n        # [L149] 2.1 Media Room > BGM (CL BGM) > Delete from Disk\n        # with uuid(\"24261e38-7166-40b7-99fb-6560f38c273d\") as case:\n        with step(\"[Action] Search component 'Condition Green' in library and wait for delay\"):\n            media_room_page.search_library('Condition Green')\n            time.sleep(DELAY_TIME * 4)\n\n        with step(\"[Verify] Check if Download button exists\"):\n            if not main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button):\n                assert False, \"Download button does not exist!\"\n\n        with step(\"[Action] Right click 'Condition Green' and click 'Download' in the menu\"):\n            media_room_page.sound_clips_select_media('Condition Green')\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Download\")\n            time.sleep(DELAY_TIME * 5)\n\n        with step(\"[Verify] Check [Download OK] mark is shown for 'Condition Green'\"):\n            if not media_room_page.background_music_check_download_ok_mark('Condition Green'), \n                assert False, \"[Download OK] mark is not shown for 'Condition Green'\"  \n\n        with step(\"[Action] Right click 'Condition Green' and click 'Delete from Disk', then confirm\"):\n            media_room_page.sound_clips_select_media('Condition Green')\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Delete from Disk\")\n            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)\n\n        with step(\"[Verify] Check if Download button exists again\"):\n            if not  main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button), \n                assert False, \"Download button should exist after deletion!\"      \n\n        assert True"
    },
    {
        "name": "test_bg_music_func_19_7",
        "tags": [
            "bg_music_func",
            "media_room",
            "background_music",
            "search_library"
        ],
        "marked_name": "[test_bg_music_func_19_7] Verify empty search result preview matches GT for \".\" search",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Cancel] button in search library",
            "2. Search '.' in library and wait for (DELAY_TIME * 2)",
            "3. Check if preview (locator=L.base.Area.library_detail_view, file_name=Auto_Ground_Truth_Folder + 'L152_empty_search_result.png')",
            "matches GT (Ground_Truth_Folder + 'L152_empty_search_result.png') with similarity=0.97"
        ],
        "full_code": "@pytest.mark.bg_music_func\n    @pytest.mark.media_room\n    @pytest.mark.background_music\n    @pytest.mark.search_library\n    @pytest.mark.name('[test_bg_music_func_19_7] Verify empty search result preview matches GT for \".\" search')\n    def test_bg_music_func_19_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Cancel] button in search library\n        2. Search '.' in library and wait for (DELAY_TIME * 2)\n        3. Check if preview (locator=L.base.Area.library_detail_view, file_name=Auto_Ground_Truth_Folder + 'L152_empty_search_result.png')\n        matches GT (Ground_Truth_Folder + 'L152_empty_search_result.png') with similarity=0.97\n        '''\ndependency_test = \"test_bg_music_func_19_6\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L152] 2.1 Media Room > BGM (CL BGM) > Input '.'\n        # with uuid(\"27de6e31-2601-4ac1-8323-8b1bd8c6a1ae\") as case:\n\n        with step(\"[Action] Click [Cancel] button in search library\"):\n            media_room_page.search_library_click_cancel()\n        \n        with step(\"[Action] Search '.' in library and wait\"):\n            media_room_page.search_library(\".\")\n            time.sleep(DELAY_TIME * 2)\n        \n        with step(\"[Verify] Check preview matches GT (L152_empty_search_result.png)\"):\n            preview = main_page.snapshot(\n                locator=L.base.Area.library_detail_view,\n                file_name=Auto_Ground_Truth_Folder + 'L152_empty_search_result.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L152_empty_search_result.png', preview, similarity=0.97):\n                # Similarity should be greater than 0.97 for a matching preview\n                assert False, \"Preview does not match GT (L152_empty_search_result.png)! Similarity should > 0.97\"\n        \n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_1",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "launch",
            "open_project",
            "search_library",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_1] Verify preview updates with media insertions and frame navigation",
        "description": [
            "1. Start APP",
            "2. Open packed project ('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')",
            "3. Set timecode '00_00_47_07' at main page",
            "4. Enter Room (Pip) (index 4) and capture preview",
            "5. Search 'Shape 017' in library, insert media to selected track, and click [Cancel] in search library",
            "6. Check preview is updated after insertion (similarity=0.95)",
            "7. Select timeline track 2 and capture preview",
            "8. Search 'Wedding' in library, insert media to selected track, and click [Cancel] in search library",
            "9. Check preview is updated after insertion (similarity=0.95)",
            "10. Select timeline track 2, set timecode '00_00_50_07' at main page, and capture preview",
            "11. Search 'Mood' in library, select media 'Mood Stickers 07', right click and click \"Add to Timeline\", wait for (DELAY_TIME * 6)",
            "12. Select timeline track 1, click [Previous Frame] button 3 times",
            "13. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_wedding.png') with similarity=0.95",
            "14. Click [Next Frame] button 5 times and capture preview",
            "15. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_dialog.png') with similarity=0.95"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_1] Verify preview updates with media insertions and frame navigation')\n    def test_shape_pip_transition_cross_func_20_1(self):\n    '''\n        1. Start APP\n        2. Open packed project ('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')\n        3. Set timecode '00_00_47_07' at main page\n        4. Enter Room (Pip) (index 4) and capture preview\n        5. Search 'Shape 017' in library, insert media to selected track, and click [Cancel] in search library\n        6. Check preview is updated after insertion (similarity=0.95)\n        7. Select timeline track 2 and capture preview\n        8. Search 'Wedding' in library, insert media to selected track, and click [Cancel] in search library\n        9. Check preview is updated after insertion (similarity=0.95)\n        10. Select timeline track 2, set timecode '00_00_50_07' at main page, and capture preview\n        11. Search 'Mood' in library, select media 'Mood Stickers 07', right click and click \"Add to Timeline\", wait for (DELAY_TIME * 6)\n        12. Select timeline track 1, click [Previous Frame] button 3 times\n        13. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_wedding.png') with similarity=0.95\n        14. Click [Next Frame] button 5 times and capture preview\n        15. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_dialog.png') with similarity=0.95\n        '''\nwith step(\"[Action] Start APP\"):\n            main_page.start_app()\n\n        with step(\"[Action] Open packed project ('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')\"):\n            self.open_packed_project('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')\n\n        # [L68] 2.3 Pip Room > Shape 017, Dialog_07, Wedding_2\n        # with uuid(\"c805bedd-ee5f-4a40-9476-be67a8c75ccb\") as case:\n\n        with step(\"[Action] Set timecode to '00_00_47_07' at main page\"):\n            main_page.set_timeline_timecode('00_00_47_07')\n\n        with step(\"[Action] Enter Room (Pip) with index 4 and capture preview\"):\n            main_page.enter_room(4)\n            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step(\"[Action] Search 'Shape 017' in library, insert media, and click [Cancel]\"):\n            # # Input search Shape 017\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Shape 017')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"Shape 017\")\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Verify] Check preview updated after inserting 'Shape 017' (similarity=0.95)\"):\n            preview_after_shape = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(initial_preview, preview_after_shape, similarity=0.95):\n                # Similarity should be less than 0.95 if preview is updated\n                assert False, \"Preview did not update after inserting 'Shape 017'! Similarity should < 0.95\"\n\n        with step(\"[Action] Select timeline track 2 and capture preview\"):\n            main_page.timeline_select_track(2)\n            timeline2_preview = main_page.snapshot(locator=main_page.area.preview.main)\n\n        with step(\"[Action] Search 'Wedding' in library, insert media, and click [Cancel]\"):\n            # # Input search Wedding 2\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Wedding')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"Wedding\")\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Verify] Check preview updated after inserting 'Wedding' (similarity=0.95)\"):\n            preview_after_wedding = main_page.snapshot(locator=main_page.area.preview.main)\n            if main_page.compare(timeline2_preview, preview_after_wedding, similarity=0.95):\n                # Similarity should be less than 0.95 if preview is updated\n                assert False, \"Preview did not update after inserting 'Wedding'! Similarity should < 0.95\"\n\n        with step(\"[Action] Select timeline track 2, set timecode to '00_00_50_07'\"):\n            main_page.timeline_select_track(2)\n            main_page.set_timeline_timecode('00_00_50_07')\n\n        with step(\"[Action] Search 'Mood' in library, select 'Mood Stickers 07', right click and click 'Add to Timeline', wait for download\"):\n            # # Input search Dialog_07\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Mood')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            \n            media_room_page.search_library(\"Mood\")\n            main_page.select_library_icon_view_media(\"Mood Stickers 07\")\n            time.sleep(DELAY_TIME * 2)\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Add to Timeline\")\n            \n\n        with step(\"[Action] Select timeline track 1, click [Previous Frame] 3 times, and capture preview\"):\n            main_page.timeline_select_track(1)\n            for _ in range(3):\n                title_designer_page.Edit_Timeline_PreviewOperation('previous_frame')\n                time.sleep(DELAY_TIME * 0.5)\n            preview_prev = main_page.snapshot(locator=main_page.area.preview.main,\n                                            file_name=Auto_Ground_Truth_Folder + 'L68_shape_wedding.png')\n\n        with step(\"[Verify] Compare preview with GT 'L68_shape_wedding.png' (similarity=0.95)\"):\n            if not main_page.compare(Ground_Truth_Folder + 'L68_shape_wedding.png', preview_prev, similarity=0.95):\n                assert False, \"Preview does not match GT (L68_shape_wedding.png)! Similarity should > 0.95\"\n\n        with step(\"[Action] Click [Next Frame] 5 times and capture preview\"):\n            for _ in range(5):\n                title_designer_page.Edit_Timeline_PreviewOperation('next_frame')\n                time.sleep(DELAY_TIME * 0.5)\n            preview_next = main_page.snapshot(locator=main_page.area.preview.main,\n                                            file_name=Auto_Ground_Truth_Folder + 'L68_shape_dialog.png')\n\n        with step(\"[Verify] Compare preview with GT 'L68_shape_dialog.png' (similarity=0.95)\"):\n            if not main_page.compare(Ground_Truth_Folder + 'L68_shape_dialog.png', preview_next, similarity=0.95):\n                assert False, \"Preview does not match GT (L68_shape_dialog.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_2",
        "tags": [
            "shape_pip_transition_cross_func",
            "shape_designer",
            "properties",
            "shape_preset",
            "shape_fill"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_2] Apply Shape Preset, set Shape Fill, and verify preview after frame navigation",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select a clip (\"Shape 017\") on timeline and tap [Tool Menu] on [Tips Area]",
            "2. Verify Shape Designer is opened",
            "3. Unfold [Shape Preset], apply preset 3, then fold [Shape Preset]",
            "4. Unfold [Shape Fill], set [Uniform Color] to hexcolor \"7E1208\", then fold [Shape Fill]",
            "5. Click [OK] to leave Shape Designer",
            "6. Select timeline track 2 and click [Previous Frame] button 4 times",
            "7. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L75.png') matches GT (Ground_Truth_Folder + 'L75.png') with similarity=0.9"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.shape_designer\n    @pytest.mark.properties\n    @pytest.mark.shape_preset\n    @pytest.mark.shape_fill\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_2] Apply Shape Preset, set Shape Fill, and verify preview after frame navigation')\n    def test_shape_pip_transition_cross_func_20_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select a clip (\"Shape 017\") on timeline and tap [Tool Menu] on [Tips Area]\n        2. Verify Shape Designer is opened\n        3. Unfold [Shape Preset], apply preset 3, then fold [Shape Preset]\n        4. Unfold [Shape Fill], set [Uniform Color] to hexcolor \"7E1208\", then fold [Shape Fill]\n        5. Click [OK] to leave Shape Designer\n        6. Select timeline track 2 and click [Previous Frame] button 4 times\n        7. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L75.png') matches GT (Ground_Truth_Folder + 'L75.png') with similarity=0.9\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_1\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L75] 2.3 Pip Room > Designer entry > Shape template can modify (Shape 017)\n        # with uuid(\"b9ad4619-839d-438a-8293-eaeaf66f5479\") as case:\n\n        with step(\"[Action] Select clip 'Shape 017' on timeline and tap [Tool Menu] on [Tips Area]\"):\n            main_page.select_timeline_media('Shape 017')\n            main_page.tap_TipsArea_Tools_menu(0)\n        \n        with step(\"[Verify] Check if Shape Designer is opened\"):\n            if not shape_designer_page.check_in_shape_designer():\n                assert False, \"Shape Designer did not open!\"\n        \n        with step(\"[Action] Unfold [Shape Preset], apply preset 3, and fold [Shape Preset]\"):\n            shape_designer_page.properties.unfold_shape_preset(set_unfold=1)\n            shape_designer_page.properties.shape_preset.apply_preset(index=3)\n            shape_designer_page.properties.unfold_shape_preset(set_unfold=0)\n        \n        with step(\"[Action] Unfold [Shape Fill], set uniform color to '7E1208', and fold [Shape Fill]\"):\n            shape_designer_page.properties.unfold_shape_fill(set_unfold=1)\n            shape_designer_page.properties.shape_fill.set_uniform_color(\"7E1208\")\n            shape_designer_page.properties.unfold_shape_fill(set_unfold=0)\n        \n        with step(\"[Action] Click [OK] to leave Shape Designer\"):\n            shape_designer_page.click_ok()\n        \n        with step(\"[Action] Select timeline track 2 and click [Previous Frame] 4 times\"):\n            main_page.timeline_select_track(2)\n            for _ in range(4):\n                playback_window_page.Edit_Timeline_PreviewOperation('previous_frame')\n                time.sleep(DELAY_TIME * 0.5)\n        \n        with step(\"[Verify] Screenshot preview and compare with GT (L75.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L75.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L75.png', preview, similarity=0.9):\n                # Similarity should be greater than 0.9 for a matching preview\n                assert False, \"Preview does not match GT (L75.png)! Similarity should > 0.9\"\n        \n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_3",
        "tags": [
            "shape_pip_transition_cross_func",
            "pip_designer",
            "properties",
            "shadow",
            "border"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_3] Apply Border and Shadow settings in Pip Designer and verify preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select clip \"Wedding 2\" on timeline and tap [Tool Menu] on [Tips Area] to enter Pip Designer",
            "2. Switch to Express mode and capture Pip Designer preview (locator=L.pip_designer.preview)",
            "3. Enable Border and set Border Size to 4 by slider; verify preview is updated (similarity should be < 0.99)",
            "4. Apply Border Uniform Color using RGB ('71','198','45'); verify preview is updated (similarity should be < 0.99), then fold Border tab by clicking L.pip_designer.border.border",
            "5. Enable Shadow and set Shadow Distance to 83 by slider; verify preview is updated (similarity should be < 0.99)",
            "6. Apply Shadow Color using RGB ('194','245','124'); verify preview is updated (similarity should be < 0.99), then fold Shadow tab by clicking L.pip_designer.shadow.shadow",
            "7. Click [OK] button to leave Pip Designer",
            "8. Check main program preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L74.png') matches GT (Ground_Truth_Folder + 'L74.png') with similarity > 0.99"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.pip_designer\n    @pytest.mark.properties\n    @pytest.mark.shadow\n    @pytest.mark.border\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_3] Apply Border and Shadow settings in Pip Designer and verify preview')\n    def test_shape_pip_transition_cross_func_20_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select clip \"Wedding 2\" on timeline and tap [Tool Menu] on [Tips Area] to enter Pip Designer\n        2. Switch to Express mode and capture Pip Designer preview (locator=L.pip_designer.preview)\n        3. Enable Border and set Border Size to 4 by slider; verify preview is updated (similarity should be < 0.99)\n        4. Apply Border Uniform Color using RGB ('71','198','45'); verify preview is updated (similarity should be < 0.99), then fold Border tab by clicking L.pip_designer.border.border\n        5. Enable Shadow and set Shadow Distance to 83 by slider; verify preview is updated (similarity should be < 0.99)\n        6. Apply Shadow Color using RGB ('194','245','124'); verify preview is updated (similarity should be < 0.99), then fold Shadow tab by clicking L.pip_designer.shadow.shadow\n        7. Click [OK] button to leave Pip Designer\n        8. Check main program preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L74.png') matches GT (Ground_Truth_Folder + 'L74.png') with similarity > 0.99\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_2\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L74] 2.3 Pip Room > Designer entry > Pip template can modify (Wedding 2)\n        # with uuid(\"8b400e01-576b-4297-a1e2-af05377bf860\") as case:\n\n        with step(\"[Action] Select clip 'Wedding 2' on timeline and tap [Tool Menu] on [Tips Area] to enter Pip Designer\"):\n            main_page.select_timeline_media('Wedding 2')\n            main_page.tap_TipsArea_Tools_menu(0)\n            \n        with step(\"[Action] Switch to Express mode and capture Pip Designer preview\"):\n            pip_designer_page.switch_mode(1)  # Switch to Express mode\n        \n        with step(\"[Action] Enable Border and set Border Size to 4 by slider\"):\n            border_before = main_page.snapshot(locator=L.pip_designer.preview)\n            pip_designer_page.apply_border(bApply=1)\n            pip_designer_page.drag_border_size_slider(4)\n            border_after = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(border_before, border_after, similarity=0.99):\n                # Similarity should be less than 0.99 if the preview has updated\n                assert False, \"Border size change did not update preview! Similarity should < 0.99\"\n        \n        with step(\"[Action] Apply Border Uniform Color using RGB ('71','198','45') and fold Border tab\"):\n            pip_designer_page.apply_border_uniform_color('71', '198', '45')\n            color_after = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(border_after, color_after, similarity=0.99):\n                # Similarity should be less than 0.99 if the color is applied correctly\n                assert False, \"Border uniform color did not update preview! Similarity should < 0.99\"\n            main_page.click(L.pip_designer.border.border)\n        \n        with step(\"[Action] Enable Shadow and set Shadow Distance to 83 by slider\"):\n            pip_designer_page.apply_shadow()\n            pip_designer_page.drag_shadow_distance_slider(83)\n            shadow_after = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(color_after, shadow_after, similarity=0.99):\n                # Similarity should be less than 0.99 if shadow distance is updated\n                assert False, \"Shadow distance change did not update preview! Similarity should < 0.99\"\n        \n        with step(\"[Action] Apply Shadow Color using RGB ('194','245','124') and fold Shadow tab\"):\n            pip_designer_page.select_shadow_color('194', '245', '124')\n            shadow_color_after = main_page.snapshot(locator=L.pip_designer.preview)\n            if main_page.compare(shadow_after, shadow_color_after, similarity=0.99):\n                # Similarity should be less than 0.99 if the shadow color is applied correctly\n                assert False, \"Shadow color did not update preview! Similarity should < 0.99\"\n            main_page.click(L.pip_designer.shadow.shadow)\n        \n        with step(\"[Action] Click [OK] to leave Pip Designer\"):\n            pip_designer_page.click_ok()\n        \n        with step(\"[Verify] Check main program preview matches GT (L74.png) with similarity > 0.99\"):\n            final_preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L74.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L74.png', final_preview, similarity=0.95):\n                assert False, \"Final preview does not match GT (L74.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_4",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_4] Verify transition preview matches GT for Binary 1",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Room (Transition) (2)",
            "2. Search component 'Binary 1' in library",
            "3. Drag Transition ('Binary 1') to timeline clip ('Mood Stickers 07')",
            "4. Set timecode to '00_00_00_28' on main page",
            "5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_binary.png')",
            "matches GT (Ground_Truth_Folder + 'L66_binary.png') with similarity 0.9"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_4] Verify transition preview matches GT for Binary 1')\n    def test_shape_pip_transition_cross_func_20_4(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Room (Transition) (2)\n        2. Search component 'Binary 1' in library\n        3. Drag Transition ('Binary 1') to timeline clip ('Mood Stickers 07')\n        4. Set timecode to '00_00_00_28' on main page\n        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_binary.png') \n        matches GT (Ground_Truth_Folder + 'L66_binary.png') with similarity 0.9\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_3\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L66] 2.3 Transition Room > Binary 1\n        # with uuid(\"8d6fe590-d4af-4ac4-8e7d-e7e4295d4a17\") as case:\n\n        with step(\"[Action] Enter Room (Transition) with index 2\"):\n            main_page.enter_room(2)\n        \n        with step(\"[Action] Search component 'Binary 1' in library\"):\n            # # Input search Binary 1  ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Binary 1')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library(\"Binary 1\")\n        \n        with step(\"[Action] Drag Transition 'Binary 1' to timeline clip 'Mood Stickers 07'\"):\n            main_page.drag_transition_to_timeline_clip('Binary 1', 'Mood Stickers 07')\n        \n        with step(\"[Action] Set timecode to '00_00_00_28' on main page\"):\n            main_page.set_timeline_timecode(\"00_00_00_28\")\n        \n        with step(\"[Verify] Capture preview and compare with GT (L66_binary.png)\"):\n            preview = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + \"L66_binary.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"L66_binary.png\", preview, similarity=0.9):\n                # Similarity should be greater than 0.9 for a matching preview\n                assert False, \"Preview does not match GT (L66_binary.png)! Similarity should > 0.9\"\n        \n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_5",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_5] Click Undo, Cancel, search \"Blur\", drag transition, set timecode and verify preview",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page > Click [Cancel] button on search library",
            "2. Search conponent ('Blur') in library > Drag Transition ('Blur') to timeline clip ('Mood Stickers 07')",
            "3. Set timecode ('00_00_00_17')",
            "4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_blur.png')",
            "matches GT (Ground_Truth_Folder + 'L66_blur.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_5] Click Undo, Cancel, search \"Blur\", drag transition, set timecode and verify preview')\n    def test_shape_pip_transition_cross_func_20_5(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page > Click [Cancel] button on search library\n        2. Search conponent ('Blur') in library > Drag Transition ('Blur') to timeline clip ('Mood Stickers 07')\n        3. Set timecode ('00_00_00_17')\n        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_blur.png')\n        matches GT (Ground_Truth_Folder + 'L66_blur.png') with similarity 0.95\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Undo] button on main page and click [Cancel] button on search library\"):\n            main_page.click_undo()\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search 'Blur' in library and drag transition to timeline clip 'Mood Stickers 07'\"):\n            # # Input search Blur  ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Blur')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"Blur\")\n            main_page.drag_transition_to_timeline_clip('Blur', 'Mood Stickers 07')\n\n        with step(\"[Action] Set timecode to (00_00_00_17)\"):\n            main_page.set_timeline_timecode(\"00_00_00_17\")\n\n        with step(\"[Verify] Check preview matches GT (L66_blur.png) with similarity 0.95\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L66_blur.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L66_blur.png',\n                preview_snapshot,\n                similarity=0.95\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.95\n                assert False, \"Preview does not match GT (L66_blur.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_6",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_6] Verify preview after performing undo, cancel, search, drag transition and set timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page > Click [Cancel] button on search library",
            "2. Search conponent ('brush strokes 01') in library > Drag Transition ('brush strokes 01') to timeline clip ('Mood Stickers 07')",
            "3. Set timecode ('00_00_00_28')",
            "4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_brush_01.png')",
            "matches GT (Ground_Truth_Folder + 'L66_brush_01.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_6] Verify preview after performing undo, cancel, search, drag transition and set timecode')\n    def test_shape_pip_transition_cross_func_20_6(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page > Click [Cancel] button on search library\n        2. Search conponent ('brush strokes 01') in library > Drag Transition ('brush strokes 01') to timeline clip ('Mood Stickers 07')\n        3. Set timecode ('00_00_00_28')\n        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_brush_01.png')\n        matches GT (Ground_Truth_Folder + 'L66_brush_01.png') with similarity 0.95\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Undo] button on main page and click [Cancel] button on search library\"):\n            main_page.click_undo()\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search library with keyword 'brush strokes 01' and drag Transition to timeline clip 'Mood Stickers 07'\"):\n            # # Input search Brush Transition 01  ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('brush strokes 01')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"brush strokes 01\")\n            main_page.drag_transition_to_timeline_clip(\"brush strokes 01\", \"Mood Stickers 07\", clip_index=0)\n\n        with step(\"[Action] Set timecode to (00_00_00_28)\"):\n            main_page.set_timeline_timecode(\"00_00_00_28\")\n\n        with step(\"[Verify] Check preview matches GT (L66_brush_01.png) with similarity 0.95\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L66_brush_01.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L66_brush_01.png', preview_snapshot, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L66_brush_01.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_7",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_7] Verify preview after performing undo, cancel, search, drag transition and set timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page > Click [Cancel] button on search library",
            "2. Search component ('Cross 2') in library > Drag Transition ('Cross 2') to timeline clip ('Mood Stickers 07')",
            "3. Set timecode ('00_00_00_13')",
            "4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_cross.png')",
            "matches GT (Ground_Truth_Folder + 'L66_cross.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_7] Verify preview after performing undo, cancel, search, drag transition and set timecode')\n    def test_shape_pip_transition_cross_func_20_7(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page > Click [Cancel] button on search library\n        2. Search component ('Cross 2') in library > Drag Transition ('Cross 2') to timeline clip ('Mood Stickers 07')\n        3. Set timecode ('00_00_00_13')\n        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_cross.png')\n        matches GT (Ground_Truth_Folder + 'L66_cross.png') with similarity 0.95\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Undo] button on main page and click [Cancel] button on search library\"):\n            main_page.click_undo()\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search library with keyword 'Cross 2' and drag Transition to timeline clip 'Mood Stickers 07'\"):\n            # # Input search Cross 2 ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Cross 2')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"Cross 2\")\n            main_page.drag_transition_to_timeline_clip(\"Cross 2\", \"Mood Stickers 07\", clip_index=0)\n\n        with step(\"[Action] Set timecode to (00_00_00_13)\"):\n            main_page.set_timeline_timecode(\"00_00_00_13\")\n\n        with step(\"[Verify] Check preview matches GT (L66_cross.png) with similarity 0.95\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L66_cross.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L66_cross.png', preview_snapshot, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L66_cross.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_8",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_8] Verify preview after performing undo, cancel, search, drag transition and set timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page > Click [Cancel] button on search library",
            "2. Search component ('magnify') in library > Drag Transition ('Magnify') to timeline clip ('Mood Stickers 07')",
            "3. Set timecode ('00_00_01_00')",
            "4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_magnify.png')",
            "matches GT (Ground_Truth_Folder + 'L66_magnify.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_8] Verify preview after performing undo, cancel, search, drag transition and set timecode')\n    def test_shape_pip_transition_cross_func_20_8(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page > Click [Cancel] button on search library\n        2. Search component ('magnify') in library > Drag Transition ('Magnify') to timeline clip ('Mood Stickers 07')\n        3. Set timecode ('00_00_01_00')\n        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_magnify.png')\n        matches GT (Ground_Truth_Folder + 'L66_magnify.png') with similarity 0.95\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_7\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Undo] button on main page and click [Cancel] button on search library\"):\n            main_page.click_undo()\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search component 'magnify' in library and drag Transition to timeline clip 'Mood Stickers 07'\"):\n            # # Input search Magnify ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('magnify')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n\n            media_room_page.search_library(\"magnify\")\n            main_page.drag_transition_to_timeline_clip(\"Magnify\", \"Mood Stickers 07\", clip_index=0)\n\n        with step(\"[Action] Set timecode to (00_00_01_00)\"):\n            main_page.set_timeline_timecode(\"00_00_01_00\")\n\n        with step(\"[Verify] Check preview matches GT (L66_magnify.png) with similarity 0.95\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L66_magnify.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L66_magnify.png', preview_snapshot, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L66_magnify.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_shape_pip_transition_cross_func_20_9",
        "tags": [
            "shape_pip_transition_cross_func",
            "timeline",
            "search_library",
            "transition_room",
            "content_pack",
            "timecode",
            "save_project"
        ],
        "marked_name": "[test_shape_pip_transition_cross_func_20_9] Verify preview after performing undo, cancel, search, drag transition and set timecode",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Click [Undo] button on main page > Click [Cancel] button on search library",
            "2. Search component ('Disturbance') in library > Drag Transition ('Disturbance') to timeline clip ('Mood Stickers 07')",
            "3. Set timecode ('00_00_00_27')",
            "4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_disturbance.png')",
            "matches GT (Ground_Truth_Folder + 'L66_disturbance.png') with similarity 0.95",
            "5. Save the project as 'test_shape_pip_transition_cross_func_20_9'"
        ],
        "full_code": "@pytest.mark.shape_pip_transition_cross_func\n    @pytest.mark.timeline\n    @pytest.mark.search_library\n    @pytest.mark.transition_room\n    @pytest.mark.content_pack\n    @pytest.mark.timecode\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_9] Verify preview after performing undo, cancel, search, drag transition and set timecode')\n    def test_shape_pip_transition_cross_func_20_9(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Click [Undo] button on main page > Click [Cancel] button on search library\n        2. Search component ('Disturbance') in library > Drag Transition ('Disturbance') to timeline clip ('Mood Stickers 07')\n        3. Set timecode ('00_00_00_27')\n        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_disturbance.png')\n        matches GT (Ground_Truth_Folder + 'L66_disturbance.png') with similarity 0.95\n        5. Save the project as 'test_shape_pip_transition_cross_func_20_9'\n        '''\ndependency_test = \"test_shape_pip_transition_cross_func_20_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Undo] button on main page and click [Cancel] button on search library\"):\n            main_page.click_undo()\n            media_room_page.search_library_click_cancel()\n\n        with step(\"[Action] Search component 'Disturbance' in library and drag Transition to timeline clip 'Mood Stickers 07'\"):\n            # # Input search Disturbance ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Disturbance')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            \n            media_room_page.search_library(\"Disturbance\")\n            main_page.drag_transition_to_timeline_clip(\"Disturbance\", \"Mood Stickers 07\", clip_index=0)\n\n        with step(\"[Action] Set timecode to (00_00_00_27)\"):\n            main_page.set_timeline_timecode(\"00_00_00_27\")\n\n        with step(\"[Verify] Check preview matches GT (L66_disturbance.png) with similarity 0.95\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L66_disturbance.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L66_disturbance.png', preview_snapshot, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L66_disturbance.png)! Similarity should > 0.95\"\n        \n        with step(\"[Action] Save the project as 'test_shape_pip_transition_cross_func_20_9'\"):\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_shape_pip_transition_cross_func_20_9',\n                                                folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_1",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "launch",
            "open_project",
            "particle_room",
            "timeline",
            "timecode",
            "search_library",
            "content_pack"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_1",
        "description": [
            "1. Start the app",
            "2. Open packed project ('Packed_Project/test_transition_effect_audiomix_cross_func_21_1.pdk', 'Extracted_Folder/test_transition_effect_audiomix_cross_func_21_1')",
            "3. Set timecode to ('00_00_57_07')",
            "4. Enter Room (Particle) (5) and capture preview screenshot (locator=L.base.Area.preview.only_mtk_view)",
            "5. Search component ('Comic Style 06') in library",
            "6. Select component ('Comic Style 06') in library icon view and drag media ('Comic Style 06') to timeline track 1",
            "7. Check Preview is updated (Similarity=0.98)"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.launch\n    @pytest.mark.open_project\n    @pytest.mark.particle_room\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_1] Search component, drag media, set timecode, enter room, and verify preview\")\n    def test_transition_effect_audiomix_cross_func_21_1(self):\n    '''\n        1. Start the app\n        2. Open packed project ('Packed_Project/test_transition_effect_audiomix_cross_func_21_1.pdk', 'Extracted_Folder/test_transition_effect_audiomix_cross_func_21_1')\n        3. Set timecode to ('00_00_57_07')\n        4. Enter Room (Particle) (5) and capture preview screenshot (locator=L.base.Area.preview.only_mtk_view)\n        5. Search component ('Comic Style 06') in library\n        6. Select component ('Comic Style 06') in library icon view and drag media ('Comic Style 06') to timeline track 1\n        7. Check Preview is updated (Similarity=0.98)\n        '''\nwith step(\"[Action] Start the app\"):\n            main_page.start_app()\n\n        with step(\"[Action] Open packed project and extract\"):\n            self.open_packed_project('Packed_Project/test_transition_effect_audiomix_cross_func_21_1.pdk', 'Extracted_Folder/test_transition_effect_audiomix_cross_func_21_1')\n\n        with step(\"[Action] Set timecode to '00_00_57_07'\"):\n            main_page.set_timeline_timecode(\"00_00_57_07\")\n\n        # [L71] 2.3 Transition / Effect / Particle Room > IAD: Transition, Effect, Particle\n        # with uuid(\"0941636d-0f13-4fbf-baa8-e2725af12a32\") as case:\n        with step(\"[Action] Enter Room (Particle) (5) and capture preview screenshot\"):\n            main_page.enter_room(5)\n            before_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n\n        with step(\"[Action] Search component 'Comic Style 06' in library\"):\n            # # Input search Instant Memories ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Comic Style 06')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library(\"Comic Style 06\")\n            \n        with step(\"[Action] Select component 'Comic Style 06' in library icon view and drag to timeline track 1\"):\n            main_page.select_library_icon_view_media(\"Comic Style 06\")\n            time.sleep(DELAY_TIME*2) # wait for download conponent\n            main_page.drag_media_to_timeline_playhead_position(\"Comic Style 06\", track_no=1)\n\n        with step(\"[Verify] Check preview is updated with expected similarity (Similarity=0.98)\"):\n            updated_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            is_preview_correct = main_page.compare(before_preview, updated_preview, similarity=0.98)\n            if is_preview_correct:\n                # Similarity should be greater than 0.98\n                assert False, \"Preview does not updated after add Particle! Similarity should < 0.98\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_2",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "trainsition_room",
            "timeline",
            "timecode",
            "search_library",
            "content_pack"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_2",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Enter Room (Transition) (2)",
            "2. Search component ('Snow 03') in library",
            "3. Select component ('Snow 03') in library icon view and drag transition ('Snow 03') to timeline clip ('Comic Style 06')",
            "4. Set timecode to ('00_00_00_27') in main page",
            "5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L71_transition_IAD.png') matches GT (Ground_Truth_Folder + 'L71_transition_IAD.png') with similarity 0.9"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.trainsition_room\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_2] Enter room, search component, drag transition and verify preview\")\n    def test_transition_effect_audiomix_cross_func_21_2(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Enter Room (Transition) (2)\n        2. Search component ('Snow 03') in library\n        3. Select component ('Snow 03') in library icon view and drag transition ('Snow 03') to timeline clip ('Comic Style 06')\n        4. Set timecode to ('00_00_00_27') in main page\n        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L71_transition_IAD.png') matches GT (Ground_Truth_Folder + 'L71_transition_IAD.png') with similarity 0.9\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_1\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Enter Room (Transition) (2)\"):\n            main_page.enter_room(2)\n\n        with step(\"[Action] Search component 'Snow 03' in library\"):\n            # # Input search Snow 03 ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('Snow 03')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library(\"Snow 03\")\n\n        with step(\"[Action] Select component 'Snow 03' in library icon view and drag transition 'Snow 03' to timeline clip 'Comic Style 06'\"):\n            main_page.select_library_icon_view_media(\"Snow 03\")\n            main_page.drag_transition_to_timeline_clip('Snow 03', 'Comic Style 06')\n\n        with step(\"[Action] Set timecode to '00_00_00_27' in main page\"):\n            main_page.set_timeline_timecode(\"00_00_00_27\")\n\n        with step(\"[Verify] Check preview matches GT (L71_transition_IAD.png) with similarity 0.9\"):\n            preview_snapshot = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + 'L71_transition_IAD.png'\n            )\n            check_preview = main_page.compare(\n                Ground_Truth_Folder + 'L71_transition_IAD.png',\n                preview_snapshot,\n                similarity=0.9\n            )\n            if not check_preview:\n                # Similarity should be greater than 0.9\n                assert False, \"Preview does not match GT (L71_transition_IAD.png)! Similarity should > 0.9\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_3",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "effect_room",
            "timeline",
            "timecode",
            "search_library",
            "content_pack"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_3",
        "description": [
            "0. Ensure the dependency test is run and passed",
            "1. Select timeline track (1) and set timecode to ('00_00_00_00') at main page",
            "2. Select timeline media ('4978895')",
            "3. Check if effect button (L.tips_area.button.btn_effect_modify) exists",
            "4. Click [Effect] button on [Tips Area] and remove from [Effect Settings]",
            "5. Enter Room (Effect) (3)",
            "6. Search component ('lens flare 40') in library",
            "7. Select component ('Lens Flare 40') in library icon view and drag media ('Lens Flare 40') to timeline playhead position",
            "8. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L71_flare_40.png') matches GT (Ground_Truth_Folder + 'L71_flare_40.png') with similarity 0.9"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.effect_room\n    @pytest.mark.timeline\n    @pytest.mark.timecode\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    def test_transition_effect_audiomix_cross_func_21_3(self):\n    '''\n        0. Ensure the dependency test is run and passed\n        1. Select timeline track (1) and set timecode to ('00_00_00_00') at main page\n        2. Select timeline media ('4978895')\n        3. Check if effect button (L.tips_area.button.btn_effect_modify) exists\n        4. Click [Effect] button on [Tips Area] and remove from [Effect Settings]\n        5. Enter Room (Effect) (3)\n        6. Search component ('lens flare 40') in library\n        7. Select component ('Lens Flare 40') in library icon view and drag media ('Lens Flare 40') to timeline playhead position\n        8. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L71_flare_40.png') matches GT (Ground_Truth_Folder + 'L71_flare_40.png') with similarity 0.9\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_2\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Select timeline track (1) and set timecode to '00_00_00_00' at main page\"):\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode(\"00_00_00_00\")\n\n        with step(\"[Action] Select timeline media '4978895'\"):\n            timeline_operation_page.select_timeline_media(\"4978895\")\n\n        with step(\"[Verify] Check if effect button exists\"):\n            if not main_page.exist(L.tips_area.button.btn_effect_modify):\n                assert False, \"Effect button (L.tips_area.button.btn_effect_modify) does not exist\"\n\n        with step(\"[Action] Click [Effect] button on [Tips Area] and remove from [Effect Settings]\"):\n            tips_area_page.click_TipsArea_btn_effect()\n            effect_room_page.remove_from_effectsettings()\n\n        with step(\"[Action] Enter Room (Effect) (3)\"):\n            main_page.enter_room(3)\n\n        with step(\"[Action] Search for 'lens flare 40' in library\"):\n            # # Input search lens flare 40 ---------\n            # main_page.exist_click(L.media_room.input_search)\n            # main_page.keyboard.send('lens flare 40')\n            # main_page.press_enter_key()\n            # time.sleep(DELAY_TIME * 3)\n            media_room_page.search_library(\"lens flare 40\")\n\n        with step(\"[Action] Select component 'Lens Flare 40' in library icon view and drag media to timeline playhead position\"):\n            main_page.select_library_icon_view_media(\"Lens Flare 40\")\n            time.sleep(DELAY_TIME*2) # wait for download conponent\n            main_page.drag_media_to_timeline_playhead_position(\"Lens Flare 40\", track_no=1)\n\n        with step(\"[Verify] Check preview matches GT (L71_flare_40.png) with similarity 0.9\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L71_flare_40.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L71_flare_40.png', preview, similarity=0.9):\n                # Similarity should be greater than 0.9 for matching preview\n                assert False, \"Preview does not match GT (L71_flare_40.png)! Similarity should > 0.9\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_4",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "effect_room",
            "timeline",
            "LUT",
            "import_media"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_4",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_3') is run and passed",
            "1. Import [CLUTs] with file path (Test_Material_Folder + 'BFT_21_Stage1/3dl_1.3dl')",
            "2. Drag media ('3dl_1') to timeline playhead position",
            "3. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L72_3dl.png') matches GT (Ground_Truth_Folder + 'L72_3dl.png') with similarity 0.95",
            "1. Delete the imported CLUTs file"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.effect_room\n    @pytest.mark.timeline\n    @pytest.mark.LUT\n    @pytest.mark.import_media\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_4] Import CLUTs, drag media and verify preview\")\n    def test_transition_effect_audiomix_cross_func_21_4(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_3') is run and passed\n        1. Import [CLUTs] with file path (Test_Material_Folder + 'BFT_21_Stage1/3dl_1.3dl')\n        2. Drag media ('3dl_1') to timeline playhead position\n        3. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L72_3dl.png') matches GT (Ground_Truth_Folder + 'L72_3dl.png') with similarity 0.95\n        1. Delete the imported CLUTs file\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L72] 2.3 Effect Room > Import LUT Effect\n        # with uuid(\"5e5419f2-bdb1-4664-933c-753b9c640682\") as case:\n\n        with step(\"[Action] Import [CLUTs] with file path\"):\n            effect_room_page.import_CLUTs(Test_Material_Folder + 'BFT_21_Stage1/3dl_1.3dl')\n\n        with step(\"[Action] Drag media '3dl_1' to timeline playhead position\"):\n            main_page.drag_media_to_timeline_playhead_position(\"3dl_1\")\n\n        with step(\"[Verify] Check preview matches GT (L72_3dl.png) with similarity 0.95\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + 'L72_3dl.png'\n            )\n            if not main_page.compare(Ground_Truth_Folder + 'L72_3dl.png', preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L72_3dl.png)! Similarity should > 0.95\"\n\n        with step('[Action] Delete the imported CLUTs file'):\n            # Select 3dl_1 > Right click menu > Delete\n            main_page.select_library_icon_view_media('3dl_1')\n            main_page.right_click()\n            main_page.select_right_click_menu('Delete')\n\n            # handle warning message (The CLUT  will be delete ... Do you want to continue?)\n            main_page.click(L.base.confirm_dialog.btn_yes)\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_5",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_5",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_4') is run and passed",
            "1. Add audio to track (1) with option ('Above track 4') and check result",
            "2. Click [Undo] button on main page"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_5] Add audio track and click Undo\")\n    def test_transition_effect_audiomix_cross_func_21_5(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_4') is run and passed\n        1. Add audio to track (1) with option ('Above track 4') and check result\n        2. Click [Undo] button on main page\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L78] 2.4 Audio Mixing Room > Audio Track\n        # with uuid(\"dc590d38-160a-45f3-9b96-43d43a6986e7\") as case:\n\n        with step(\"[Action] Add audio to track (1) with option 'Above track 4' and check result\"):\n            result = timeline_operation_page.set_add_tracks_audio(number=1, position='Above track 4')\n            if not result:\n                assert False, \"Failed to add audio to track (1) with option 'Above track 4'\"\n\n        with step(\"[Action] Click [Undo] button on main page\"):\n            main_page.click_undo()\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_6",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "timeline",
            "video_volumn"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_6",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_5') is run and passed",
            "1. Enter Room (Media) (1)",
            "2. Select Track (3) and drag media ('Skateboard 02') to timeline track 3",
            "3. Enter Room (Audio Mixing) (6)",
            "4. Check that the volume element exists for audio track 3:",
            "[{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}]"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.timeline\n    @pytest.mark.video_volumn\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_6] Verify media track drag and audio mixing volume element exist\")\n    def test_transition_effect_audiomix_cross_func_21_6(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_5') is run and passed\n        1. Enter Room (Media) (1)\n        2. Select Track (3) and drag media ('Skateboard 02') to timeline track 3\n        3. Enter Room (Audio Mixing) (6)\n        4. Check that the volume element exists for audio track 3:\n        [{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}]\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Enter Room (Media) with parameter 1\"):\n            # main_page.click(L.main.room_entry.btn_media_room)\n            main_page.enter_room(1)\n\n        with step(\"[Action] Select Track (3) and drag media 'Skateboard 02' to timeline track 3\"):\n            main_page.timeline_select_track(3)\n            main_page.drag_media_to_timeline_playhead_position(\"Skateboard 02\", track_no=3)\n\n        # [L79] 2.4 Audio Mixing Room > Video volume slider\n        # with uuid(\"5dc76d24-9097-4bfb-84bf-33b2e2df86f9\") as case:\n        with step(\"[Action] Enter Room (Audio Mixing) with parameter 6\"):\n            main_page.enter_room(6)\n\n        with step(\"[Verify] Check that volume element exists for audio track 3\"):\n            volume_element = main_page.exist([\n                {'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2},\n                {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}\n            ])\n            if not volume_element:\n                assert False, \"Volume element for audio track 3 is not displayed\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_7",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "timeline",
            "video_volumn"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_7",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_6') is run and passed",
            "1. Get the default volume value for audio track 3 ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}])",
            "2. Check default volume meter is existed and capture its screenshot",
            "3. Mouse drag volume object (Volume preview will update)",
            "4. Check modified volume value is greater than default volume value",
            "5. Capture updated preview after modifying volume meter",
            "6. Check preview matches GT (Ground_Truth_Folder + 'L83.png') with similarity 0.9"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.timeline\n    @pytest.mark.video_volumn\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_7] Verify volume meter update and preview match after modifying volume\")\n    def test_transition_effect_audiomix_cross_func_21_7(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_6') is run and passed\n        1. Get the default volume value for audio track 3 ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}])\n        2. Check default volume meter is existed and capture its screenshot\n        3. Mouse drag volume object (Volume preview will update)\n        4. Check modified volume value is greater than default volume value\n        5. Capture updated preview after modifying volume meter\n        6. Check preview matches GT (Ground_Truth_Folder + 'L83.png') with similarity 0.9\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_6\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Get the default volume value for audio track 3\"):\n            audio_3_volume_elem = main_page.exist([\n                {'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2},\n                {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}\n            ])\n            default_volume = audio_3_volume_elem.AXValue\n\n        with step(\"[Verify] Check default volume meter exists and capture its screenshot\"):\n            default_volume_element = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2})\n            if not default_volume_element:\n                assert False, \"Default volume meter is not displayed\"\n            default_volume_snapshot = main_page.snapshot(locator=default_volume_element)\n\n        with step(\"[Action] Mouse drag volume object to modify volume (Volume preview will update)\"):\n            ori_pos = audio_3_volume_elem.AXPosition\n            size_w, size_h = audio_3_volume_elem.AXSize\n            initial_pos = (ori_pos[0] + size_w * 0.5, ori_pos[1])\n            target_pos = (ori_pos[0] + size_w * 0.5, ori_pos[1] - 150)\n            main_page.drag_mouse(initial_pos, target_pos)\n\n        with step(\"[Action] Get modified volume value for audio track 3\"):\n            modified_volume = audio_3_volume_elem.AXValue\n            if modified_volume <= default_volume:\n                assert False, f\"Modified volume is not greater than default volume! Modified volume: {modified_volume}, Default volume: {default_volume}\"\n\n        # [L80] 2.4 Audio Mixing Room > Volume meter (meter should change during preview)\n        # with uuid(\"ca19991d-00ba-40a9-b678-06b0b0958b76\") as case:\n\n        with step(\"[Action] Capture updated preview after volume modification\"):\n            updated_preview = main_page.snapshot(\n                locator=default_volume_element,\n                file_name=Auto_Ground_Truth_Folder + 'L83.png'\n            )\n            if main_page.compare(default_volume_snapshot, updated_preview, similarity=0.95):\n                assert False, \"Preview does not updated after modifying volume! Similarity should < 0.95\"\n\n        # [L83] 2.4 Audio Mixing Room > Volume meter > Stereo\n        # with uuid(\"af992c16-22d9-4e4e-a784-202d9c43865a\") as case:\n        with step(\"[Verify] Check preview matches GT (L83.png) with similarity 0.9\"):\n            if not main_page.compare(Ground_Truth_Folder + 'L83.png', updated_preview, similarity=0.9):\n                # Similarity should be greater than 0.9 for matching preview\n                assert False, \"Preview does not match GT (L83.png)! Similarity should > 0.9\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_8",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "audio_gain"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_8",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_7') is run and passed",
            "1. Get [Audio Gain] on audio track (3)",
            "2. Check default gain is 50"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.audio_gain\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_8] Verify default audio gain is 50 on track 3\")\n    def test_transition_effect_audiomix_cross_func_21_8(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_7') is run and passed\n        1. Get [Audio Gain] on audio track (3)\n        2. Check default gain is 50\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L81] 2.4 Audio Mixing Room > Audio gain slider\n        # with uuid(\"c5e2a175-7f66-449a-b69f-1e3732b79e07\") as case:\n\n        with step(\"[Action] Get [Audio Gain] on audio track (3)\"):\n            gain = audio_mixing_room_page.get_audio_gain(3)\n\n        with step(\"[Verify] Check default gain is 50\"):\n            if gain != 50:\n                assert False, f\"Default audio gain is not 50! Expected: 50; Actual: {gain}\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_9",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "audio_gain"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_9",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_8') is run and passed",
            "1. Set [Audio Gain] on audio track (3) to (80)",
            "2. Check [Audio Gain] is 80"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.audio_gain\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_9] Set and verify Audio Gain on track 3\")\n    def test_transition_effect_audiomix_cross_func_21_9(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_8') is run and passed\n        1. Set [Audio Gain] on audio track (3) to (80)\n        2. Check [Audio Gain] is 80\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_8\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Set [Audio Gain] on audio track (3) to 80\"):\n            audio_mixing_room_page.set_audio_gain(3, 80)\n\n        with step(\"[Verify] Check [Audio Gain] on audio track (3) is 80\"):\n            gain = audio_mixing_room_page.get_audio_gain(3)\n            if gain != 80:\n                assert False, f\"Audio Gain on track 3 is not 80! Expected: 80, Actual: {gain}\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_10",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "fade_in_out"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_10",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_9') is run and passed",
            "1. Set timecode to ('00_00_03_23') at main page",
            "2. Screenshot audio track 3 ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}) as (file_name=Auto_Ground_Truth_Folder + 'L82_before.png')",
            "3. Click [Fade In] on Audio Track (3)",
            "4. Screenshot audio track 3 after fade in as (file_name=Auto_Ground_Truth_Folder + 'L82_fade_in.png') and check preview is changed",
            "5. Click [Fade Out] on Audio Track (3)",
            "6. Screenshot audio track 3 after fade out as (file_name=Auto_Ground_Truth_Folder + 'L82_after.png') and check preview is changed",
            "7. Check preview after fade in/out reverts to the initial preview"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.fade_in_out\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_10] Verify fade in/out updates and reversion of audio track preview\")\n    def test_transition_effect_audiomix_cross_func_21_10(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_9') is run and passed\n        1. Set timecode to ('00_00_03_23') at main page\n        2. Screenshot audio track 3 ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}) as (file_name=Auto_Ground_Truth_Folder + 'L82_before.png')\n        3. Click [Fade In] on Audio Track (3)\n        4. Screenshot audio track 3 after fade in as (file_name=Auto_Ground_Truth_Folder + 'L82_fade_in.png') and check preview is changed\n        5. Click [Fade Out] on Audio Track (3)\n        6. Screenshot audio track 3 after fade out as (file_name=Auto_Ground_Truth_Folder + 'L82_after.png') and check preview is changed\n        7. Check preview after fade in/out reverts to the initial preview\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L82] 2.4 Audio Mixing Room > Fade in / Fade out\n        # with uuid(\"c7dd410d-3535-49c3-886b-adeec61f0859\") as case:\n\n        with step(\"[Action] Set timeline timecode to '00_00_03_23' at main page\"):\n            main_page.set_timeline_timecode(\"00_00_03_23\")\n\n        with step(\"[Action] Capture initial screenshot of audio track 3\"):\n            audio_track_locator = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2})\n            before_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_before.png')\n\n        with step(\"[Action] Click [Fade In] on Audio Track (3)\"):\n            audio_mixing_room_page.click_fade_in(3)\n\n        with step(\"[Verify] Capture screenshot after Fade In and verify preview has changed\"):\n            fade_in_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_fade_in.png')\n            if main_page.compare(before_preview, fade_in_preview, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated after fade in\n                assert False, \"Preview did not change after Fade In! Similarity should < 0.95\"\n\n        with step(\"[Action] Click [Fade Out] on Audio Track (3)\"):\n            audio_mixing_room_page.click_fade_out(3)\n\n        with step(\"[Verify] Capture screenshot after Fade Out and verify preview has changed\"):\n            fade_out_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_after.png')\n            if main_page.compare(fade_in_preview, fade_out_preview, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated after fade out\n                assert False, \"Preview did not change after Fade Out! Similarity should < 0.95\"\n\n        with step(\"[Verify] Check that the final preview reverts to the initial state\"):\n            if not main_page.compare(before_preview, fade_out_preview, similarity=0.95):\n                # Similarity should be greater than 0.95 if the preview reverted to the initial state\n                assert False, \"Final preview did not revert to the initial state! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_11",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "keyframe",
            "timecode"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_11",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_10') is run and passed",
            "1. Click [Next Keyframe] on track (3) in audio mixing room",
            "2. Get timecode in playback window and check timecode is (00:00:10:00)"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_11] Verify next keyframe and timecode update in playback window\")\n    def test_transition_effect_audiomix_cross_func_21_11(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_10') is run and passed\n        1. Click [Next Keyframe] on track (3) in audio mixing room\n        2. Get timecode in playback window and check timecode is (00:00:10:00)\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_10\"\n        self.ensure_dependency(dependency_test)\n\n        # [L85] 2.4 Audio Mixing Room > Add / Remove/ Switch keyframe\n        # with uuid(\"ef413972-48da-4380-8c0f-e9530174271a\") as case:\n\n        with step(\"[Action] Click [Next Keyframe] on track (3) in audio mixing room\"):\n            audio_mixing_room_page.click_next_keyframe(3)\n\n        with step(\"[Verify] Get timecode from playback window and check it equals '00:00:10:00'\"):\n            current_timecode = playback_window_page.get_timecode_slidebar()\n            if current_timecode != \"00:00:10:00\":\n                assert False, f\"Timecode is not as expected! Expected '00:00:10:00', got '{current_timecode}'\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_12",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "keyframe",
            "timecode"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_12",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_11') is run and passed",
            "1. Click [Previous Keyframe] on track (3) in audio mixing room",
            "2. Get timecode in playback window and check timecode is (00:00:05:23)"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_12] Verify previous keyframe and timecode update in playback window\")\n    def test_transition_effect_audiomix_cross_func_21_12(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_11') is run and passed\n        1. Click [Previous Keyframe] on track (3) in audio mixing room\n        2. Get timecode in playback window and check timecode is (00:00:05:23)\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_11\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Previous Keyframe] on track (3) in audio mixing room\"):\n            audio_mixing_room_page.click_previous_keyframe(3)\n\n        with step(\"[Verify] Get timecode from playback window and verify it equals '00:00:05:23'\"):\n            current_timecode = playback_window_page.get_timecode_slidebar()\n            if current_timecode != \"00:00:05:23\":\n                assert False, f\"Timecode is not as expected! Expected '00:00:05:23', got '{current_timecode}'\"\n\n        assert True"
    },
    {
        "name": "test_transition_effect_audiomix_cross_func_21_13",
        "tags": [
            "transition_effect_audiomix_cross_func",
            "audio_mixing_room",
            "keyframe",
            "timecode",
            "save_project"
        ],
        "marked_name": "test_transition_effect_audiomix_cross_func_21_13",
        "description": [
            "0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_12') is run and passed",
            "1. Click [Keyframe Control] on track (3) in audio mixing room",
            "2. Click [Next Frame] on track (3) in audio mixing room",
            "3. Click [Previous Frame] on track (3) in audio mixing room",
            "4. Get timecode in playback window and check timecode is (00:00:03:23)"
        ],
        "full_code": "@pytest.mark.transition_effect_audiomix_cross_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.keyframe\n    @pytest.mark.timecode\n    @pytest.mark.save_project\n    @pytest.mark.name(\"[test_transition_effect_audiomix_cross_func_21_13] Verify keyframe control and frame navigation update timecode\")\n    def test_transition_effect_audiomix_cross_func_21_13(self):\n    '''\n        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_12') is run and passed\n        1. Click [Keyframe Control] on track (3) in audio mixing room\n        2. Click [Next Frame] on track (3) in audio mixing room\n        3. Click [Previous Frame] on track (3) in audio mixing room\n        4. Get timecode in playback window and check timecode is (00:00:03:23)\n        '''\ndependency_test = \"test_transition_effect_audiomix_cross_func_21_12\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Click [Keyframe Control] on track (3) in audio mixing room\"):\n            audio_mixing_room_page.click_keyframe_control(3)\n\n        with step(\"[Action] Click [Next Frame] on track (3) in audio mixing room\"):\n            audio_mixing_room_page.click_next_keyframe(3)\n\n        with step(\"[Action] Click [Previous Frame] on track (3) in audio mixing room\"):\n            audio_mixing_room_page.click_previous_keyframe(3)\n\n        with step(\"[Verify] Get timecode from playback window and check it equals '00:00:03:23'\"):\n            current_timecode = playback_window_page.get_timecode_slidebar()\n            if current_timecode != \"00:00:03:23\":\n                assert False, f\"Timecode is not as expected! Expected '00:00:03:23', got '{current_timecode}'\"\n\n        with step(\"[Action] Remove media ('Skateboard 02') from timeline track 3\"):\n            main_page.select_timeline_media('Skateboard 02')\n            tips_area_page.more_features.remove(index=1)\n\n        with step(\"[Action] Click [Stop] button and save project\"):\n            playback_window_page.Edit_Timeline_PreviewOperation('STOP')\n            time.sleep(DELAY_TIME)\n\n            # Save project:\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name='test_transition_effect_audiomix_cross_func_21_13',\n                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n\n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_1",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "launch",
            "preference",
            "media_room",
            "import_media",
            "audio_mixing_room"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_1",
        "description": [
            "1. Start APP and clear capture file",
            "2. Import media from (Test_Material_Folder + 'Crop_Zoom_Pan/AVC(16_9, 1920x1056, 23.976)_AAC(6ch).mov') and handle high definition dialog",
            "3. Click [Preferences] and set [Audio Channels] to (5.1 Surround), then click [OK]",
            "4. Insert media to selected track",
            "5. Enter Room (Audio Mixing) (6) and set timecode to ('00_01_11_04')",
            "6. Verify preview of audio track 1 (file_name=Auto_Ground_Truth_Folder + 'L84_6ch_track.png') matches GT (Ground_Truth_Folder + 'L84_6ch_track.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.launch\n    @pytest.mark.preference\n    @pytest.mark.media_room\n    @pytest.mark.import_media\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_1] Import media, set preferences and verify audio track preview\")\n    def test_audio_mixing_n_voice_over_recording_func_22_1(self):\n    '''\n        1. Start APP and clear capture file\n        2. Import media from (Test_Material_Folder + 'Crop_Zoom_Pan/AVC(16_9, 1920x1056, 23.976)_AAC(6ch).mov') and handle high definition dialog\n        3. Click [Preferences] and set [Audio Channels] to (5.1 Surround), then click [OK]\n        4. Insert media to selected track\n        5. Enter Room (Audio Mixing) (6) and set timecode to ('00_01_11_04')\n        6. Verify preview of audio track 1 (file_name=Auto_Ground_Truth_Folder + 'L84_6ch_track.png') matches GT (Ground_Truth_Folder + 'L84_6ch_track.png') with similarity 0.95\n        '''\nwith step(\"[Action] Start APP and clear capture file\"):\n            main_page.clear_capture_file()\n            main_page.start_app()\n\n        # [L84] 2.4 Audio Mixing Room > Volume meter > 5.1 Surround\n        # with uuid(\"0777102c-fc09-474d-b4bf-07a85ca9cfb2\") as case:\n\n        with step(\"[Action] Import media from specified path and handle high definition dialog\"):\n            media_room_page.import_media_file(Test_Material_Folder + \"Crop_Zoom_Pan/AVC(16_9, 1920x1056, 23.976)_AAC(6ch).mov\", option=0, timeout=30)\n            media_room_page.handle_high_definition_dialog(option=\"no\")\n            main_page.snapshot(locator=L.base.Area.library_icon_view, \n                               file_name=Auto_Ground_Truth_Folder + \"preview_befroe_recording.png\") # for test_audio_mixing_n_voice_over_recording_func_22_6\n\n        with step(\"[Action] Open Preferences, set Audio Channels to 5.1 Surround and confirm settings\"):\n            main_page.click_set_user_preferences()\n            preferences_page.general.audio_channels_set_51_surround()\n            preferences_page.click_ok()\n\n        with step(\"[Action] Insert media to selected track\"):\n            main_page.tips_area_insert_media_to_selected_track(option=-1)\n\n        with step(\"[Action] Enter Audio Mixing Room (6) and set timeline timecode to '00_01_11_04'\"):\n            main_page.enter_room(6)\n            main_page.set_timeline_timecode(\"00_01_11_04\")\n\n        with step(\"[Verify] Capture screenshot of audio track 1 preview and compare with GT (L84_6ch_track.png)\"):\n            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})\n            preview = main_page.snapshot(locator=audio_1_library_track, file_name=Auto_Ground_Truth_Folder + \"L84_6ch_track.png\")\n            if not main_page.compare(Ground_Truth_Folder + \"L84_6ch_track.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match GT (L84_6ch_track.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_2",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "audio_mixing_room",
            "nomalize"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_2",
        "description": [
            "0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_1') is run and passed",
            "1. Check [Normalize] button status ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}, {'AXIdentifier': 'IDC_AUDIOMIXER_BUTTONNORMALIZE'}]).AXEnabled is Disabled"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.nomalize\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_2] Check Normalize button disabled\")\n    def test_audio_mixing_n_voice_over_recording_func_22_2(self):\n    '''\n        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_1') is run and passed\n        1. Check [Normalize] button status ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}, {'AXIdentifier': 'IDC_AUDIOMIXER_BUTTONNORMALIZE'}]).AXEnabled is Disabled\n        '''\ndependency_test = \"test_audio_mixing_n_voice_over_recording_func_22_1\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L86] 2.4 Audio Mixing Room > Normalize\n        # with uuid(\"7d77dd1e-37c5-4e05-a8aa-c350f3d945b3\") as case:\n\n        with step(\"[Verify] [Normalize] button status is Disabled\"):\n            normalize_btn = main_page.exist([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0},\n                                            {'AXIdentifier': 'IDC_AUDIOMIXER_BUTTONNORMALIZE'}])\n            if not normalize_btn or normalize_btn.AXEnabled:\n                # The [Normalize] button should be disabled (AXEnabled should be False)\n                assert False, \"[Normalize] button is not disabled\"\n        \n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_3",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "audio_mixing_room",
            "nomalize"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_3",
        "description": [
            "0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_2') is run and passed",
            "1. Click [Split] button on [Tips Area]",
            "2. Enter Room (Media) (0) and select media ('Skateboard 01.mp4') from library icon view",
            "3. Insert media to timeline",
            "4. Enter Room (Audio Mixing) (6) and click [Normalize] on track (1) and check the result"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.audio_mixing_room\n    @pytest.mark.nomalize\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_3] Tips split, media insertion, and audio mixing normalize check\")\n    def test_audio_mixing_n_voice_over_recording_func_22_3(self):\n    '''\n        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_2') is run and passed\n        1. Click [Split] button on [Tips Area]\n        2. Enter Room (Media) (0) and select media ('Skateboard 01.mp4') from library icon view\n        3. Insert media to timeline\n        4. Enter Room (Audio Mixing) (6) and click [Normalize] on track (1) and check the result\n        '''\ndependency_test = \"test_audio_mixing_n_voice_over_recording_func_22_2\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Click [Split] button on [Tips Area]\"):\n            main_page.tips_area_click_split(compare_similarity=0.99)\n            \n        with step(\"[Action] Enter Room (Media) (0) and select media 'Skateboard 01.mp4' from library icon view\"):\n            main_page.enter_room(0)\n            main_page.select_library_icon_view_media(\"Skateboard 01.mp4\")\n            \n        with step(\"[Action] Insert media to timeline\"):\n            # main_page.tips_area_insert_media_to_selected_track()\n            self.temp_for_os_14_insert_function(0)\n            \n        with step(\"[Action] Enter Room (Audio Mixing) (6) and click [Normalize] on track (1)\"):\n            main_page.enter_room(6)\n            if not audio_mixing_room_page.click_normalize(1):\n                assert False, \"Failed to click [Normalize] button on track 1\"\n            \n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_4",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "preference",
            "voice_over_recording_room",
            "time_limit",
            "record"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_4",
        "description": [
            "0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_3') is run and passed",
            "1. Click [Set User Preferences] > Set [Audio Channels] to (Stereo) > Click [OK] to leave [Preferences]",
            "2. Enter Room (Voice-Over Recording) (7) > Screenshot (locator=L.base.Area.timeline)",
            "3. Click [Preferences] button in [Voice Over Recording Room]",
            "4. Enable [Time Limit] checkbox in [Voice Over Recording Room - Preferences]",
            "5. Set [Time Limit] to (3)",
            "6. Click [OK] button to leave [Voice Over Recording Room - Preferences]",
            "7. Click [Record] button to record 5 secs (recording_time=5, skip_press_stop=1)",
            "8. Check preview (locator=L.base.Area.timeline) is updated with similarity 0.95",
            "9. Click [Preferences] button in [Voice Over Recording Room] > Disable [Time Limit] checkbox > Click [OK] button"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.preference\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.time_limit\n    @pytest.mark.record\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_4] Set Timelimit, record, and check preview update in Voice Over Recording Room\")\n    def test_audio_mixing_n_voice_over_recording_func_22_4(self):\n    '''\n        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_3') is run and passed\n        1. Click [Set User Preferences] > Set [Audio Channels] to (Stereo) > Click [OK] to leave [Preferences]\n        2. Enter Room (Voice-Over Recording) (7) > Screenshot (locator=L.base.Area.timeline)\n        3. Click [Preferences] button in [Voice Over Recording Room]\n        4. Enable [Time Limit] checkbox in [Voice Over Recording Room - Preferences]\n        5. Set [Time Limit] to (3)\n        6. Click [OK] button to leave [Voice Over Recording Room - Preferences]\n        7. Click [Record] button to record 5 secs (recording_time=5, skip_press_stop=1)\n        8. Check preview (locator=L.base.Area.timeline) is updated with similarity 0.95\n        9. Click [Preferences] button in [Voice Over Recording Room] > Disable [Time Limit] checkbox > Click [OK] button\n        '''\ndependency_test = \"test_audio_mixing_n_voice_over_recording_func_22_3\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Set User Preferences: Set Audio Channels to (Stereo) and leave Preferences\"):\n            main_page.click_set_user_preferences()\n            preferences_page.general.audio_channels_set_stereo()\n            preferences_page.click_ok()\n        \n        with step(\"[Action] Enter Room (Voice-Over Recording) (7) and take initial timeline screenshot\"):\n            main_page.enter_room(7)\n            before_preview = main_page.snapshot(locator=L.base.Area.timeline)\n        \n        # [L94] 2.5 Voice Over Recording Room > Recording\n        # with uuid(\"caaa3432-59bc-464d-a1c6-011da6381159\") as case:\n\n        with step(\"[Action] Click [Preferences] button in Voice-Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n        \n        with step(\"[Action] Enable Time Limit checkbox in Voice-Over Recording Room - Preferences\"):\n            voice_over_recording_page.set_check_recording_preferences_timelimit(bCheck=1)\n        \n        with step(\"[Action] Set Time Limit to (3)\"):\n            voice_over_recording_page.set_timelimit_sec(3)\n        \n        with step(\"[Action] Click [OK] to leave Voice-Over Recording Room - Preferences\"):\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        with step(\"[Action] Click [Record] button to record 5 seconds\"):\n            voice_over_recording_page.click_record_btn(5, skip_press_stop=1)\n        \n        with step(\"[Verify] Check timeline preview is updated after recording\"):\n            after_preview = main_page.snapshot(locator=L.base.Area.timeline)\n            if main_page.compare(before_preview, after_preview, similarity=0.95):\n                # Similarity should be less than 0.95 when preview is updated\n                assert False, \"Preview did not update after recording! Similarity should < 0.95\"\n        \n        with step(\"[Action] Click [Preferences] button, disable Time Limit, and leave Preferences\"):\n            voice_over_recording_page.click_preferences_btn()\n            voice_over_recording_page.set_check_recording_preferences_timelimit(bCheck=0)\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_5",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "voice_over_recording_room",
            "record"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_5",
        "description": [
            "0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed",
            "1. Get timecode from slidebar",
            "2. Check timecode is ('00:01:14:04') after recording"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.record\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_5] Verify timecode after recording\")\n    def test_audio_mixing_n_voice_over_recording_func_22_5(self):\n    '''\n        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed\n        1. Get timecode from slidebar\n        2. Check timecode is ('00:01:14:04') after recording\n        '''\ndependency_test = \"test_audio_mixing_n_voice_over_recording_func_22_4\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L88] 2.5 Voice Over Recording Room > Recording preference > Time limit\n        # with uuid(\"78e31461-7279-4e66-b18a-4d2ea49b5574\") as case:\n\n        with step(\"[Action] Get timecode from slidebar\"):\n            timecode = playback_window_page.get_timecode_slidebar()\n        \n        with step(\"[Verify] Check timecode is ('00:01:14:04') after recording\"):\n            if timecode != \"00:01:14:04\":\n                assert False, f\"Timecode after recording is not correct! Expected: 00:01:14:04, Actual: {timecode}\"\n        \n        assert True"
    },
    {
        "name": "test_audio_mixing_n_voice_over_recording_func_22_6",
        "tags": [
            "audio_mixing_n_voice_over_recording_func",
            "media_room",
            "record"
        ],
        "marked_name": "test_audio_mixing_n_voice_over_recording_func_22_6",
        "description": [
            "0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed",
            "1. Enter Room (Media) (0)",
            "2. Check preview (L.base.Area.library_icon_view) is updated from snapshot (file_name=Auto_Ground_Truth_Folder + \"preview_befroe_recording.png\") with similarity 0.95"
        ],
        "full_code": "@pytest.mark.audio_mixing_n_voice_over_recording_func\n    @pytest.mark.media_room\n    @pytest.mark.record\n    @pytest.mark.name(\"[test_audio_mixing_n_voice_over_recording_func_22_6] Verify preview in Media Room updated after recording\")\n    def test_audio_mixing_n_voice_over_recording_func_22_6(self):\n    '''\n        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed\n        1. Enter Room (Media) (0)\n        2. Check preview (L.base.Area.library_icon_view) is updated from snapshot (file_name=Auto_Ground_Truth_Folder + \"preview_befroe_recording.png\") with similarity 0.95\n        '''\ndependency_test = \"test_audio_mixing_n_voice_over_recording_func_22_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L95] 2.5 Voice-Over recording Room > Stop record\n        # with uuid(\"cb943066-9ecc-4410-807e-912fa44ad580\") as case:\n\n        with step(\"[Action] Enter Room (Media) (0)\"):\n            main_page.enter_room(0)\n        \n        with step(\"[Verify] Check preview matches GT (preview_befroe_recording.png)\"):\n            preview_snapshot = main_page.snapshot(\n                locator=main_page.area.library_icon_view,\n                file_name=Auto_Ground_Truth_Folder + \"preview_after_recording.png\"\n            )\n            if main_page.compare(\n                Auto_Ground_Truth_Folder + \"preview_befroe_recording.png\",\n                preview_snapshot,\n                similarity=0.95\n            ):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (preview_befroe_recording.png)! Similarity should < 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_1",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "launch",
            "timeline",
            "voice_over_recording_room",
            "fade_in_out"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_1",
        "description": [
            "1. Clear capture file and start APP",
            "2. Select content ('Skateboard 01.mp4') from library icon view and insert to timeline",
            "3. Screenshot default timeline preview (locator=L.base.Area.timeline) for further comparison",
            "4. Enter Room (Voice-Over Recording) (7)",
            "5. Click [Preferences] in [Voice Over Recording Room]",
            "6. Check default fade-in is disable (L.voice_over_recording.chx_auto_fade_in)"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.launch\n    @pytest.mark.timeline\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.fade_in_out\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_1] Verify default fade-in is disabled in Voice-Over Recording Room\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_1(self):\n    '''\n        1. Clear capture file and start APP\n        2. Select content ('Skateboard 01.mp4') from library icon view and insert to timeline\n        3. Screenshot default timeline preview (locator=L.base.Area.timeline) for further comparison\n        4. Enter Room (Voice-Over Recording) (7)\n        5. Click [Preferences] in [Voice Over Recording Room]\n        6. Check default fade-in is disable (L.voice_over_recording.chx_auto_fade_in)\n        '''\nwith step(\"[Action] Clear capture file and start APP\"):\n            main_page.clear_capture_file()\n            main_page.start_app()\n\n        with step(\"[Action] Select 'Skateboard 01.mp4' from library and insert to timeline\"):\n            main_page.select_library_icon_view_media(\"Skateboard 01.mp4\")\n            main_page.tips_area_insert_media_to_selected_track()\n\n        # [L90] 2.5 Voice-Over recording Room > Recording Preference > auto fade-in\n        # with uuid(\"10336dd8-bc56-4b3d-ae09-140d52f607c2\") as case:\n\n        with step(\"[Action] Screenshot default timeline preview\"):\n            main_page.snapshot(locator=L.base.Area.timeline,\n                                file_name=Auto_Ground_Truth_Folder + \"L90_default_timeline.png\")\n\n        with step(\"[Action] Enter Room (Voice-Over Recording) (7)\"):\n            main_page.enter_room(7)\n\n        with step(\"[Action] Click [Preferences] in Voice-Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n\n        with step(\"[Verify] Check default fade-in is disabled\"):\n            fade_in_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_in)\n            if not fade_in_checkbox or fade_in_checkbox.AXEnabled==1:\n                assert False, \"Default fade-in is not disabled\"\n\n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_2",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room",
            "fade_in_out"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_2",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_1') is run and passed",
            "1. Enable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]",
            "2. Click [OK] button to leave [Voice Over Recording Room - Preferences]",
            "3. Click [Preferences] in [Voice Over Recording Room]",
            "4. Verify [Auto Fade In] checkbox (L.voice_over_recording.chx_auto_fade_in) is enabled",
            "5. Disable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.fade_in_out\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_2] Verify [Auto Fade In] checkbox is enabled after enable and re-enter in [Voice Over Recording Room]\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_2(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_1') is run and passed\n        1. Enable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]\n        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]\n        3. Click [Preferences] in [Voice Over Recording Room]\n        4. Verify [Auto Fade In] checkbox (L.voice_over_recording.chx_auto_fade_in) is enabled\n        5. Disable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_1\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enable Auto Fade In checkbox in Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.set_check_recording_preferences_auto_fade_in(bCheck=1)\n        \n        with step(\"[Action] Click OK to leave Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        with step(\"[Action] Click Preferences in Voice Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n        \n        with step(\"[Verify] Check that Auto Fade In checkbox is enabled\"):\n            auto_fade_in_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_in)\n            if not auto_fade_in_checkbox or auto_fade_in_checkbox.AXEnabled !=1:\n                assert False, \"Auto Fade In checkbox is not enabled\"\n\n        with step(\"[Action] Disable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]\"):\n            voice_over_recording_page.set_check_recording_preferences_auto_fade_in(bCheck=0)\n            voice_over_recording_page.click_recording_preferences_ok()\n\n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_3",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room",
            "fade_in_out"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_3",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_2') is run and passed",
            "1. Click [Preferences] in [Voice Over Recording Room]",
            "2. Check default [Fade Out] is disabled (0) (L.voice_over_recording.chx_auto_fade_out)"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.fade_in_out\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_3] Verify default Fade Out is disabled in Voice Over Recording Room\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_3(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_2') is run and passed\n        1. Click [Preferences] in [Voice Over Recording Room]\n        2. Check default [Fade Out] is disabled (0) (L.voice_over_recording.chx_auto_fade_out)\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_2\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L91] 2.5 Voice-Over recording Room > Recording Preference > auto fade-out\n        # with uuid(\"977b1f1d-fda3-4b41-b2dd-e4a6f5de1551\") as case:\n\n        with step(\"[Action] Click Preferences in Voice Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n        \n        with step(\"[Verify] Check default Fade Out checkbox is disabled\"):\n            fade_out_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_out)\n            if not fade_out_checkbox or fade_out_checkbox.AXEnabled!=0:\n                assert False, \"Default Fade Out is enabled, but it should be disabled (0)\"\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_4",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room",
            "fade_in_out"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_4",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_3') is run and passed",
            "1. Enable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences]",
            "2. Click [OK] button to leave [Voice Over Recording Room - Preferences]",
            "3. Click [Preferences] in [Voice Over Recording Room]",
            "4. Verify [Auto Fade Out] checkbox (L.voice_over_recording.chx_auto_fade_out) is enabled",
            "5. Disable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences] > Click [OK] button"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.fade_in_out\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_4] Verify [Auto Fade Out] checkbox is enabled after enable and re-enter in [Voice Over Recording Room]\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_4(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_3') is run and passed\n        1. Enable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences]\n        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]\n        3. Click [Preferences] in [Voice Over Recording Room]\n        4. Verify [Auto Fade Out] checkbox (L.voice_over_recording.chx_auto_fade_out) is enabled\n        5. Disable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences] > Click [OK] button\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_3\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enable Auto Fade Out checkbox in Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.set_check_recording_preferences_auto_fade_out(bCheck=1)\n        \n        with step(\"[Action] Click OK to leave Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        with step(\"[Action] Click Preferences in Voice Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n        \n        with step(\"[Verify] Check that Auto Fade Out checkbox is enabled\"):\n            auto_fade_out_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_out)\n            if not auto_fade_out_checkbox or auto_fade_out_checkbox.AXEnabled !=1:\n                assert False, \"Auto Fade Out checkbox is not enabled\"\n        \n        with step(\"[Action] Disable Auto Fade Out checkbox and leave Preferences\"):\n            voice_over_recording_page.set_check_recording_preferences_auto_fade_out(bCheck=0)\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_5",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_5",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_4') is run and passed",
            "1. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 0"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_5] Verify [Mute All Tracking when Recording] checkbox default is disabled\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_5(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_4') is run and passed\n        1. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 0\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_4\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L92] 2.5 Voice-Over recording Room > Mute all tracks when recording\n        # with uuid(\"ac9db627-975e-447b-ade6-307cffcce17c\") as case:\n\n        with step(\"[Verify] Check [Mute All Tracking when Recording] checkbox is disabled\"):\n            mute_all_checkbox = main_page.exist(L.voice_over_recording.chx_mute_all_tracks_when_recording)\n            if not mute_all_checkbox or mute_all_checkbox.AXValue != 0:\n                assert False, \"Mute All Tracking when Recording checkbox is not disabled (expected value 0)\"\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_6",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_6",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_5') is run and passed",
            "1. Enable [Mute All Tracks When Recording] checkbox",
            "2. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 1"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_6] Verify [Mute All Tracks When Recording] checkbox status is enabled after enable it\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_6(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_5') is run and passed\n        1. Enable [Mute All Tracks When Recording] checkbox\n        2. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 1\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_5\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enable 'Mute All Tracks When Recording' checkbox\"):\n            voice_over_recording_page.set_check_mute_all_track(bCheck=1)\n        \n        with step(\"[Verify] Check that 'Mute All Tracks When Recording' checkbox status is 1\"):\n            mute_all_checkbox = main_page.exist(L.voice_over_recording.chx_mute_all_tracks_when_recording)\n            if not mute_all_checkbox or mute_all_checkbox.AXValue != 1:\n                assert False, \"Mute All Tracks When Recording checkbox is not enabled (expected value 1)\"\n\n        with step(\"[Action] Disable [Mute All Tracks When Recording] checkbox\"):\n            voice_over_recording_page.set_check_mute_all_track(bCheck=0)\n\n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_7",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room",
            "delay_3_secs"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_7",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_6') is run and passed",
            "1. Click [Preferences] in [Voice Over Recording Room]",
            "2. Check default [Auto 3 sec delay before recording] is disabled (0) (L.voice_over_recording.chx_delay_3s)"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.delay_3_secs\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_7] Verify [']Auto 3 sec delay before recording] checkbox default is disabled\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_7(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_6') is run and passed\n        1. Click [Preferences] in [Voice Over Recording Room]\n        2. Check default [Auto 3 sec delay before recording] is disabled (0) (L.voice_over_recording.chx_delay_3s)\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_6\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L89] 2.5 Voice-Over recording Room > Auto 3 sec delay before recording\n        # with uuid(\"fc515ef1-aa48-4c66-9dea-811ca2fb70b8\") as case:\n\n        with step(\"[Action] Click Preferences in Voice Over Recording Room\"):\n            voice_over_recording_page.click_preferences_btn()\n        \n        with step(\"[Verify] Check that [Auto 3 sec delay before recording] checkbox is disabled\"):\n            delay_checkbox = main_page.exist(L.voice_over_recording.chx_delay_3s)\n            if not delay_checkbox or delay_checkbox.AXValue != 0:\n                assert False, \"Auto 3 sec delay before recording checkbox is not disabled (expected value 0)\"\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_8",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "voice_over_recording_room",
            "delay_3_secs"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_8",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_7') is run and passed",
            "1. Enable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]",
            "2. Click [OK] button to leave [Voice Over Recording Room - Preferences]",
            "3. Click [Record] Button to start record and wait (DELAY_TIME)",
            "4. Click [Record] Button to stop record",
            "5. Verify preview (L.base.Area.timeline) is updated with (file_name=Auto_Ground_Truth_Folder + \"L90_default_timeline.png\") with similarity 0.95",
            "6. Disable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.voice_over_recording_room\n    @pytest.mark.delay_3_secs\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_8] Verify timeline preview update after recording with 3s delay\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_8(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_7') is run and passed\n        1. Enable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]\n        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]\n        3. Click [Record] Button to start record and wait (DELAY_TIME)\n        4. Click [Record] Button to stop record\n        5. Verify preview (L.base.Area.timeline) is updated with (file_name=Auto_Ground_Truth_Folder + \"L90_default_timeline.png\") with similarity 0.95\n        6. Disable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_7\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Enable Delay 3s checkbox in Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.set_check_recording_preferences_delay_3s(bCheck=1)\n        \n        with step(\"[Action] Click OK to leave Voice Over Recording Room - Preferences\"):\n            voice_over_recording_page.click_recording_preferences_ok()\n        \n        with step(\"[Action] Start recording by clicking the Record button\"):\n            voice_over_recording_page.click_record_btn(1, skip_press_stop=1)\n            # main_page.click(L.voice_over_recording.btn_record)\n            # time.sleep(DELAY_TIME)\n        \n        # with step(\"[Action] Stop recording by clicking the Record button\"):\n        #     # Stop record btn\n        #     main_page.click(L.voice_over_recording.btn_record)\n        \n        with step(\"[Verify] Check timeline preview is updated\"):\n            preview = main_page.snapshot(\n                locator=L.base.Area.timeline,\n                file_name=Auto_Ground_Truth_Folder + \"L90_recorded_timeline.png\"\n            )\n            if main_page.compare(Auto_Ground_Truth_Folder + \"L90_default_timeline.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for matching preview\n                assert False, \"Preview does not match snapshot (L90_default_timeline.png)! Similarity should < 0.95\"\n\n            with step('[Action] Disable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]'):\n                voice_over_recording_page.click_preferences_btn()\n                voice_over_recording_page.set_check_recording_preferences_delay_3s(bCheck=0)\n                voice_over_recording_page.click_recording_preferences_ok()\n\n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_9",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "media_room",
            "import_media",
            "subtitle_room",
            "timeline",
            "auto_transcribe"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_9",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_8') is run and passed",
            "1. Enter Room (Media) (0)",
            "2. Import media from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')",
            "3. Select Track (1) > Set timeline timecode to ('00_00_10_00') at main page",
            "4. Drag media ('JPN.mp4') to timeline at playhead position",
            "5. Enter Room (Subtitle) (8)",
            "6. Click [Auto Transcribe] button",
            "7. Select Language (JPN)",
            "8. Get [Language] status > Check if it is 'Japanese'"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.media_room\n    @pytest.mark.import_media\n    @pytest.mark.subtitle_room\n    @pytest.mark.timeline\n    @pytest.mark.auto_transcribe\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_9] Import media, set timeline, transcribe and verify language status\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_9(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_8') is run and passed\n        1. Enter Room (Media) (0)\n        2. Import media from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')\n        3. Select Track (1) > Set timeline timecode to ('00_00_10_00') at main page\n        4. Drag media ('JPN.mp4') to timeline at playhead position\n        5. Enter Room (Subtitle) (8)\n        6. Click [Auto Transcribe] button\n        7. Select Language (JPN)\n        8. Get [Language] status > Check if it is 'Japanese'\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_8\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L98] 2.6 Subtitle Room > Speech to text (Auto Transcribe subtitle)\n        # with uuid(\"831589ab-052e-4e13-a8e6-f7d22cca3c5f\") as case:\n\n        with step(\"[Action] Enter Room (Media) (0)\"):\n            main_page.enter_room(0)\n        \n        with step(\"[Action] Import media 'JPN.mp4' from local\"):\n            media_path = Test_Material_Folder + \"Subtitle_Room/JPN.mp4\"\n            media_room_page.import_media_file(media_path)\n        \n        with step(\"[Action] Select Track (1) and set timeline timecode to '00_00_10_00'\"):\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode(\"00_00_10_00\")\n        \n        with step(\"[Action] Drag media 'JPN.mp4' to timeline playhead position\"):\n            main_page.drag_media_to_timeline_playhead_position(\"JPN.mp4\")\n        \n        with step(\"[Action] Enter Room (Subtitle) (8)\"):\n            main_page.enter_room(8)\n        \n        with step(\"[Action] Click [Auto Transcribe] button\"):\n            subtitle_room_page.library_menu.click_auto_transcribe()\n        \n        with step(\"[Action] Select Language 'JPN'\"):\n            subtitle_room_page.auto_function.select_LANG(\"JPN\")\n        \n        with step(\"[Verify] Check that Language status is 'Japanese'\"):\n            lang_status = subtitle_room_page.auto_function.get_LANG_status()\n            if lang_status != \"Japanese\":\n                assert False, f\"Language status is not 'Japanese'! Got '{lang_status}' instead.\"\n        \n        assert True"
    },
    {
        "name": "test_voice_over_recording_room_n_subtitle_room_func_24_10",
        "tags": [
            "voice_over_recording_room_n_subtitle_room_func",
            "subtitle_room",
            "auto_transcribe"
        ],
        "marked_name": "test_voice_over_recording_room_n_subtitle_room_func_24_10",
        "description": [
            "0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_9') is run and passed",
            "1. Click [Create] button and wait until [Cancel] button disappears",
            "2. Check [Total Subtitle Rows] is over 6 rows"
        ],
        "full_code": "@pytest.mark.voice_over_recording_room_n_subtitle_room_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.auto_transcribe\n    @pytest.mark.name(\"[test_voice_over_recording_room_n_subtitle_room_func_24_10] Verify subtitle creation and total subtitle rows over 6\")\n    def test_voice_over_recording_room_n_subtitle_room_func_24_10(self):\n    '''\n        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_9') is run and passed\n        1. Click [Create] button and wait until [Cancel] button disappears\n        2. Check [Total Subtitle Rows] is over 6 rows\n        '''\ndependency_test = \"test_voice_over_recording_room_n_subtitle_room_func_24_9\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Click [Create] button and wait until [Cancel] button disappears\"):\n            subtitle_room_page.auto_function.click_create()\n            # Wait until the cancel button disappears, checking up to 200 times\n            for _ in range(200):\n                if not main_page.is_exist(L.subtitle_room.handle_progress_dialog.btn_cancel):\n                    break\n                time.sleep(1)\n        \n        with step(\"[Verify] Check that total subtitle rows is over 6\"):\n            total_rows = self.get_total_subtitle_rows()\n            if total_rows <= 6:\n                assert False, f\"Total subtitle rows incorrect! Expected > 6, got {total_rows}\"\n        \n        assert True"
    },
    {
        "name": "test_eee_func_25_1",
        "tags": [
            "eee_func",
            "launch",
            "subtitle_room"
        ],
        "marked_name": "test_eee_func_25_1",
        "description": [
            "1. Start APP",
            "2. Check [Subtitle Room] button (L.main.room_entry.btn_subtitle_room) status is disabled (False) due to no clip imported"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.launch\n    @pytest.mark.subtitle_room\n    @pytest.mark.name(\"[test_eee_func_25_1] Verify Subtitle Room button is disabled due to no clip imported\")\n    def test_eee_func_25_1(self):\n    '''\n        1. Start APP\n        2. Check [Subtitle Room] button (L.main.room_entry.btn_subtitle_room) status is disabled (False) due to no clip imported\n        '''\nwith step(\"[Action] Start APP\"):\n            main_page.start_app()\n        \n        \n        # [L97] 2.6 Subtitle Room > Subtitle room should be gray out when not clips on timeline\n        # with uuid(\"a561424a-b292-474c-adef-3d5e8b4377b9\") as case:\n\n        with step(\"[Verify] Check Subtitle Room button is disabled\"):\n            subtitle_btn = main_page.exist(L.main.room_entry.btn_subtitle_room)\n            if subtitle_btn is None or subtitle_btn.AXEnabled:\n                assert False, \"Subtitle Room button is not disabled as expected due to no clip imported\"\n        \n        assert True"
    },
    {
        "name": "test_eee_func_25_2",
        "tags": [
            "eee_func",
            "open_project",
            "preference",
            "media_room",
            "timecode",
            "subtitle_room",
            "add_subtitle_manual"
        ],
        "marked_name": "test_eee_func_25_2",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_1') is run and passed",
            "1. Open packed project ('Packed_Project/test_eee_func_25_2.pdk', 'Extracted_Folder/test_eee_func_25_2')",
            "2. Enter [Preference] > Switch to [Editing] tab > Set [Subtitle] default Duration to (10.0) > Click [OK] to leave [Preference]",
            "3. Set timeline timecode to ('00_00_03_23') at main page",
            "4. Enter Room (Subtitle) (8) > Click [Manually Create] button > Click [Add] button > Modify the (1) subtitle text to (string1='Welcome 1001 Shopping Mall.', string2=' Big sale')",
            "5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I99.png') matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.open_project\n    @pytest.mark.preference\n    @pytest.mark.media_room\n    @pytest.mark.timecode\n    @pytest.mark.subtitle_room\n    @pytest.mark.add_subtitle_manual\n    @pytest.mark.name(\"[test_eee_func_25_2] Verify subtitle creation and preview update with default duration change\")\n    def test_eee_func_25_2(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_1') is run and passed\n        1. Open packed project ('Packed_Project/test_eee_func_25_2.pdk', 'Extracted_Folder/test_eee_func_25_2')\n        2. Enter [Preference] > Switch to [Editing] tab > Set [Subtitle] default Duration to (10.0) > Click [OK] to leave [Preference]\n        3. Set timeline timecode to ('00_00_03_23') at main page\n        4. Enter Room (Subtitle) (8) > Click [Manually Create] button > Click [Add] button > Modify the (1) subtitle text to (string1='Welcome 1001 Shopping Mall.', string2=' Big sale')\n        5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I99.png') matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.95\n        '''\ndependency_test = \"test_eee_func_25_1\"\n        self.ensure_dependency(dependency_test)\n        \n        with step(\"[Action] Open packed project for test_eee_func_25_2\"):\n            self.open_packed_project(\"Packed_Project/test_eee_func_25_2.pdk\", \"Extracted_Folder/test_eee_func_25_2\")\n        \n        with step(\"[Action] Enter Preference > Switch to Editing tab and set Subtitle default Duration to 10.0, then click OK\"):\n            # Open Preference > Editing > Set default Subtitle duration to 10 (For v21.6 PM request VDE235316-0061)\n            main_page.click_set_user_preferences()\n            preferences_page.switch_to_editing()\n            preferences_page.editing.durations_subtitle_set_value('10.0')\n            time.sleep(DELAY_TIME)\n            preferences_page.click_ok()\n\n        with step(\"[Action] Set timeline timecode to '00_00_03_23' at main page\"):\n            main_page.set_timeline_timecode(\"00_00_03_23\", is_verify=True)\n\n        # [L99] 2.6 Subtitle Room > Create Subtitle manually\n        # with uuid(\"43f96c3a-118c-4c3e-955c-1c8f8fcc2bb8\") as case:\n\n        with step(\"[Action] Enter Room (Subtitle) (8) and create subtitle manually\"):\n            main_page.enter_room(8)\n            subtitle_room_page.library_menu.click_manually_create()\n            subtitle_room_page.click_add_btn()\n            subtitle_room_page.modify_subtitle_text(1, string1=\"Welcome 1001 Shopping Mall.\", string2=\" Big sale\")\n        \n        with step(\"[Verify] Screenshot preview and compare with GT (I99.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + \"I99.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"I99.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (I99.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_eee_func_25_3",
        "tags": [
            "eee_func",
            "media_room",
            "timecode",
            "subtitle_room",
            "add_subtitle_manual"
        ],
        "marked_name": "test_eee_func_25_3",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_2') is run and passed",
            "1. Enter Room (Media) (0) > Select Track (1) and set timeline timecode to ('00_00_13_23') at main page",
            "2. Enter Room (Subtitle) (8)",
            "3. Click [Add] button",
            "4. Modify the (2) subtitle text to (string1='Only one day')",
            "5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I100.png') matches Ground Truth (Ground_Truth_Folder + 'I100.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.media_room\n    @pytest.mark.timecode\n    @pytest.mark.subtitle_room\n    @pytest.mark.add_subtitle_manual\n    @pytest.mark.name(\"[test_eee_func_25_3] Modify subtitle text and verify preview update\")\n    def test_eee_func_25_3(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_2') is run and passed\n        1. Enter Room (Media) (0) > Select Track (1) and set timeline timecode to ('00_00_13_23') at main page\n        2. Enter Room (Subtitle) (8)\n        3. Click [Add] button\n        4. Modify the (2) subtitle text to (string1='Only one day')\n        5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I100.png') matches Ground Truth (Ground_Truth_Folder + 'I100.png') with similarity 0.95\n        '''\ndependency_test = \"test_eee_func_25_2\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L100] 2.6 Subtitle Room > Input text\n        # with uuid(\"7f4c7718-d0a0-427c-abaf-809b8555a48a\") as case:\n\n        with step(\"[Action] Enter Room (Media) (0), select Track (1) and set timeline timecode to '00_00_13_23'\"):\n            main_page.enter_room(0)\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode(\"00_00_13_23\", is_verify=True)\n        \n        with step(\"[Action] Enter Room (Subtitle) (8)\"):\n            main_page.enter_room(8)\n        \n        with step(\"[Action] Click [Add] button\"):\n            subtitle_room_page.click_add_btn(is_click=1)\n        \n        with step(\"[Action] Modify subtitle text (2) to 'Only one day'\"):\n            subtitle_room_page.modify_subtitle_text(2, string1=\"Only one day\")\n        \n        with step(\"[Verify] Capture preview and compare with GT (I100.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + \"I100.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"I100.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (I100.png)! Similarity should > 0.95\"\n        \n        assert True"
    },
    {
        "name": "test_eee_func_25_4",
        "tags": [
            "eee_func",
            "subtitle_room",
            "position"
        ],
        "marked_name": "test_eee_func_25_4",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_3') is run and passed",
            "1. Click the (1) subtitle text > Click [Adjust Position] button",
            "2. Set [X] position to (0.58) by textbox and [Y] position to (0.29) by textbox",
            "3. Click [Close] button to close position window > Click [Adjust Position] button again",
            "4. Get [X] position value and check is ('0.58')",
            "5. Get [Y] position value and check is ('0.29')",
            "6. Click [Close] button to close position window",
            "7. Check preview (locator=main_page.area.preview.main) matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.999",
            "8. Reset [Subtitle] position"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.position\n    @pytest.mark.name(\"[test_eee_func_25_4] Change subtitle position and preview match GT\")\n    def test_eee_func_25_4(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_3') is run and passed\n        1. Click the (1) subtitle text > Click [Adjust Position] button\n        2. Set [X] position to (0.58) by textbox and [Y] position to (0.29) by textbox\n        3. Click [Close] button to close position window > Click [Adjust Position] button again\n        4. Get [X] position value and check is ('0.58')\n        5. Get [Y] position value and check is ('0.29')\n        6. Click [Close] button to close position window\n        7. Check preview (locator=main_page.area.preview.main) matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.999\n        8. Reset [Subtitle] position\n        '''\ndependency_test = \"test_eee_func_25_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L103] 2.6 Subtitle Room > Adjust subtitle position\n        # with uuid(\"3c4d814a-b38f-426e-a04b-3bdb406cef94\") as case:\n\n        with step(\"[Action] Click subtitle text and adjust position\"):\n            subtitle_room_page.select_subtitle_row(1)\n            subtitle_room_page.click_adjust_pos_btn()\n\n        with step(\"[Action] Set X position to 0.58 and Y position to 0.29\"):\n            subtitle_room_page.position.set_x_value(0.58)\n            subtitle_room_page.position.set_y_value(0.29)\n\n        with step(\"[Action] Close position window and re-open adjust position\"):\n            subtitle_room_page.position.close_window()\n            subtitle_room_page.click_adjust_pos_btn()\n\n        with step(\"[Verify] Check X position value is '0.58'\"):\n            x_value = subtitle_room_page.position.get_x_value()\n            if x_value != '0.58':\n                assert False, f\"X position value incorrect! Expected: 0.58, Got: {x_value}\"\n\n        with step(\"[Verify] Check Y position value is '0.29'\"):\n            y_value = subtitle_room_page.position.get_y_value()\n            if y_value != '0.29':\n                assert False, f\"Y position value incorrect! Expected: 0.29, Got: {y_value}\"\n\n        with step(\"[Action] Close position window\"):\n            subtitle_room_page.position.close_window()\n\n        with step(\"[Verify] Check preview matches GT (I99.png)\"):\n            preview = main_page.snapshot(locator=main_page.area.preview.main,\n                                         file_name=Auto_Ground_Truth_Folder + 'I99.png')\n            check_preview = main_page.compare(Ground_Truth_Folder + 'I99.png', preview, similarity=0.999)\n            if not check_preview:\n                # Similarity should be greater than 0.999 for matching preview\n                assert False, \"Preview does not match Ground Truth (I99.png)! Similarity should > 0.999\"\n\n        with step(\"[Action] Reset [Subtitle] position\"):\n            subtitle_room_page.click_adjust_pos_btn()\n            subtitle_room_page.position.click_reset_btn()\n            subtitle_room_page.position.close_window()\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_5",
        "tags": [
            "eee_func",
            "subtitle_room"
        ],
        "marked_name": "test_eee_func_25_5",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_4') is run and passed",
            "1. Select subtitle row (2) and get total subtitle rows",
            "2. Set timeline timecode to ('00_00_10_08') at main page",
            "3. Click [Split] button",
            "4. Get total subtitle rows and check if it increased by 1"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.name(\"[test_eee_func_25_5] Verify subtitle row count increases after split\")\n    def test_eee_func_25_5(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_4') is run and passed\n        1. Select subtitle row (2) and get total subtitle rows\n        2. Set timeline timecode to ('00_00_10_08') at main page\n        3. Click [Split] button\n        4. Get total subtitle rows and check if it increased by 1\n        '''\ndependency_test = \"test_eee_func_25_4\"\n        self.ensure_dependency(dependency_test)\n\n        # [L101] 2.6 Subtitle Room > Merge / Split subtitle\n        # with uuid(\"f8692306-bb74-44dc-abf4-f5374b0fca0c\") as case:\n\n        with step(\"[Action] Select subtitle row 2 and get total subtitle rows\"):\n            subtitle_room_page.select_subtitle_row(2)\n            initial_count = self.get_total_subtitle_rows()\n\n        with step(\"[Action] Set timeline timecode to 00_00_10_08\"):\n            main_page.set_timeline_timecode('00_00_10_08')\n\n        with step(\"[Action] Click Split button\"):\n            subtitle_room_page.click_split_btn()\n\n        with step(\"[Verify] Check total subtitle rows increased by 1\"):\n            final_count = self.get_total_subtitle_rows()\n            if final_count != initial_count + 1:\n                assert False, f\"Expected subtitle row count to increase by 1, but got initial {initial_count} and final {final_count}\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_6",
        "tags": [
            "eee_func",
            "subtitle_room"
        ],
        "marked_name": "test_eee_func_25_6",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_5') is run and passed",
            "1. Select subtitle row (1, 2) and click [Merge] button",
            "2. Select subtitle row (2) and get total subtitle rows",
            "3. Check if total subtitle rows is 2",
            "4. Undo merge operation"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.name(\"[test_eee_func_25_6] Verify subtitle merge reduces total subtitle rows to 2\")\n    def test_eee_func_25_6(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_5') is run and passed\n        1. Select subtitle row (1, 2) and click [Merge] button\n        2. Select subtitle row (2) and get total subtitle rows\n        3. Check if total subtitle rows is 2\n        4. Undo merge operation\n        '''\ndependency_test = \"test_eee_func_25_5\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Select subtitle rows 1 and 2 and merge\"):\n            subtitle_room_page.multiple_select_subtitle_row(1,2)\n            subtitle_room_page.click_merge_btn()\n\n        with step(\"[Verify] Check total subtitle rows equals 2\"):\n            total_rows = self.get_total_subtitle_rows()\n            if total_rows != 2:\n                assert False, f\"Expected total subtitle rows to be 2, but got {total_rows}\"\n        \n        with step(\"[Action] Undo merge operation\"):\n            main_page.click_undo()\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_7",
        "tags": [
            "eee_func",
            "subtitle_room",
            "character"
        ],
        "marked_name": "test_eee_func_25_7",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_6') is run and passed",
            "1. Click [Change Subtitle Text Format] button and capture screenshot (L.subtitle_room.character.main_window)",
            "2. Set [Font Type] to ('Mom Outline') and check preview is updated with similarity 0.99",
            "3. Set [Size] to ('22') and check preview is updated with similarity 0.99",
            "4. Set [Text Color] to ('797AFF') and check preview is updated with similarity 0.99",
            "5. Click [OK] button to close [Character] window",
            "6. Select subtitle row (2)",
            "7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I104.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.character\n    @pytest.mark.name(\"[test_eee_func_25_7] Change [Font Type], [Size], [Text Color] in subtitle room and verify preview update\")\n    def test_eee_func_25_7(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_6') is run and passed\n        1. Click [Change Subtitle Text Format] button and capture screenshot (L.subtitle_room.character.main_window)\n        2. Set [Font Type] to ('Mom Outline') and check preview is updated with similarity 0.99\n        3. Set [Size] to ('22') and check preview is updated with similarity 0.99\n        4. Set [Text Color] to ('797AFF') and check preview is updated with similarity 0.99\n        5. Click [OK] button to close [Character] window\n        6. Select subtitle row (2)\n        7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I104.png') with similarity 0.95\n        '''\ndependency_test = \"test_eee_func_25_6\"\n        self.ensure_dependency(dependency_test)\n\n        # [L104] 2.6 Subtitle Room > Change subtitle text format\n        # with uuid(\"8fa81655-5d49-4bcf-9d54-8eef4865e33e\") as case:\n\n        with step(\"[Action] Click Change Subtitle Text Format and capture screenshot\"):\n            subtitle_room_page.click_change_subtitle_format()\n            before_preview = main_page.snapshot(locator=L.subtitle_room.character.main_window)\n\n        with step(\"[Action] Set Font Type to 'Mom Outline' and verify preview update\"):\n            subtitle_room_page.character.apply_font_type('Mom Outline')\n            preview_font = main_page.snapshot(locator=L.subtitle_room.character.main_window)\n            check_font = main_page.compare(before_preview, preview_font, similarity=0.99)\n            if check_font:\n                assert False, \"Preview after setting Font Type does not match GT! Similarity should< 0.99\"\n\n        with step(\"[Action] Set Size to '22' and verify preview update\"):\n            subtitle_room_page.character.apply_size('22')\n            preview_size = main_page.snapshot(locator=L.subtitle_room.character.main_window)\n            check_size = main_page.compare(check_font, preview_size, similarity=0.99)\n            if check_size:\n                assert False, \"Preview after setting Size does not match GT! Similarity should < 0.99\"\n\n        with step(\"[Action] Set Text Color to '797AFF' and verify preview update\"):\n            subtitle_room_page.character.set_text_color('797AFF')\n            preview_color = main_page.snapshot(locator=L.subtitle_room.character.main_window)\n            check_color = main_page.compare(preview_size, preview_color, similarity=0.99)\n            if check_color:\n                assert False, \"Preview after setting Text Color does not match GT! Similarity should < 0.99\"\n\n        with step(\"[Action] Click OK to close Character window\"):\n            subtitle_room_page.character.click_ok()\n\n        with step(\"[Action] Select subtitle row 2\"):\n            subtitle_room_page.select_subtitle_row(2)\n\n        with step(\"[Verify] Check final preview matches GT (I104.png)\"):\n            final_preview = main_page.snapshot(locator=main_page.area.preview.main,\n                                            file_name=Auto_Ground_Truth_Folder + 'I104.png')\n            check_final = main_page.compare(Ground_Truth_Folder + 'I104.png', final_preview, similarity=0.95)\n            if not check_final:\n                # Similarity should be greater than 0.95 for final preview match\n                assert False, \"Final preview does not match GT (I104.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_8",
        "tags": [
            "eee_func",
            "media_room",
            "timecode",
            "subtitle_room",
            "play_video"
        ],
        "marked_name": "test_eee_func_25_8",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_7') is run and passed",
            "1. Click preview is changed when playing video in 3 secs",
            "2. Enter Room (Media) (0) > Select Track (1) and set timecode to ('00_00_11_04') at main page",
            "3. Enter Room (Subtitle) (8)",
            "4. Check Preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I106.png') matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.media_room\n    @pytest.mark.timecode\n    @pytest.mark.subtitle_room\n    @pytest.mark.play_video\n    @pytest.mark.name(\"[test_eee_func_25_8] Verify preview change during playback and GT match after setting timecode\")\n    def test_eee_func_25_8(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_7') is run and passed\n        1. Click preview is changed when playing video in 3 secs\n        2. Enter Room (Media) (0) > Select Track (1) and set timecode to ('00_00_11_04') at main page\n        3. Enter Room (Subtitle) (8)\n        4. Check Preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I106.png') matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95\n        '''\ndependency_test = \"test_eee_func_25_7\"\n        self.ensure_dependency(dependency_test)\n\n        # [L106] 2.6 Subtitle Room > Preview movie\n        # with uuid(\"ab3bcb63-36a3-44bb-8622-c12d44e0068d\") as case:\n\n        with step(\"[Action] Play video for 3 seconds and check preview change\"):\n            # playback_window_page.Edit_Timeline_PreviewOperation('Play')\n            # time.sleep(DELAY_TIME * 3)\n            # playback_window_page.Edit_Timeline_PreviewOperation('STOP')\n            # time.sleep(DELAY_TIME * 2)\n\n            main_page.Check_PreviewWindow_is_different(sec=3)\n\n        with step(\"[Action] Enter Media Room (0), select Track (1) and set timecode to '00_00_11_04'\"):\n            main_page.enter_room(0)\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode(\"00_00_11_04\", is_verify=True)\n\n        with step(\"[Action] Enter Subtitle Room (8)\"):\n            main_page.enter_room(8)\n\n        with step(\"[Verify] Check preview matches GT (I106.png)\"):\n            preview = main_page.snapshot(\n                locator=main_page.area.preview.main,\n                file_name=Auto_Ground_Truth_Folder + \"I106.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"I106.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (I106.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_9",
        "tags": [
            "eee_func",
            "subtitle_room",
            "export_srt"
        ],
        "marked_name": "test_eee_func_25_9",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_8') is run and passed",
            "1. If exist_file (srt_export_folder + 'test_1_20_extra_font.srt'), delete the folder",
            "2. Click [Export SRT] button with \"Export With Additional SubRip Style Information\" option",
            "3. Handle save file dialog with file name 'ttest_eee_func_25_9_font.srt' and save to (srt_export_folder + 'test_1_20_extra_font.srt')",
            "4. Check if saved file existed"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.export_srt\n    @pytest.mark.name(\"[test_eee_func_25_9] Export SRT with 'Export With Additional SubRip Style Information'\")\n    def test_eee_func_25_9(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_8') is run and passed\n        1. If exist_file (srt_export_folder + 'test_1_20_extra_font.srt'), delete the folder\n        2. Click [Export SRT] button with \"Export With Additional SubRip Style Information\" option\n        3. Handle save file dialog with file name 'ttest_eee_func_25_9_font.srt' and save to (srt_export_folder + 'test_1_20_extra_font.srt')\n        4. Check if saved file existed\n        '''\ndependency_test = \"test_eee_func_25_8\"\n        self.ensure_dependency(dependency_test)\n\n        srt_export_folder = Test_Material_Folder + 'BFT_21_Stage1/Export/additional_font/'\n\n        # [L105] 2.6 Subtitle Room > EXport & Import subtitle\n        # with uuid(\"381ba551-3de8-4d4f-b5f0-2c00938a7f29\") as case:\n\n        with step(\"[Action] Delete existing SRT export folder if file exists\"):\n            if main_page.exist_file(srt_export_folder):\n                main_page.delete_folder(srt_export_folder)\n\n        with step(\"[Action] Click [Export SRT] button with 'Export With Additional SubRip Style Information' option (0)\"):\n            subtitle_room_page.more.click_export_str(0)\n\n        with step(\"[Action] Handle save file dialog with file name 'test_eee_func_25_9_font.srt'\"):\n            main_page.handle_save_file_dialog(name=\"test_eee_func_25_9_font.srt\", folder_path=srt_export_folder)\n\n        with step(\"[Verify] Check if the exported SRT file exists\"):\n            file_path = srt_export_folder + \"test_eee_func_25_9_font.srt\"\n            if not main_page.exist_file(file_path):\n                assert False, \"Exported SRT file does not exist!\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_10",
        "tags": [
            "eee_func",
            "subtitle_room",
            "timecode"
        ],
        "marked_name": "test_eee_func_25_10",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_9') is run and passed",
            "1. Select subtitle row (1) and click [Delete] button in subtitle room",
            "2. Get [start time] of the (1) subtitle text",
            "3. Check [Start Time] is ('00:00:08:23')"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.timecode\n    @pytest.mark.name(\"[test_eee_func_25_10] Verify subtitle start time after deletion\")\n    def test_eee_func_25_10(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_9') is run and passed\n        1. Select subtitle row (1) and click [Delete] button in subtitle room\n        2. Get [start time] of the (1) subtitle text\n        3. Check [Start Time] is ('00:00:08:23')\n        '''\ndependency_test = \"test_eee_func_25_9\"\n        self.ensure_dependency(dependency_test)\n\n        # [L102] 2.6 Subtitle Room > Remove Subtitle\n        # with uuid(\"3c0551ff-9dc6-40cb-b37e-72c21f6fe3ab\") as case:\n\n        with step(\"[Action] Select subtitle row 1 and click Delete button\"):\n            subtitle_room_page.select_subtitle_row(1)\n            subtitle_room_page.click_del_btn(is_click=1)\n\n        with step(\"[Action] Get start time of subtitle row 1\"):\n            start_time = subtitle_room_page.get_start_time(1)\n\n        with step(\"[Verify] Check start time is '00:00:08:23'\"):\n            if start_time != '00:00:08:23':\n                assert False, f\"Expected start time '00:00:08:23', but got '{start_time}'\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_10",
        "tags": [
            "eee_func",
            "subtitle_room",
            "import_media",
            "media_room"
        ],
        "marked_name": "test_eee_func_25_10",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_10') is run and passed",
            "1. Select subtitle row (2) and click [Change Subtitle Format] button",
            "2. Click [Apply To All] button",
            "3. Click [Clear All Subtitles] from [More] button to initialize",
            "4. Click [Import subtitles from SRT/TXT file] from [More] button",
            "5. Handle open project dialog with file (Test_Material_Folder + 'BFT_21_Stage1/Export/additional_font/' + 'test_eee_func_25_10_font.srt') to import subtitle",
            "6. Enter Room (0) and set timeline timecode to '00_00_11_04' at main page",
            "7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.import_media\n    @pytest.mark.media_room\n    @pytest.mark.name(\"[test_eee_func_25_10] Verify subtitle import and preview update after clearing subtitles\")\n    def test_eee_func_25_10(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_10') is run and passed\n        1. Select subtitle row (2) and click [Change Subtitle Format] button\n        2. Click [Apply To All] button\n        3. Click [Clear All Subtitles] from [More] button to initialize\n        4. Click [Import subtitles from SRT/TXT file] from [More] button\n        5. Handle open project dialog with file (Test_Material_Folder + 'BFT_21_Stage1/Export/additional_font/' + 'test_eee_func_25_10_font.srt') to import subtitle\n        6. Enter Room (0) and set timeline timecode to '00_00_11_04' at main page\n        7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95\n        '''\ndependency_test = \"test_eee_func_25_10\"\n        self.ensure_dependency(dependency_test)\n\n        with step(\"[Action] Select subtitle row 2 and click Change Subtitle Format button\"):\n            subtitle_room_page.select_subtitle_row(2)\n            subtitle_room_page.click_change_subtitle_format()\n\n        with step(\"[Action] Click Apply To All button\"):\n            subtitle_room_page.character.apply_to_all()\n\n        with step(\"[Action] Click Clear All Subtitles from More button\"):\n            subtitle_room_page.more.click_clear_all_subtitles()\n\n        with step(\"[Action] Click Import subtitles from SRT/TXT file from More button\"):\n            subtitle_room_page.more.click_import_subtitle_file()\n\n        with step(\"[Action] Handle open project dialog to import subtitle file\"):\n            import_file = Test_Material_Folder + \"BFT_21_Stage1/Export/additional_font/\"\n            main_page.handle_open_project_dialog(import_file + 'test_eee_func_25_10_font.srt')\n\n        with step(\"[Action] Enter Room (0) and set timeline timecode to '00_00_11_04'\"):\n            main_page.enter_room(0)\n            main_page.timeline_select_track(1)\n            main_page.set_timeline_timecode(\"00_00_11_04\", is_verify=True)\n\n        with step(\"[Verify] Capture preview and compare with GT (I106.png)\"):\n            preview = main_page.snapshot(locator=main_page.area.preview.main,\n                                        file_name=Auto_Ground_Truth_Folder + \"I106.png\")\n            if not main_page.compare(Ground_Truth_Folder + \"I106.png\", preview, similarity=0.95):\n                # Similarity should be greater than 0.95 for a matching preview\n                assert False, \"Preview does not match GT (I106.png)! Similarity should > 0.95\"\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_11",
        "tags": [
            "eee_func",
            "subtitle_room",
            "pack_project"
        ],
        "marked_name": "test_eee_func_25_11",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_10') is run and passed",
            "1. Open [Pack Project Materials] from top menu bar with (project_path=Test_Material_Folder + 'BFT_21_Stage1/first_project/')",
            "2. Check if project is packed successfully and wait for processing (DELAY_TIME*15)"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.subtitle_room\n    @pytest.mark.pack_project\n    @pytest.mark.name(\"[test_eee_func_25_11] Pack project materials and wait for processing\")\n    def test_eee_func_25_11(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_10') is run and passed\n        1. Open [Pack Project Materials] from top menu bar with (project_path=Test_Material_Folder + 'BFT_21_Stage1/first_project/')\n        2. Check if project is packed successfully and wait for processing (DELAY_TIME*15)\n        '''\ndependency_test = \"test_eee_func_25_10\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L107] 2.6 Subtitle Room > Save Project & Pack project material\n        # with uuid(\"4c2bfca6-2351-4925-ba94-9af00253b738\") as case:\n\n        with step(\"[Action] Open Pack Project Materials from top menu bar\"):\n            project_path = Test_Material_Folder + \"BFT_21_Stage1/first_project/\"\n            pack_result = main_page.top_menu_bar_file_pack_project_materials(project_path)\n            if not pack_result:\n                assert False, \"Pack project material failed!\"\n\n        with step(\"[Action] Wait for project processing to complete\"):\n            time.sleep(DELAY_TIME * 15)\n\n        assert True"
    },
    {
        "name": "test_eee_func_25_12",
        "tags": [
            "eee_func",
            "launch"
        ],
        "marked_name": "test_eee_func_25_12",
        "description": [
            "0. Ensure the dependency test ('test_eee_func_25_11') is run and passed",
            "1. Close and restart app",
            "2. Check if able to select component ('Landscape 02.jpg') from library icon view"
        ],
        "full_code": "@pytest.mark.eee_func\n    @pytest.mark.launch\n    @pytest.mark.name(\"[test_eee_func_25_12] Relaunch APP in subtitle room and check able to select component after relaunch\")\n    def test_eee_func_25_12(self):\n    '''\n        0. Ensure the dependency test ('test_eee_func_25_11') is run and passed\n        1. Close and restart app\n        2. Check if able to select component ('Landscape 02.jpg') from library icon view\n        '''\ndependency_test = \"test_eee_func_25_11\"\n        self.ensure_dependency(dependency_test)\n\n        # [L108] 2.6 Subtitle Room > Re-launch PDR\n        # with uuid(\"e8516fc6-791e-433e-b83c-768fff49c3be\") as case:\n\n        with step(\"[Action] Close and restart the app\"):\n            main_page.close_and_restart_app()\n\n        with step(\"[Verify] Select component 'Landscape 02.jpg' from library icon view\"):\n            if not main_page.select_library_icon_view_media(\"Landscape 02.jpg\"):\n                assert False, 'Failed to select component \"Landscape 02.jpg\" from library icon view after relaunch AP in subtitle room'\n\n        assert True"
    },
    {
        "name": "test_effect_n_bg_music_cross_func_26_1",
        "tags": [
            "effect_n_bg_music_cross_func",
            "launch",
            "effect_settings_room",
            "search_library",
            "timeline"
        ],
        "marked_name": "[test_effect_n_bg_music_cross_func_26_1] Verify effect adjustment and preview update",
        "description": [
            "1. Clear cache and start app",
            "2. Import [Media File] from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')",
            "3. Select timeline track (2)",
            "4. Click [Insert to Selected Track] button",
            "5. Enter Room (Effect) (3) and take a screenshot (locator=L.base.Area.preview.only_mtk_view)",
            "6. Select [Style Effect] category",
            "7. Search keyword ('TV Wall') and drag the template to timeline playhead position",
            "8. Click [Effect] button and adjust Vertical Slider in TV Wall",
            "9. Check preview is updated after adjusting parameter (similarity should be between 0.8 and 0.9)",
            "10. Click [Close] button to close effect setting and return to effect room"
        ],
        "full_code": "@pytest.mark.effect_n_bg_music_cross_func\n    @pytest.mark.launch\n    @pytest.mark.effect_settings_room\n    @pytest.mark.search_library\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_1] Verify effect adjustment and preview update')\n    def test_effect_n_bg_music_cross_func_26_1(self):\n    '''\n        1. Clear cache and start app\n        2. Import [Media File] from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')\n        3. Select timeline track (2)\n        4. Click [Insert to Selected Track] button\n        5. Enter Room (Effect) (3) and take a screenshot (locator=L.base.Area.preview.only_mtk_view)\n        6. Select [Style Effect] category\n        7. Search keyword ('TV Wall') and drag the template to timeline playhead position\n        8. Click [Effect] button and adjust Vertical Slider in TV Wall\n        9. Check preview is updated after adjusting parameter (similarity should be between 0.8 and 0.9)\n        10. Click [Close] button to close effect setting and return to effect room\n        '''\nwith step('[Action] Clear cache and start app'):\n            main_page.clear_cache()\n            main_page.start_app()\n\n        with step('[Action] Import media file from local'):\n            media_path = Test_Material_Folder + 'Subtitle_Room/JPN.mp4'\n            media_room_page.import_media_file(media_path)\n\n        with step('[Action] Select timeline track 2'):\n            main_page.timeline_select_track(2)\n\n        with step('[Action] Click [Insert to Selected Track] button'):\n            tips_area_page.tips_area_insert_media_to_selected_track()\n\n        with step('[Action] Enter Room (Effect) (3) and capture initial preview'):\n            main_page.enter_room(3)\n            preview_initial = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n\n        # [L220] 2.3 Effect Room > Add each kind of template to timeline / preview > apply CL Effect & enter modify page\n        # with uuid(\"16fd758d-f1b1-4d46-b504-c23142c983ae\") as case:\n\n        with step('[Action] Select [Style Effect] category'):\n            main_page.select_LibraryRoom_category('Style Effect')\n\n        with step('[Action] Search for \"TV Wall\" and drag template to timeline playhead'):\n            media_room_page.search_library('TV Wall')\n            time.sleep(DELAY_TIME * 2)\n            main_page.drag_media_to_timeline_playhead_position(\"TV Wall\")\n\n        with step('[Action] Click [Effect] button and adjust Vertical Slider in TV Wall'):\n            tips_area_page.click_TipsArea_btn_effect()\n            effect_settings_page.tv_wall.adjust_vertical_slider()\n\n        with step('[Verify] Check preview is updated after adjusting parameter'):\n            preview_updated = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            # Similarity should be between 0.8 and 0.9 for updated preview\n            if not main_page.compare(preview_initial, preview_updated, similarity=0.80):\n                assert False, \"Preview did not update as expected! Similarity should be in 0.8~0.9. The similarity is too low \"\n\n            if main_page.compare(preview_initial, preview_updated, similarity=0.90):\n                assert False, \"Preview did not update as expected! Similarity should be in 0.8~0.9. The similarity is too high\"\n\n        with step('[Action] Click [Close] button to close effect setting and return to effect room'):\n            main_page.click(L.tips_area.button.btn_effect_close)\n\n        assert True"
    },
    {
        "name": "test_effect_n_bg_music_cross_func_26_2",
        "tags": [
            "effect_n_bg_music_cross_func",
            "effect_settings_room",
            "search_library",
            "timeline"
        ],
        "marked_name": "[test_effect_n_bg_music_cross_func_26_2] Verify preview update after searching and dragging template",
        "description": [
            "0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_1') is run and passed",
            "1. Select Library Room category ('Color LUT') and capture initial preview (locator=L.base.Area.preview.only_mtk_view)",
            "2. Search keyword ('White Tones Cold 06') and drag template to timeline playhead position",
            "3. Compare preview with step 1 and check if updated (similarity should be > 0.96 and < 0.998)"
        ],
        "full_code": "@pytest.mark.effect_n_bg_music_cross_func\n    @pytest.mark.effect_settings_room\n    @pytest.mark.search_library\n    @pytest.mark.timeline\n    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_2] Verify preview update after searching and dragging template')\n    def test_effect_n_bg_music_cross_func_26_2(self):\n    '''\n        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_1') is run and passed\n        1. Select Library Room category ('Color LUT') and capture initial preview (locator=L.base.Area.preview.only_mtk_view)\n        2. Search keyword ('White Tones Cold 06') and drag template to timeline playhead position\n        3. Compare preview with step 1 and check if updated (similarity should be > 0.96 and < 0.998)\n        '''\ndependency_test = \"test_effect_n_bg_music_cross_func_26_1\"\n        self.ensure_dependency(dependency_test)\n\n\n        # [L221] 2.3 Effect Room > Add each kind of template to timeline / preview > LUT\n        # with uuid(\"462afe20-b5a2-491c-9506-8053bd48ab9a\") as case:\n\n        with step(\"[Action] Select Library Room category 'Color LUT' and capture initial preview\"):\n            main_page.select_LibraryRoom_category('Color LUT')\n            preview_before = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n\n        with step(\"[Action] Search for 'White Tones Cold 06' and drag template to timeline playhead position\"):\n            media_room_page.search_library(\"White Tones Cold 06\")\n            main_page.drag_media_to_timeline_playhead_position(\"White Tones Cold 06\")\n\n        with step(\"[Verify] Check preview is updated with similarity > 0.96\"):\n            preview_after = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            # Verify that the updated preview similarity is greater than 0.96\n            if not main_page.compare(preview_before, preview_after, similarity=0.96):\n                assert False, \"Preview similarity is not greater than 0.96\"\n\n        with step(\"[Verify] Check preview is updated with similarity < 0.998\"):\n            preview_after = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)\n            # Verify that the updated preview similarity is less than 0.998, indicating a noticeable change\n            if main_page.compare(preview_before, preview_after, similarity=0.998):\n                assert False, \"Preview similarity is not less than 0.998\"\n\n        assert True"
    },
    {
        "name": "test_effect_n_bg_music_cross_func_26_3",
        "tags": [
            "effect_n_bg_music_cross_func"
        ],
        "marked_name": "[test_effect_n_bg_music_cross_func_26_3] Search background music for \"島\" and verify specific sound clip selection",
        "description": [
            "0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_2') is run and passed",
            "1. Enter Room (Media) (0)",
            "2. Enter [Background Music (meta)] Category",
            "3. Search keyword ('島')",
            "4. Select specific sound clips in library by name ('The Island (島) (feat. Atsu) ') and check result"
        ],
        "full_code": "@pytest.mark.effect_n_bg_music_cross_func\n    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_3] Search background music for \"島\" and verify specific sound clip selection')\n    def test_effect_n_bg_music_cross_func_26_3(self):\n    '''\n        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_2') is run and passed\n        1. Enter Room (Media) (0)\n        2. Enter [Background Music (meta)] Category\n        3. Search keyword ('島')\n        4. Select specific sound clips in library by name ('The Island (島) (feat. Atsu) ') and check result\n        '''\ndependency_test = \"test_effect_n_bg_music_cross_func_26_2\"\n        self.ensure_dependency(dependency_test)\n\n        # [L163] 2.1 Media Room > BGM (Meta) > Input  double bytes character (ex: CHT/ JPN/...)\n        # with uuid(\"be74d15c-f03e-4f36-b29c-0bdf9cbecc77\") as case:\n\n        with step('[Action] Enter Room (Media) (0)'):\n            main_page.enter_room(0)\n\n        with step('[Action] Enter [Background Music (meta)] Category'):\n            media_room_page.enter_background_music()\n\n        with step('[Action] Search keyword \"島\" in library'):\n            media_room_page.search_library(\"島\")\n            time.sleep(DELAY_TIME * 2)\n\n        with step('[Verify] Check specific sound clip \"The Island (島) (feat. Atsu) \" is displayed'):\n            if not media_room_page.sound_clips_select_media(\"The Island (島) (feat. Atsu) \"):\n                assert False, 'Sound clip \"The Island (島) (feat. Atsu) \" is not displayed in library!'\n            \n            time.sleep(DELAY_TIME * 4) # wait for download\n\n        assert True"
    },
    {
        "name": "test_effect_n_bg_music_cross_func_26_4",
        "tags": [
            "effect_n_bg_music_cross_func",
            "bg_music"
        ],
        "marked_name": "[test_effect_n_bg_music_cross_func_26_4] Click [Meta] icon and verify webpage is opened",
        "description": [
            "0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_3') is run and passed",
            "1. Click [Meta] icon",
            "2. Check [Meta] webpage is opened after clicked [Meta] icon"
        ],
        "full_code": "@pytest.mark.effect_n_bg_music_cross_func\n    @pytest.mark.bg_music\n    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_4] Click [Meta] icon and verify webpage is opened')\n    def test_effect_n_bg_music_cross_func_26_4(self):\n    '''\n        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_3') is run and passed\n        1. Click [Meta] icon\n        2. Check [Meta] webpage is opened after clicked [Meta] icon\n        '''\ndependency_test = \"test_effect_n_bg_music_cross_func_26_3\"\n        self.ensure_dependency(dependency_test)\n\n        # [L155] 2.1 Media Room > BGM (Meta) > Click Meta logo\n        # with uuid(\"207c53da-0335-4a7a-bbc3-cd62f9dbfda1\") as case:\n\n        with step(\"[Action] Click [Meta] icon\"):\n            media_room_page.click_meta_icon()\n\n        with step(\"[Verify] Check [Meta] webpage is opened after clicked [Meta] icon\"):\n            if not media_room_page.verify_after_click_meta_icon():\n                assert False, \"Meta webpage is not opened after clicked [Meta] icon!\"\n\n        assert True"
    },
    {
        "name": "test_effect_n_bg_music_cross_func_26_5",
        "tags": [
            "effect_n_bg_music_cross_func",
            "effect_room",
            "effect_settings",
            "search_library",
            "content_pack",
            "save_project"
        ],
        "marked_name": "[test_effect_n_bg_music_cross_func_26_5] Process [Broken Glass] effect in [Effect Settings] and verify timeline preview",
        "description": [
            "0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_4') is run and passed",
            "1. Enter Room (Effect) (3)",
            "2. Unfold [CLUT] category",
            "3. Select Library Room category ('Style Effect')",
            "4. Search conponent ('Broken Glass')",
            "5. Select media ('Broken Glass') by icon view > right click > click ('Add to Timeline') on right click menu",
            "6. Click [Effect] button on [Tips Area]",
            "7. Adjust Degree slider in Broken Glass effect",
            "8. Click [Close] to close effect setting and return to effect room",
            "9. Set timecode to ('00_00_02_15') on main page",
            "10. Screen preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L219.png') and compare with GT (Ground_Truth_Folder + 'L219.png') with similarity 0.97",
            "11. Save the project as (name='test_effect_n_bg_music_cross_func_26_5', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')"
        ],
        "full_code": "@pytest.mark.effect_n_bg_music_cross_func\n    @pytest.mark.effect_room\n    @pytest.mark.effect_settings\n    @pytest.mark.search_library\n    @pytest.mark.content_pack\n    @pytest.mark.save_project\n    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_5] Process [Broken Glass] effect in [Effect Settings] and verify timeline preview')\n    def test_effect_n_bg_music_cross_func_26_5(self):\n    '''\n        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_4') is run and passed\n        1. Enter Room (Effect) (3)\n        2. Unfold [CLUT] category\n        3. Select Library Room category ('Style Effect')\n        4. Search conponent ('Broken Glass')\n        5. Select media ('Broken Glass') by icon view > right click > click ('Add to Timeline') on right click menu\n        6. Click [Effect] button on [Tips Area]\n        7. Adjust Degree slider in Broken Glass effect\n        8. Click [Close] to close effect setting and return to effect room\n        9. Set timecode to ('00_00_02_15') on main page\n        10. Screen preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L219.png') and compare with GT (Ground_Truth_Folder + 'L219.png') with similarity 0.97\n        11. Save the project as (name='test_effect_n_bg_music_cross_func_26_5', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')\n        '''\ndependency_test = \"test_effect_n_bg_music_cross_func_26_4\"\n        self.ensure_dependency(dependency_test)\n        \n        # [L219] 2.3 Effect Room > Add effect item into timeline independently & enter \"Modify\" page\n        # with uuid(\"f5b68762-124e-4f37-8d9c-dbc82177297b\") as case:\n        with step(\"[Action] Enter Room (Effect) (3)\"):\n            main_page.enter_room(3)\n        \n        with step(\"[Action] Unfold [CLUT] category\"):\n            main_page.unfold_clut_category()\n        \n        with step(\"[Action] Select Library Room category 'Style Effect'\"):\n            main_page.select_LibraryRoom_category(\"Style Effect\")\n        \n        with step(\"[Action] Search conponent 'Broken Glass' in library\"):\n            media_room_page.search_library(\"Broken Glass\")\n        \n        with step(\"[Action] Select media 'Broken Glass' by icon view and add to timeline via right click menu\"):\n            main_page.select_library_icon_view_media(\"Broken Glass\")\n            main_page.right_click()\n            main_page.select_right_click_menu(\"Add to Timeline\")\n        \n        with step(\"[Action] Click [Effect] button on [Tips Area]\"):\n            tips_area_page.click_TipsArea_btn_effect()\n        \n        with step(\"[Action] Adjust Degree slider in Broken Glass effect\"):\n            effect_settings_page.broken_glass.adjust_degree_slider()\n            time.sleep(DELAY_TIME)\n        \n        with step(\"[Action] Click [Close] to close effect setting and return to effect room\"):\n            effect_settings_page.close_window()\n        \n        with step(\"[Action] Set timecode to '00_00_02_15' on main page\"):\n            main_page.set_timeline_timecode(\"00_00_02_15\")\n        \n        with step(\"[Verify] Check preview matches GT (L219.png) with similarity 0.97\"):\n            preview = main_page.snapshot(\n                locator=L.base.Area.preview.only_mtk_view,\n                file_name=Auto_Ground_Truth_Folder + \"L219.png\"\n            )\n            if not main_page.compare(Ground_Truth_Folder + \"L219.png\", preview, similarity=0.97):\n                # Similarity should be greater than 0.97 for matching preview\n                assert False, \"Preview does not match GT (L219.png)! Similarity should > 0.97\"\n        \n        with step(\"[Action] Save the project as 'test_effect_n_bg_music_cross_func_26_5'\"):\n            main_page.top_menu_bar_file_save_project_as()\n            main_page.handle_save_file_dialog(name=\"test_effect_n_bg_music_cross_func_26_5\", folder_path=Test_Material_Folder + \"BFT_21_Stage1/\")\n        \n        assert True"
    }
]